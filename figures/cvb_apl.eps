%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: field.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: luli
%%CreationDate: 6/4/16, 1:23 PM
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%CropBox: 0 0 576 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-03-04T18:21:09-04:00"
   xmp:CreatorTool="matplotlib 1.5.1, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
gsave
0 432 mo
576 432 li
576 0 li
0 0 li
cp
clp
0 432 mo
576 432 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
122.905 374.751 mo
548.532 374.751 li
548.532 25.0222 li
122.905 25.0222 li
cp
f
gsave
122.905 374.751 mo
548.532 374.751 li
548.532 25.0222 li
122.905 25.0222 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
335.719 25.0222 mo
336.783 41.9998 li
337.847 66.9223 li
338.911 68.0981 li
339.975 65.3304 li
341.039 76.0432 li
342.103 64.6437 li
343.167 79.05 li
344.231 85.7129 li
345.295 70.7513 li
346.359 70.9889 li
347.423 75.9702 li
348.488 73.9156 li
349.552 74.3146 li
350.616 66.0228 li
351.68 48.219 li
352.744 53.601 li
353.808 39.8058 li
354.872 51.3152 li
355.936 50.9738 li
357 53.1186 li
358.064 66.1936 li
359.128 43.3023 li
360.192 52.7337 li
361.256 45.0858 li
362.32 43.3489 li
363.385 54.5132 li
364.449 40.8161 li
365.513 33.5255 li
366.577 47.9286 li
367.641 37.231 li
368.705 40.8136 li
369.769 45.6079 li
370.833 48.6797 li
371.897 43.4384 li
372.961 44.2662 li
375.089 49.3797 li
376.153 45.6977 li
377.217 45.4406 li
378.281 46.6664 li
379.346 48.7022 li
380.41 40.0131 li
381.474 40.4268 li
382.538 48.917 li
383.602 33.0284 li
384.666 31.511 li
385.73 37.6903 li
386.794 51.2476 li
387.858 39.4015 li
388.922 43.5468 li
389.986 39.7974 li
391.05 43.74 li
392.114 50.0512 li
393.178 43.9212 li
394.243 52.5201 li
395.307 42.4409 li
396.371 49.1547 li
397.435 41.4571 li
398.499 44.1205 li
399.563 59.6897 li
400.627 58.551 li
401.691 49.1571 li
402.755 56.4852 li
403.819 55.3155 li
405.947 60.5547 li
407.011 51.7687 li
408.075 52.2114 li
409.139 58.8363 li
410.204 50.3585 li
411.268 50.9764 li
412.332 49.8374 li
413.396 44.8161 li
414.46 57.8056 li
415.524 62.5673 li
416.588 65.2328 li
417.652 50.3585 li
418.716 56.5109 li
419.78 65.359 li
420.844 97.7072 li
421.908 122.9 li
422.972 119.69 li
424.036 122.544 li
425.101 103.912 li
426.165 105.547 li
427.229 109.234 li
428.293 121.017 li
429.357 122.217 li
430.421 122.206 li
431.485 125.494 li
432.549 120.709 li
433.613 118.239 li
435.741 133.813 li
436.805 118.945 li
437.869 128.826 li
438.933 126.657 li
439.997 131.06 li
441.062 132.556 li
442.126 136.884 li
443.19 138.109 li
444.254 147.183 li
445.318 134.936 li
446.382 141.299 li
447.446 129.441 li
448.51 149.309 li
449.574 141.472 li
450.638 148.552 li
451.702 159.902 li
452.766 154.025 li
453.83 155.801 li
454.894 144.284 li
455.959 157.336 li
458.087 159.472 li
459.151 162.213 li
460.215 150.178 li
461.279 153.287 li
462.343 149.86 li
463.407 149.999 li
464.471 158.19 li
465.535 161.046 li
466.599 170.58 li
467.663 178.462 li
468.727 180.384 li
469.791 161.034 li
470.855 162.706 li
471.92 176.898 li
472.984 172.376 li
474.048 161.297 li
475.112 191.46 li
476.176 183.008 li
477.24 192.913 li
478.304 190.812 li
479.368 188.419 li
480.432 180.35 li
481.496 195.25 li
482.56 187.861 li
483.624 185.491 li
484.688 202.056 li
485.752 207.816 li
486.816 205.299 li
487.881 184.605 li
488.945 184.105 li
490.009 197.524 li
491.073 214.04 li
492.137 206.219 li
493.201 206.916 li
494.265 205.206 li
495.329 201.071 li
496.393 212.336 li
497.457 212.715 li
498.521 209.658 li
499.585 231.671 li
500.649 228.478 li
501.713 243.29 li
502.778 232.237 li
503.842 253.29 li
504.906 248.904 li
505.97 245.676 li
507.034 258.748 li
508.098 268.877 li
509.162 244.668 li
510.226 239.244 li
511.29 225.277 li
512.354 239.419 li
513.418 232.164 li
514.482 226.324 li
515.546 229.286 li
516.61 227.768 li
517.674 242.122 li
518.739 251.013 li
519.803 240.168 li
520.867 250.483 li
521.931 235.747 li
522.995 266.346 li
524.059 250.124 li
525.123 247.586 li
526.187 254.677 li
527.251 253.786 li
528.315 252.542 li
529.379 272.903 li
530.443 271.092 li
531.507 264.594 li
532.571 282.344 li
533.636 262.611 li
534.7 270.803 li
535.764 274.65 li
536.828 287.886 li
537.892 282.434 li
538.956 270.526 li
540.02 281 li
541.084 276.796 li
542.148 286.701 li
543.212 278.794 li
544.276 284.402 li
/1 
[/DeviceCMYK] /CSA add_res
.930816 .793027 0 0 cmyk
@
grestore
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
127.161 318.067 mo
128.225 315.657 li
129.289 333.595 li
130.353 312.319 li
131.418 324.473 li
132.482 309.926 li
133.546 315.597 li
134.61 307.925 li
135.674 310.658 li
136.738 325.711 li
137.802 310.824 li
138.866 310.851 li
139.93 303.328 li
140.994 313.562 li
142.058 304.603 li
143.122 306.414 li
144.186 303.965 li
145.25 313.845 li
146.315 297.225 li
147.379 306.888 li
148.443 295.019 li
149.507 292.496 li
150.571 293.448 li
151.635 283.175 li
152.699 287.886 li
153.763 278.749 li
154.827 278.385 li
155.891 292.539 li
156.955 282.471 li
158.019 277.441 li
159.083 256.131 li
160.147 261.14 li
161.211 262.331 li
162.276 266.067 li
163.34 261.417 li
164.404 268.266 li
165.468 263.237 li
166.532 247.113 li
167.596 244.714 li
168.66 242.818 li
169.724 252.93 li
170.788 232.494 li
171.852 232.452 li
172.916 244.115 li
173.98 230.546 li
175.044 239.556 li
176.108 217.924 li
177.173 217.445 li
178.237 225.101 li
179.301 228.995 li
180.365 225.052 li
181.429 225.379 li
182.493 222.523 li
183.557 226.464 li
184.621 232.009 li
185.685 225.843 li
186.749 217.494 li
187.813 232.131 li
188.877 238.218 li
189.941 233.88 li
191.005 233.688 li
192.069 237.675 li
193.134 234.895 li
194.198 224.234 li
195.262 210.538 li
196.326 233.361 li
197.39 212.848 li
198.454 199.971 li
199.518 212.795 li
200.582 204.712 li
201.646 203.177 li
202.71 200.198 li
203.774 212.534 li
204.838 214.267 li
205.902 207.79 li
206.966 203.148 li
208.031 199.423 li
209.095 212.482 li
210.159 199.566 li
211.223 209.642 li
212.287 201.032 li
213.351 196.794 li
214.415 187.725 li
215.479 200.001 li
216.543 199.971 li
217.607 184.14 li
218.671 170.37 li
219.735 169.761 li
220.799 175.987 li
221.863 170.678 li
222.927 168.195 li
223.992 178.475 li
225.056 174.682 li
226.12 162.807 li
227.184 167.429 li
228.248 188.054 li
229.312 190.892 li
230.376 187.548 li
231.44 178.75 li
232.504 194.338 li
233.568 181.79 li
234.632 165.937 li
235.696 181.79 li
236.76 177.783 li
237.824 167.456 li
238.888 172.417 li
239.953 168.33 li
241.017 174.328 li
242.081 147.749 li
243.145 131.294 li
244.209 136.558 li
245.273 129.061 li
246.337 119.915 li
247.401 139.685 li
248.465 143.486 li
249.529 139.494 li
250.593 130.176 li
251.657 126.198 li
252.721 136.249 li
254.85 121.072 li
255.914 122.11 li
258.042 141.863 li
259.106 141.753 li
260.17 134.419 li
261.234 113.709 li
262.298 129.009 li
263.362 119.283 li
264.426 133.494 li
265.49 126.404 li
266.554 121.279 li
267.618 121.458 li
268.682 107.155 li
269.746 115.294 li
270.811 124.439 li
271.875 123.846 li
272.939 117.403 li
274.003 106.519 li
275.067 118.16 li
276.131 122.509 li
277.195 107.394 li
278.259 107.352 li
279.323 114.818 li
280.387 98.2036 li
281.451 117.476 li
282.515 109.6 li
283.579 114.845 li
284.643 126.323 li
285.708 131.857 li
286.772 131.859 li
287.836 125.801 li
288.9 130.925 li
289.964 128.744 li
291.028 137.726 li
292.092 114.703 li
293.156 109.175 li
294.22 124.33 li
295.284 115.084 li
296.348 118.721 li
297.412 111.324 li
298.476 121.6 li
299.54 126.364 li
300.604 124.723 li
301.669 114.432 li
302.733 109.823 li
303.797 101.297 li
304.861 121.68 li
305.925 108.504 li
306.989 112.435 li
308.053 126.546 li
309.117 112.32 li
310.181 120.215 li
311.245 122.519 li
312.309 129.83 li
313.373 142.202 li
314.437 144.867 li
315.501 132.547 li
316.566 125.91 li
317.63 116.62 li
318.694 133.776 li
319.758 100.43 li
320.822 115.283 li
321.886 118.058 li
322.95 124.784 li
324.014 149.417 li
325.078 147.977 li
326.142 165.861 li
327.206 146.025 li
328.27 159.914 li
329.334 156.082 li
330.398 155.034 li
333.591 124.987 li
334.655 112.607 li
335.719 131.977 li
336.783 139.963 li
337.847 126.225 li
338.911 130.241 li
339.975 147.076 li
341.039 134.78 li
342.103 127.42 li
343.167 140.313 li
344.231 142.7 li
345.295 136.073 li
346.359 130.207 li
347.423 130.45 li
348.488 135.854 li
349.552 137.153 li
350.616 145.865 li
351.68 132.351 li
352.744 142.849 li
353.808 140.451 li
354.872 140.778 li
355.936 123.2 li
357 125.935 li
358.064 109.42 li
359.128 117.49 li
360.192 134.05 li
361.256 127.345 li
362.32 121.778 li
363.385 134.351 li
364.449 155.858 li
365.513 163.453 li
366.577 176.262 li
367.641 165.185 li
368.705 176.201 li
369.769 184.038 li
371.897 146.108 li
372.961 134.285 li
374.025 130.056 li
375.089 129.534 li
376.153 128.779 li
377.217 138.134 li
378.281 138.252 li
379.346 142.202 li
380.41 145.079 li
381.474 161.628 li
382.538 146.814 li
383.602 166.708 li
384.666 168.3 li
385.73 142.297 li
386.794 156.518 li
387.858 139.91 li
388.922 161.596 li
389.986 171.661 li
391.05 163.384 li
392.114 166.102 li
393.178 173.496 li
394.243 158.984 li
395.307 163.173 li
396.371 151.494 li
397.435 180.21 li
398.499 171.414 li
399.563 166.272 li
401.691 157.009 li
402.755 154.468 li
403.819 157.862 li
404.883 158.175 li
405.947 154.303 li
407.011 162.811 li
408.075 155.696 li
409.139 150.982 li
410.204 165.193 li
411.268 162.399 li
412.332 157.065 li
413.396 164.754 li
414.46 164.133 li
415.524 164.824 li
416.588 168.33 li
417.652 179.032 li
418.716 175.373 li
419.78 171.124 li
420.844 186.301 li
421.908 174.665 li
422.972 169.914 li
424.036 172.289 li
425.101 160.493 li
426.165 165.889 li
427.229 163.58 li
428.293 181.835 li
429.357 181.84 li
430.421 176.248 li
431.485 176.404 li
432.549 171.773 li
434.677 184.753 li
435.741 187.403 li
436.805 182.834 li
437.869 181.45 li
438.933 183.042 li
439.997 176.054 li
441.062 177.328 li
442.126 176.747 li
443.19 183.566 li
444.254 182.217 li
446.382 178.635 li
447.446 172.302 li
448.51 174.567 li
449.574 188.916 li
450.638 176.271 li
451.702 183.289 li
452.766 174.665 li
453.83 175.011 li
454.894 179.23 li
455.959 174.438 li
457.023 175.477 li
458.087 182.971 li
459.151 187.722 li
460.215 186.879 li
461.279 189.63 li
462.343 188.916 li
463.407 193.821 li
464.471 185.075 li
465.535 172.941 li
466.599 185.884 li
467.663 186.755 li
468.727 186.883 li
469.791 185.622 li
470.855 192.792 li
471.92 190.256 li
472.984 183.809 li
474.048 193.622 li
475.112 192.577 li
476.176 198.739 li
477.24 200.821 li
478.304 208.121 li
479.368 219.003 li
480.432 210.294 li
481.496 214.422 li
482.56 224.618 li
483.624 209.274 li
484.688 202.299 li
485.752 200.494 li
486.816 202.719 li
487.881 207.518 li
488.945 206.028 li
490.009 216.005 li
491.073 210.375 li
492.137 217.358 li
493.201 226.883 li
494.265 227.93 li
495.329 223.116 li
496.393 228.504 li
497.457 230.879 li
498.521 216.134 li
499.585 222.915 li
501.713 242.756 li
502.778 227.648 li
503.842 228.504 li
504.906 230.97 li
505.97 241.9 li
508.098 243.738 li
509.162 255.339 li
510.226 259.383 li
511.29 266.225 li
512.354 259.555 li
513.418 247.435 li
514.482 249.244 li
515.546 244.061 li
516.61 252.698 li
517.674 251.363 li
518.739 262.656 li
519.803 259.867 li
520.867 257.803 li
521.931 252.248 li
522.995 256.216 li
524.059 257.557 li
525.123 255.697 li
526.187 261.605 li
527.251 260.857 li
529.379 270.467 li
530.443 266.826 li
531.507 263.786 li
532.571 267.831 li
533.636 281.96 li
534.7 289.41 li
536.828 275.019 li
537.892 281.245 li
538.956 277.164 li
540.02 279.44 li
541.084 283.135 li
542.148 288.203 li
543.212 290.65 li
544.276 284.926 li
.926818 .245335 1 .155612 cmyk
@
127.161 341.485 mo
128.225 345.684 li
129.289 314.348 li
130.353 325.37 li
131.418 316.229 li
132.482 323.778 li
133.546 310.605 li
134.61 308.527 li
135.674 327.147 li
136.738 319.609 li
137.802 310.847 li
138.866 303.926 li
139.93 305.869 li
140.994 296.217 li
142.058 312.857 li
143.122 300.237 li
144.186 297.258 li
145.25 289.278 li
146.315 279.749 li
147.379 283.422 li
148.443 274.654 li
149.507 282.502 li
150.571 293.929 li
151.635 283.889 li
152.699 290.822 li
153.763 301.544 li
154.827 300.628 li
155.891 271.39 li
156.955 273.995 li
158.019 272.733 li
159.083 279.809 li
161.211 261.758 li
162.276 271.582 li
163.34 250.608 li
164.404 263.913 li
165.468 241.225 li
166.532 253.863 li
167.596 254.526 li
168.66 247.103 li
169.724 241.287 li
170.788 248.342 li
171.852 260.602 li
172.916 236.422 li
173.98 235.166 li
175.044 244.063 li
176.108 231.645 li
177.173 251.377 li
178.237 249.116 li
179.301 241.639 li
180.365 259.778 li
181.429 257.352 li
182.493 254.544 li
183.557 236.421 li
184.621 258.797 li
185.685 257.045 li
186.749 260.774 li
187.813 245.426 li
188.877 242.231 li
189.941 242.012 li
191.005 252.676 li
192.069 242.539 li
193.134 239.137 li
194.198 241.63 li
195.262 233.274 li
196.326 215.947 li
197.39 211.697 li
198.454 231.723 li
199.518 223.39 li
200.582 232.45 li
201.646 239.706 li
202.71 236.584 li
203.774 223.409 li
204.838 229.539 li
205.902 227.181 li
206.966 233.255 li
208.031 202.09 li
209.095 220.407 li
210.159 207.967 li
211.223 199.426 li
212.287 186.321 li
213.351 192.536 li
214.415 177.035 li
215.479 190.601 li
216.543 175.652 li
217.607 177.314 li
218.671 182.78 li
219.735 182.18 li
220.799 180.97 li
221.863 187.714 li
222.927 180.964 li
225.056 191.08 li
226.12 187.359 li
227.184 184.166 li
228.248 171.997 li
229.312 181.113 li
230.376 168.88 li
231.44 191.291 li
232.504 177.318 li
233.568 184.338 li
234.632 190.5 li
235.696 188.829 li
236.76 187.898 li
237.824 178.274 li
238.888 160.413 li
239.953 158.829 li
241.017 168.583 li
242.081 168.833 li
243.145 162.445 li
244.209 174.378 li
245.273 188.604 li
246.337 168.33 li
247.401 158.333 li
248.465 166.106 li
249.529 169.643 li
250.593 156.191 li
251.657 161.462 li
252.721 164.527 li
253.785 157.791 li
254.85 153.15 li
255.914 154.207 li
256.978 158.829 li
258.042 152.764 li
259.106 156.992 li
260.17 171.492 li
261.234 145.635 li
263.362 158.106 li
264.426 157.768 li
265.49 149.891 li
266.554 140.495 li
267.618 147.514 li
268.682 142.748 li
269.746 146.685 li
270.811 151.704 li
271.875 153.019 li
272.939 166.037 li
274.003 150.414 li
275.067 154.251 li
276.131 151.947 li
277.195 153.287 li
278.259 144.735 li
279.323 154.276 li
280.387 152.948 li
281.451 161.205 li
282.515 178.411 li
283.579 166.705 li
284.643 163.432 li
285.708 170.869 li
286.772 170.706 li
287.836 175.158 li
288.9 164.518 li
289.964 170.111 li
291.028 167.373 li
292.092 177.04 li
293.156 188.322 li
295.284 163.608 li
296.348 186.541 li
297.412 180.89 li
298.476 179.444 li
299.54 185.316 li
300.604 182.964 li
301.669 181.585 li
302.733 188.724 li
303.797 183.631 li
304.861 163.241 li
305.925 157.706 li
306.989 152.977 li
308.053 150.188 li
309.117 148.946 li
310.181 139.035 li
311.245 154.188 li
312.309 140.825 li
313.373 140.286 li
314.437 147.843 li
315.501 152.166 li
316.566 168.18 li
317.63 158.256 li
318.694 158.038 li
319.758 154.564 li
320.822 163.396 li
321.886 147.439 li
322.95 161.518 li
324.014 161.451 li
325.078 176.002 li
326.142 150.587 li
327.206 160.503 li
328.27 156.91 li
329.334 151.451 li
330.398 157.156 li
331.462 151.892 li
332.527 148.758 li
333.591 155.866 li
334.655 141.21 li
0 1 1 0 cmyk
@
0 lj
122.905 25.0222 mo
548.532 25.0222 li
1 /0 /CSD get_res sepcs
1 sep
@
548.532 374.751 mo
548.532 25.0222 li
@
122.905 374.751 mo
548.532 374.751 li
@
122.905 374.751 mo
122.905 25.0222 li
@
122.905 374.751 mo
122.905 370.751 li
f
.5 lw
0 lc
1 lj
122.905 374.751 mo
122.905 370.751 li
@
122.905 25.0222 mo
122.905 29.0222 li
f
122.905 25.0222 mo
122.905 29.0222 li
@
121.405 389.579 mo
123.981 389.579 li
123.981 380.684 li
121.181 381.243 li
121.181 379.803 li
123.965 379.243 li
125.549 379.243 li
125.549 389.579 li
128.125 389.579 li
128.125 390.908 li
121.405 390.908 li
121.405 389.579 li
f
134.685 380.284 mo
133.869 380.284 133.261 380.684 132.845 381.483 cv
132.429 382.284 132.237 383.483 132.237 385.083 cv
132.237 386.684 132.429 387.884 132.845 388.684 cv
133.261 389.483 133.869 389.884 134.685 389.884 cv
135.501 389.884 136.109 389.483 136.525 388.684 cv
136.925 387.884 137.133 386.684 137.133 385.083 cv
137.133 383.483 136.925 382.284 136.525 381.483 cv
136.109 380.684 135.501 380.284 134.685 380.284 cv
134.685 379.035 mo
135.981 379.035 136.973 379.564 137.677 380.587 cv
138.365 381.628 138.717 383.132 138.717 385.083 cv
138.717 387.052 138.365 388.556 137.677 389.579 cv
136.973 390.604 135.981 391.116 134.685 391.116 cv
133.373 391.116 132.365 390.604 131.677 389.579 cv
130.989 388.556 130.653 387.052 130.653 385.083 cv
130.653 383.132 130.989 381.628 131.677 380.587 cv
132.365 379.564 133.373 379.035 134.685 379.035 cv
f
107.71 385.228 mo
117.726 385.228 li
117.726 386.556 li
107.71 386.556 li
107.71 385.228 li
f
229.312 374.751 mo
229.312 370.751 li
f
229.312 374.751 mo
229.312 370.751 li
@
229.312 25.0222 mo
229.312 29.0222 li
f
229.312 25.0222 mo
229.312 29.0222 li
@
232.649 379.243 mo
238.841 379.243 li
238.841 380.572 li
234.089 380.572 li
234.089 383.435 li
234.313 383.355 234.553 383.292 234.777 383.259 cv
235.001 383.228 235.241 383.195 235.465 383.195 cv
236.761 383.195 237.785 383.564 238.553 384.267 cv
239.321 384.987 239.705 385.948 239.705 387.164 cv
239.705 388.427 239.305 389.404 238.521 390.091 cv
237.737 390.78 236.633 391.116 235.225 391.116 cv
234.729 391.116 234.233 391.068 233.721 391.004 cv
233.209 390.923 232.697 390.811 232.153 390.635 cv
232.153 389.052 li
232.617 389.307 233.097 389.5 233.609 389.628 cv
234.105 389.755 234.633 389.803 235.193 389.803 cv
236.089 389.803 236.809 389.579 237.337 389.099 cv
237.849 388.62 238.121 387.979 238.121 387.164 cv
238.121 386.363 237.849 385.724 237.337 385.243 cv
236.809 384.763 236.089 384.523 235.193 384.523 cv
234.777 384.523 234.345 384.572 233.929 384.668 cv
233.513 384.763 233.081 384.908 232.649 385.099 cv
232.649 379.243 li
f
219.211 385.228 mo
229.227 385.228 li
229.227 386.556 li
219.211 386.556 li
219.211 385.228 li
f
335.719 374.751 mo
335.719 370.751 li
f
335.719 374.751 mo
335.719 370.751 li
@
335.719 25.0222 mo
335.719 29.0222 li
f
335.719 25.0222 mo
335.719 29.0222 li
@
335.713 380.284 mo
334.897 380.284 334.289 380.684 333.873 381.483 cv
333.457 382.284 333.265 383.483 333.265 385.083 cv
333.265 386.684 333.457 387.884 333.873 388.684 cv
334.289 389.483 334.897 389.884 335.713 389.884 cv
336.529 389.884 337.137 389.483 337.553 388.684 cv
337.953 387.884 338.161 386.684 338.161 385.083 cv
338.161 383.483 337.953 382.284 337.553 381.483 cv
337.137 380.684 336.529 380.284 335.713 380.284 cv
335.713 379.035 mo
337.009 379.035 338.001 379.564 338.705 380.587 cv
339.393 381.628 339.745 383.132 339.745 385.083 cv
339.745 387.052 339.393 388.556 338.705 389.579 cv
338.001 390.604 337.009 391.116 335.713 391.116 cv
334.401 391.116 333.393 390.604 332.705 389.579 cv
332.017 388.556 331.681 387.052 331.681 385.083 cv
331.681 383.132 332.017 381.628 332.705 380.587 cv
333.393 379.564 334.401 379.035 335.713 379.035 cv
f
442.126 374.751 mo
442.126 370.751 li
f
442.126 374.751 mo
442.126 370.751 li
@
442.126 25.0222 mo
442.126 29.0222 li
f
442.126 25.0222 mo
442.126 29.0222 li
@
438.76 379.243 mo
444.952 379.243 li
444.952 380.572 li
440.2 380.572 li
440.2 383.435 li
440.424 383.355 440.664 383.292 440.888 383.259 cv
441.112 383.228 441.352 383.195 441.576 383.195 cv
442.872 383.195 443.896 383.564 444.664 384.267 cv
445.432 384.987 445.816 385.948 445.816 387.164 cv
445.816 388.427 445.416 389.404 444.632 390.091 cv
443.848 390.78 442.744 391.116 441.336 391.116 cv
440.84 391.116 440.344 391.068 439.832 391.004 cv
439.32 390.923 438.808 390.811 438.264 390.635 cv
438.264 389.052 li
438.728 389.307 439.208 389.5 439.72 389.628 cv
440.216 389.755 440.744 389.803 441.304 389.803 cv
442.2 389.803 442.92 389.579 443.448 389.099 cv
443.96 388.62 444.232 387.979 444.232 387.164 cv
444.232 386.363 443.96 385.724 443.448 385.243 cv
442.92 384.763 442.2 384.523 441.304 384.523 cv
440.888 384.523 440.456 384.572 440.04 384.668 cv
439.624 384.763 439.192 384.908 438.76 385.099 cv
438.76 379.243 li
f
548.532 374.751 mo
548.532 370.751 li
f
548.532 374.751 mo
548.532 370.751 li
@
548.532 25.0222 mo
548.532 29.0222 li
f
548.532 25.0222 mo
548.532 29.0222 li
@
540.329 389.579 mo
542.905 389.579 li
542.905 380.684 li
540.105 381.243 li
540.105 379.803 li
542.889 379.243 li
544.473 379.243 li
544.473 389.579 li
547.049 389.579 li
547.049 390.908 li
540.329 390.908 li
540.329 389.579 li
f
553.609 380.284 mo
552.793 380.284 552.185 380.684 551.769 381.483 cv
551.353 382.284 551.161 383.483 551.161 385.083 cv
551.161 386.684 551.353 387.884 551.769 388.684 cv
552.185 389.483 552.793 389.884 553.609 389.884 cv
554.425 389.884 555.033 389.483 555.449 388.684 cv
555.849 387.884 556.057 386.684 556.057 385.083 cv
556.057 383.483 555.849 382.284 555.449 381.483 cv
555.033 380.684 554.425 380.284 553.609 380.284 cv
553.609 379.035 mo
554.905 379.035 555.897 379.564 556.601 380.587 cv
557.289 381.628 557.641 383.132 557.641 385.083 cv
557.641 387.052 557.289 388.556 556.601 389.579 cv
555.897 390.604 554.905 391.116 553.609 391.116 cv
552.297 391.116 551.289 390.604 550.601 389.579 cv
549.913 388.556 549.577 387.052 549.577 385.083 cv
549.577 383.132 549.913 381.628 550.601 380.587 cv
551.289 379.564 552.297 379.035 553.609 379.035 cv
f
269.06 399.728 mo
271.412 399.728 li
274.388 407.664 li
277.38 399.728 li
279.732 399.728 li
279.732 411.392 li
278.196 411.392 li
278.196 401.152 li
275.188 409.152 li
273.604 409.152 li
270.596 401.152 li
270.596 411.392 li
269.06 411.392 li
269.06 399.728 li
f
286.788 406.992 mo
285.62 406.992 284.82 407.136 284.372 407.392 cv
283.924 407.664 283.7 408.112 283.7 408.752 cv
283.7 409.264 283.86 409.68 284.196 409.968 cv
284.532 410.272 284.996 410.416 285.572 410.416 cv
286.372 410.416 287.012 410.144 287.492 409.568 cv
287.972 409.008 288.212 408.256 288.212 407.312 cv
288.212 406.992 li
286.788 406.992 li
289.652 406.4 mo
289.652 411.392 li
288.212 411.392 li
288.212 410.064 li
287.876 410.608 287.46 410.992 286.98 411.232 cv
286.5 411.472 285.892 411.6 285.188 411.6 cv
284.292 411.6 283.572 411.36 283.044 410.864 cv
282.516 410.368 282.26 409.696 282.26 408.848 cv
282.26 407.872 282.58 407.136 283.252 406.624 cv
283.908 406.128 284.884 405.872 286.196 405.872 cv
288.212 405.872 li
288.212 405.728 li
288.212 405.072 287.988 404.56 287.556 404.192 cv
287.124 403.84 286.516 403.648 285.732 403.648 cv
285.22 403.648 284.74 403.712 284.26 403.84 cv
283.78 403.968 283.332 404.144 282.9 404.368 cv
282.9 403.04 li
283.412 402.848 283.924 402.688 284.42 402.592 cv
284.916 402.496 285.396 402.432 285.876 402.432 cv
287.14 402.432 288.084 402.768 288.708 403.424 cv
289.332 404.08 289.652 405.072 289.652 406.4 cv
f
298.372 406.912 mo
298.372 405.888 298.148 405.072 297.732 404.496 cv
297.3 403.92 296.692 403.632 295.924 403.632 cv
295.156 403.632 294.548 403.92 294.116 404.496 cv
293.684 405.072 293.476 405.888 293.476 406.912 cv
293.476 407.952 293.684 408.752 294.116 409.328 cv
294.548 409.904 295.156 410.192 295.924 410.192 cv
296.692 410.192 297.3 409.904 297.732 409.328 cv
298.148 408.752 298.372 407.952 298.372 406.912 cv
299.812 410.304 mo
299.812 411.776 299.476 412.88 298.82 413.616 cv
298.148 414.336 297.14 414.704 295.78 414.704 cv
295.268 414.704 294.804 414.656 294.356 414.592 cv
293.908 414.512 293.46 414.4 293.044 414.24 cv
293.044 412.848 li
293.46 413.072 293.876 413.232 294.292 413.344 cv
294.708 413.456 295.124 413.52 295.556 413.52 cv
296.484 413.52 297.188 413.264 297.668 412.784 cv
298.132 412.288 298.372 411.552 298.372 410.56 cv
298.372 409.856 li
298.068 410.368 297.684 410.752 297.22 411.008 cv
296.756 411.264 296.212 411.392 295.572 411.392 cv
294.484 411.392 293.62 410.992 292.964 410.176 cv
292.308 409.36 291.988 408.272 291.988 406.912 cv
291.988 405.568 292.308 404.48 292.964 403.664 cv
293.62 402.848 294.484 402.432 295.572 402.432 cv
296.212 402.432 296.756 402.56 297.22 402.816 cv
297.684 403.072 298.068 403.456 298.372 403.968 cv
298.372 402.64 li
299.812 402.64 li
299.812 410.304 li
f
310.052 406.112 mo
310.052 411.392 li
308.612 411.392 li
308.612 406.16 li
308.612 405.328 308.436 404.72 308.116 404.304 cv
307.796 403.888 307.316 403.68 306.676 403.68 cv
305.892 403.68 305.284 403.936 304.836 404.432 cv
304.388 404.928 304.164 405.6 304.164 406.448 cv
304.164 411.392 li
302.724 411.392 li
302.724 402.64 li
304.164 402.64 li
304.164 404 li
304.5 403.488 304.9 403.088 305.38 402.832 cv
305.844 402.576 306.388 402.432 306.996 402.432 cv
307.988 402.432 308.756 402.752 309.268 403.376 cv
309.78 404 310.052 404.912 310.052 406.112 cv
f
320.404 406.656 mo
320.404 407.36 li
313.796 407.36 li
313.86 408.352 314.148 409.12 314.692 409.632 cv
315.22 410.144 315.956 410.4 316.916 410.4 cv
317.46 410.4 318.004 410.336 318.516 410.208 cv
319.028 410.08 319.556 409.872 320.068 409.584 cv
320.068 410.944 li
319.556 411.168 319.028 411.344 318.484 411.44 cv
317.94 411.536 317.38 411.6 316.836 411.6 cv
315.428 411.6 314.324 411.2 313.508 410.4 cv
312.692 409.6 312.292 408.496 312.292 407.104 cv
312.292 405.68 312.676 404.544 313.444 403.696 cv
314.212 402.864 315.268 402.432 316.58 402.432 cv
317.764 402.432 318.692 402.816 319.38 403.568 cv
320.052 404.336 320.404 405.36 320.404 406.656 cv
318.964 406.24 mo
318.948 405.456 318.724 404.832 318.308 404.352 cv
317.876 403.888 317.3 403.648 316.596 403.648 cv
315.796 403.648 315.156 403.888 314.676 404.336 cv
314.196 404.784 313.908 405.424 313.844 406.24 cv
318.964 406.24 li
f
324.18 400.16 mo
324.18 402.64 li
327.14 402.64 li
327.14 403.76 li
324.18 403.76 li
324.18 408.512 li
324.18 409.232 324.276 409.696 324.468 409.888 cv
324.66 410.096 325.06 410.192 325.668 410.192 cv
327.14 410.192 li
327.14 411.392 li
325.668 411.392 li
324.548 411.392 323.78 411.184 323.364 410.768 cv
322.948 410.352 322.74 409.6 322.74 408.512 cv
322.74 403.76 li
321.684 403.76 li
321.684 402.64 li
322.74 402.64 li
322.74 400.16 li
324.18 400.16 li
f
329.028 402.64 mo
330.468 402.64 li
330.468 411.392 li
329.028 411.392 li
329.028 402.64 li
329.028 399.232 mo
330.468 399.232 li
330.468 401.056 li
329.028 401.056 li
329.028 399.232 li
f
339.78 402.976 mo
339.78 404.32 li
339.364 404.096 338.964 403.936 338.548 403.824 cv
338.132 403.712 337.732 403.648 337.316 403.648 cv
336.388 403.648 335.652 403.952 335.14 404.544 cv
334.628 405.136 334.372 405.968 334.372 407.024 cv
334.372 408.096 334.628 408.928 335.14 409.52 cv
335.652 410.112 336.388 410.4 337.316 410.4 cv
337.732 410.4 338.132 410.352 338.548 410.24 cv
338.964 410.128 339.364 409.952 339.78 409.728 cv
339.78 411.056 li
339.364 411.248 338.948 411.392 338.532 411.472 cv
338.1 411.552 337.636 411.6 337.156 411.6 cv
335.844 411.6 334.788 411.2 334.02 410.368 cv
333.236 409.552 332.852 408.432 332.852 407.024 cv
332.852 405.6 333.236 404.48 334.02 403.664 cv
334.804 402.848 335.876 402.432 337.252 402.432 cv
337.7 402.432 338.132 402.48 338.548 402.576 cv
338.964 402.672 339.38 402.8 339.78 402.976 cv
f
347.428 399.728 mo
354.132 399.728 li
354.132 401.056 li
349.012 401.056 li
349.012 404.496 li
353.636 404.496 li
353.636 405.824 li
349.012 405.824 li
349.012 411.392 li
347.428 411.392 li
347.428 399.728 li
f
356.564 402.64 mo
358.004 402.64 li
358.004 411.392 li
356.564 411.392 li
356.564 402.64 li
356.564 399.232 mo
358.004 399.232 li
358.004 401.056 li
356.564 401.056 li
356.564 399.232 li
f
368.5 406.656 mo
368.5 407.36 li
361.892 407.36 li
361.956 408.352 362.244 409.12 362.788 409.632 cv
363.316 410.144 364.052 410.4 365.012 410.4 cv
365.556 410.4 366.1 410.336 366.612 410.208 cv
367.124 410.08 367.652 409.872 368.164 409.584 cv
368.164 410.944 li
367.652 411.168 367.124 411.344 366.58 411.44 cv
366.036 411.536 365.476 411.6 364.932 411.6 cv
363.524 411.6 362.42 411.2 361.604 410.4 cv
360.788 409.6 360.388 408.496 360.388 407.104 cv
360.388 405.68 360.772 404.544 361.54 403.696 cv
362.308 402.864 363.364 402.432 364.676 402.432 cv
365.86 402.432 366.788 402.816 367.476 403.568 cv
368.148 404.336 368.5 405.36 368.5 406.656 cv
367.06 406.24 mo
367.044 405.456 366.82 404.832 366.404 404.352 cv
365.972 403.888 365.396 403.648 364.692 403.648 cv
363.892 403.648 363.252 403.888 362.772 404.336 cv
362.292 404.784 362.004 405.424 361.94 406.24 cv
367.06 406.24 li
f
370.852 399.232 mo
372.292 399.232 li
372.292 411.392 li
370.852 411.392 li
370.852 399.232 li
f
381.06 403.968 mo
381.06 399.232 li
382.5 399.232 li
382.5 411.392 li
381.06 411.392 li
381.06 410.08 li
380.756 410.608 380.372 410.992 379.908 411.232 cv
379.444 411.472 378.9 411.6 378.26 411.6 cv
377.204 411.6 376.34 411.184 375.668 410.352 cv
374.996 409.52 374.676 408.4 374.676 407.024 cv
374.676 405.648 374.996 404.544 375.668 403.696 cv
376.34 402.864 377.204 402.432 378.26 402.432 cv
378.9 402.432 379.444 402.56 379.908 402.816 cv
380.372 403.072 380.756 403.456 381.06 403.968 cv
376.164 407.024 mo
376.164 408.08 376.372 408.912 376.804 409.52 cv
377.236 410.128 377.844 410.416 378.612 410.416 cv
379.364 410.416 379.956 410.128 380.404 409.52 cv
380.836 408.912 381.06 408.08 381.06 407.024 cv
381.06 405.968 380.836 405.152 380.404 404.544 cv
379.956 403.936 379.364 403.632 378.612 403.632 cv
377.844 403.632 377.236 403.936 376.804 404.544 cv
376.372 405.152 376.164 405.968 376.164 407.024 cv
f
385.828 409.408 mo
387.476 409.408 li
387.476 410.752 li
386.196 413.232 li
385.188 413.232 li
385.828 410.752 li
385.828 409.408 li
f
394.1 399.728 mo
403.956 399.728 li
403.956 401.056 li
399.812 401.056 li
399.812 411.392 li
398.228 411.392 li
398.228 401.056 li
394.1 401.056 li
394.1 399.728 li
f
122.905 374.751 mo
126.905 374.751 li
f
122.905 374.751 mo
126.905 374.751 li
@
548.532 374.751 mo
544.532 374.751 li
f
548.532 374.751 mo
544.532 374.751 li
@
57.7743 368.541 mo
56.9582 368.541 56.3503 368.941 55.9342 369.741 cv
55.5182 370.541 55.3262 371.741 55.3262 373.341 cv
55.3262 374.941 55.5182 376.141 55.9342 376.941 cv
56.3503 377.741 56.9582 378.141 57.7743 378.141 cv
58.5902 378.141 59.1982 377.741 59.6143 376.941 cv
60.0142 376.141 60.2222 374.941 60.2222 373.341 cv
60.2222 371.741 60.0142 370.541 59.6143 369.741 cv
59.1982 368.941 58.5902 368.541 57.7743 368.541 cv
57.7743 367.293 mo
59.0702 367.293 60.0622 367.821 60.7663 368.845 cv
61.4543 369.885 61.8063 371.389 61.8063 373.341 cv
61.8063 375.309 61.4543 376.813 60.7663 377.837 cv
60.0622 378.861 59.0702 379.373 57.7743 379.373 cv
56.4622 379.373 55.4543 378.861 54.7663 377.837 cv
54.0782 376.813 53.7422 375.309 53.7422 373.341 cv
53.7422 371.389 54.0782 369.885 54.7663 368.845 cv
55.4543 367.821 56.4622 367.293 57.7743 367.293 cv
f
64.5743 377.181 mo
66.2223 377.181 li
66.2223 379.165 li
64.5743 379.165 li
64.5743 377.181 li
f
73.0382 368.541 mo
72.2222 368.541 71.6142 368.941 71.1982 369.741 cv
70.7822 370.541 70.5902 371.741 70.5902 373.341 cv
70.5902 374.941 70.7822 376.141 71.1982 376.941 cv
71.6142 377.741 72.2222 378.141 73.0382 378.141 cv
73.8542 378.141 74.4622 377.741 74.8782 376.941 cv
75.2782 376.141 75.4862 374.941 75.4862 373.341 cv
75.4862 371.741 75.2782 370.541 74.8782 369.741 cv
74.4622 368.941 73.8542 368.541 73.0382 368.541 cv
73.0382 367.293 mo
74.3342 367.293 75.3262 367.821 76.0302 368.845 cv
76.7182 369.885 77.0702 371.389 77.0702 373.341 cv
77.0702 375.309 76.7182 376.813 76.0302 377.837 cv
75.3262 378.861 74.3342 379.373 73.0382 379.373 cv
71.7262 379.373 70.7182 378.861 70.0302 377.837 cv
69.3422 376.813 69.0062 375.309 69.0062 373.341 cv
69.0062 371.389 69.3422 369.885 70.0302 368.845 cv
70.7182 367.821 71.7262 367.293 73.0382 367.293 cv
f
83.2142 368.541 mo
82.3982 368.541 81.7902 368.941 81.3742 369.741 cv
80.9582 370.541 80.7662 371.741 80.7662 373.341 cv
80.7662 374.941 80.9582 376.141 81.3742 376.941 cv
81.7902 377.741 82.3982 378.141 83.2142 378.141 cv
84.0302 378.141 84.6382 377.741 85.0542 376.941 cv
85.4542 376.141 85.6622 374.941 85.6622 373.341 cv
85.6622 371.741 85.4542 370.541 85.0542 369.741 cv
84.6382 368.941 84.0302 368.541 83.2142 368.541 cv
83.2142 367.293 mo
84.5102 367.293 85.5022 367.821 86.2062 368.845 cv
86.8942 369.885 87.2462 371.389 87.2462 373.341 cv
87.2462 375.309 86.8942 376.813 86.2062 377.837 cv
85.5022 378.861 84.5102 379.373 83.2142 379.373 cv
81.9022 379.373 80.8942 378.861 80.2062 377.837 cv
79.5182 376.813 79.1822 375.309 79.1822 373.341 cv
79.1822 371.389 79.5182 369.885 80.2062 368.845 cv
80.8942 367.821 81.9022 367.293 83.2142 367.293 cv
f
93.3902 368.541 mo
92.5742 368.541 91.9662 368.941 91.5502 369.741 cv
91.1342 370.541 90.9422 371.741 90.9422 373.341 cv
90.9422 374.941 91.1342 376.141 91.5502 376.941 cv
91.9662 377.741 92.5742 378.141 93.3902 378.141 cv
94.2062 378.141 94.8142 377.741 95.2302 376.941 cv
95.6302 376.141 95.8382 374.941 95.8382 373.341 cv
95.8382 371.741 95.6302 370.541 95.2302 369.741 cv
94.8142 368.941 94.2062 368.541 93.3902 368.541 cv
93.3902 367.293 mo
94.6862 367.293 95.6782 367.821 96.3822 368.845 cv
97.0702 369.885 97.4222 371.389 97.4222 373.341 cv
97.4222 375.309 97.0702 376.813 96.3822 377.837 cv
95.6782 378.861 94.6862 379.373 93.3902 379.373 cv
92.0782 379.373 91.0702 378.861 90.3822 377.837 cv
89.6942 376.813 89.3582 375.309 89.3582 373.341 cv
89.3582 371.389 89.6942 369.885 90.3822 368.845 cv
91.0702 367.821 92.0782 367.293 93.3902 367.293 cv
f
104.974 372.877 mo
105.726 373.037 106.318 373.373 106.734 373.885 cv
107.15 374.397 107.374 375.037 107.374 375.773 cv
107.374 376.925 106.974 377.821 106.19 378.445 cv
105.39 379.069 104.27 379.373 102.814 379.373 cv
102.318 379.373 101.806 379.325 101.294 379.229 cv
100.782 379.149 100.238 379.005 99.6942 378.813 cv
99.6942 377.293 li
100.126 377.549 100.606 377.741 101.134 377.869 cv
101.646 377.997 102.19 378.061 102.766 378.061 cv
103.758 378.061 104.51 377.869 105.022 377.485 cv
105.534 377.101 105.806 376.525 105.806 375.773 cv
105.806 375.101 105.566 374.557 105.086 374.173 cv
104.606 373.789 103.934 373.581 103.07 373.581 cv
101.71 373.581 li
101.71 372.285 li
103.134 372.285 li
103.902 372.285 104.494 372.141 104.91 371.821 cv
105.326 371.517 105.534 371.069 105.534 370.477 cv
105.534 369.885 105.31 369.421 104.894 369.101 cv
104.462 368.781 103.854 368.621 103.07 368.621 cv
102.638 368.621 102.174 368.669 101.678 368.765 cv
101.182 368.861 100.638 369.005 100.046 369.197 cv
100.046 367.789 li
100.638 367.629 101.198 367.501 101.726 367.421 cv
102.238 367.341 102.734 367.293 103.214 367.293 cv
104.398 367.293 105.342 367.565 106.046 368.109 cv
106.75 368.653 107.102 369.389 107.102 370.317 cv
107.102 370.957 106.91 371.501 106.542 371.949 cv
106.174 372.397 105.646 372.717 104.974 372.877 cv
f
110.382 367.501 mo
116.574 367.501 li
116.574 368.829 li
111.822 368.829 li
111.822 371.693 li
112.046 371.613 112.286 371.549 112.51 371.517 cv
112.734 371.485 112.974 371.453 113.198 371.453 cv
114.494 371.453 115.518 371.821 116.286 372.525 cv
117.054 373.245 117.438 374.205 117.438 375.421 cv
117.438 376.685 117.038 377.661 116.254 378.349 cv
115.47 379.037 114.366 379.373 112.958 379.373 cv
112.462 379.373 111.966 379.325 111.454 379.261 cv
110.942 379.181 110.43 379.069 109.886 378.893 cv
109.886 377.309 li
110.35 377.565 110.83 377.757 111.342 377.885 cv
111.838 378.013 112.366 378.061 112.926 378.061 cv
113.822 378.061 114.542 377.837 115.07 377.357 cv
115.582 376.877 115.854 376.237 115.854 375.421 cv
115.854 374.621 115.582 373.981 115.07 373.501 cv
114.542 373.021 113.822 372.781 112.926 372.781 cv
112.51 372.781 112.078 372.829 111.662 372.925 cv
111.246 373.021 110.814 373.165 110.382 373.357 cv
110.382 367.501 li
f
40.976 373.485 mo
50.992 373.485 li
50.992 374.813 li
40.976 374.813 li
40.976 373.485 li
f
122.905 324.79 mo
126.905 324.79 li
f
122.905 324.79 mo
126.905 324.79 li
@
548.532 324.79 mo
544.532 324.79 li
f
548.532 324.79 mo
544.532 324.79 li
@
57.7743 318.58 mo
56.9582 318.58 56.3503 318.98 55.9342 319.78 cv
55.5182 320.58 55.3262 321.78 55.3262 323.38 cv
55.3262 324.98 55.5182 326.18 55.9342 326.98 cv
56.3503 327.78 56.9582 328.18 57.7743 328.18 cv
58.5902 328.18 59.1982 327.78 59.6143 326.98 cv
60.0142 326.18 60.2222 324.98 60.2222 323.38 cv
60.2222 321.78 60.0142 320.58 59.6143 319.78 cv
59.1982 318.98 58.5902 318.58 57.7743 318.58 cv
57.7743 317.332 mo
59.0702 317.332 60.0622 317.86 60.7663 318.884 cv
61.4543 319.924 61.8063 321.428 61.8063 323.38 cv
61.8063 325.348 61.4543 326.852 60.7663 327.876 cv
60.0622 328.9 59.0702 329.412 57.7743 329.412 cv
56.4622 329.412 55.4543 328.9 54.7663 327.876 cv
54.0782 326.852 53.7422 325.348 53.7422 323.38 cv
53.7422 321.428 54.0782 319.924 54.7663 318.884 cv
55.4543 317.86 56.4622 317.332 57.7743 317.332 cv
f
64.5743 327.22 mo
66.2223 327.22 li
66.2223 329.204 li
64.5743 329.204 li
64.5743 327.22 li
f
73.0382 318.58 mo
72.2222 318.58 71.6142 318.98 71.1982 319.78 cv
70.7822 320.58 70.5902 321.78 70.5902 323.38 cv
70.5902 324.98 70.7822 326.18 71.1982 326.98 cv
71.6142 327.78 72.2222 328.18 73.0382 328.18 cv
73.8542 328.18 74.4622 327.78 74.8782 326.98 cv
75.2782 326.18 75.4862 324.98 75.4862 323.38 cv
75.4862 321.78 75.2782 320.58 74.8782 319.78 cv
74.4622 318.98 73.8542 318.58 73.0382 318.58 cv
73.0382 317.332 mo
74.3342 317.332 75.3262 317.86 76.0302 318.884 cv
76.7182 319.924 77.0702 321.428 77.0702 323.38 cv
77.0702 325.348 76.7182 326.852 76.0302 327.876 cv
75.3262 328.9 74.3342 329.412 73.0382 329.412 cv
71.7262 329.412 70.7182 328.9 70.0302 327.876 cv
69.3422 326.852 69.0062 325.348 69.0062 323.38 cv
69.0062 321.428 69.3422 319.924 70.0302 318.884 cv
70.7182 317.86 71.7262 317.332 73.0382 317.332 cv
f
83.2142 318.58 mo
82.3982 318.58 81.7902 318.98 81.3742 319.78 cv
80.9582 320.58 80.7662 321.78 80.7662 323.38 cv
80.7662 324.98 80.9582 326.18 81.3742 326.98 cv
81.7902 327.78 82.3982 328.18 83.2142 328.18 cv
84.0302 328.18 84.6382 327.78 85.0542 326.98 cv
85.4542 326.18 85.6622 324.98 85.6622 323.38 cv
85.6622 321.78 85.4542 320.58 85.0542 319.78 cv
84.6382 318.98 84.0302 318.58 83.2142 318.58 cv
83.2142 317.332 mo
84.5102 317.332 85.5022 317.86 86.2062 318.884 cv
86.8942 319.924 87.2462 321.428 87.2462 323.38 cv
87.2462 325.348 86.8942 326.852 86.2062 327.876 cv
85.5022 328.9 84.5102 329.412 83.2142 329.412 cv
81.9022 329.412 80.8942 328.9 80.2062 327.876 cv
79.5182 326.852 79.1822 325.348 79.1822 323.38 cv
79.1822 321.428 79.5182 319.924 80.2062 318.884 cv
80.8942 317.86 81.9022 317.332 83.2142 317.332 cv
f
93.3902 318.58 mo
92.5742 318.58 91.9662 318.98 91.5502 319.78 cv
91.1342 320.58 90.9422 321.78 90.9422 323.38 cv
90.9422 324.98 91.1342 326.18 91.5502 326.98 cv
91.9662 327.78 92.5742 328.18 93.3902 328.18 cv
94.2062 328.18 94.8142 327.78 95.2302 326.98 cv
95.6302 326.18 95.8382 324.98 95.8382 323.38 cv
95.8382 321.78 95.6302 320.58 95.2302 319.78 cv
94.8142 318.98 94.2062 318.58 93.3902 318.58 cv
93.3902 317.332 mo
94.6862 317.332 95.6782 317.86 96.3822 318.884 cv
97.0702 319.924 97.4222 321.428 97.4222 323.38 cv
97.4222 325.348 97.0702 326.852 96.3822 327.876 cv
95.6782 328.9 94.6862 329.412 93.3902 329.412 cv
92.0782 329.412 91.0702 328.9 90.3822 327.876 cv
89.6942 326.852 89.3582 325.348 89.3582 323.38 cv
89.3582 321.428 89.6942 319.924 90.3822 318.884 cv
91.0702 317.86 92.0782 317.332 93.3902 317.332 cv
f
104.974 322.916 mo
105.726 323.076 106.318 323.412 106.734 323.924 cv
107.15 324.436 107.374 325.076 107.374 325.812 cv
107.374 326.964 106.974 327.86 106.19 328.484 cv
105.39 329.108 104.27 329.412 102.814 329.412 cv
102.318 329.412 101.806 329.364 101.294 329.268 cv
100.782 329.188 100.238 329.044 99.6942 328.852 cv
99.6942 327.332 li
100.126 327.588 100.606 327.78 101.134 327.908 cv
101.646 328.036 102.19 328.1 102.766 328.1 cv
103.758 328.1 104.51 327.908 105.022 327.524 cv
105.534 327.14 105.806 326.564 105.806 325.812 cv
105.806 325.14 105.566 324.596 105.086 324.212 cv
104.606 323.828 103.934 323.62 103.07 323.62 cv
101.71 323.62 li
101.71 322.324 li
103.134 322.324 li
103.902 322.324 104.494 322.18 104.91 321.86 cv
105.326 321.556 105.534 321.108 105.534 320.516 cv
105.534 319.924 105.31 319.46 104.894 319.14 cv
104.462 318.82 103.854 318.66 103.07 318.66 cv
102.638 318.66 102.174 318.708 101.678 318.804 cv
101.182 318.9 100.638 319.044 100.046 319.236 cv
100.046 317.828 li
100.638 317.668 101.198 317.54 101.726 317.46 cv
102.238 317.38 102.734 317.332 103.214 317.332 cv
104.398 317.332 105.342 317.604 106.046 318.148 cv
106.75 318.692 107.102 319.428 107.102 320.356 cv
107.102 320.996 106.91 321.54 106.542 321.988 cv
106.174 322.436 105.646 322.756 104.974 322.916 cv
f
113.742 318.58 mo
112.926 318.58 112.318 318.98 111.902 319.78 cv
111.486 320.58 111.294 321.78 111.294 323.38 cv
111.294 324.98 111.486 326.18 111.902 326.98 cv
112.318 327.78 112.926 328.18 113.742 328.18 cv
114.558 328.18 115.166 327.78 115.582 326.98 cv
115.982 326.18 116.19 324.98 116.19 323.38 cv
116.19 321.78 115.982 320.58 115.582 319.78 cv
115.166 318.98 114.558 318.58 113.742 318.58 cv
113.742 317.332 mo
115.038 317.332 116.03 317.86 116.734 318.884 cv
117.422 319.924 117.774 321.428 117.774 323.38 cv
117.774 325.348 117.422 326.852 116.734 327.876 cv
116.03 328.9 115.038 329.412 113.742 329.412 cv
112.43 329.412 111.422 328.9 110.734 327.876 cv
110.046 326.852 109.71 325.348 109.71 323.38 cv
109.71 321.428 110.046 319.924 110.734 318.884 cv
111.422 317.86 112.43 317.332 113.742 317.332 cv
f
40.976 323.524 mo
50.992 323.524 li
50.992 324.852 li
40.976 324.852 li
40.976 323.524 li
f
122.905 274.829 mo
126.905 274.829 li
f
122.905 274.829 mo
126.905 274.829 li
@
548.532 274.829 mo
544.532 274.829 li
f
548.532 274.829 mo
544.532 274.829 li
@
57.7743 268.619 mo
56.9582 268.619 56.3503 269.019 55.9342 269.819 cv
55.5182 270.619 55.3262 271.819 55.3262 273.419 cv
55.3262 275.019 55.5182 276.219 55.9342 277.019 cv
56.3503 277.819 56.9582 278.219 57.7743 278.219 cv
58.5902 278.219 59.1982 277.819 59.6143 277.019 cv
60.0142 276.219 60.2222 275.019 60.2222 273.419 cv
60.2222 271.819 60.0142 270.619 59.6143 269.819 cv
59.1982 269.019 58.5902 268.619 57.7743 268.619 cv
57.7743 267.371 mo
59.0702 267.371 60.0622 267.899 60.7663 268.923 cv
61.4543 269.963 61.8063 271.467 61.8063 273.419 cv
61.8063 275.387 61.4543 276.891 60.7663 277.915 cv
60.0622 278.939 59.0702 279.451 57.7743 279.451 cv
56.4622 279.451 55.4543 278.939 54.7663 277.915 cv
54.0782 276.891 53.7422 275.387 53.7422 273.419 cv
53.7422 271.467 54.0782 269.963 54.7663 268.923 cv
55.4543 267.899 56.4622 267.371 57.7743 267.371 cv
f
64.5743 277.259 mo
66.2223 277.259 li
66.2223 279.243 li
64.5743 279.243 li
64.5743 277.259 li
f
73.0382 268.619 mo
72.2222 268.619 71.6142 269.019 71.1982 269.819 cv
70.7822 270.619 70.5902 271.819 70.5902 273.419 cv
70.5902 275.019 70.7822 276.219 71.1982 277.019 cv
71.6142 277.819 72.2222 278.219 73.0382 278.219 cv
73.8542 278.219 74.4622 277.819 74.8782 277.019 cv
75.2782 276.219 75.4862 275.019 75.4862 273.419 cv
75.4862 271.819 75.2782 270.619 74.8782 269.819 cv
74.4622 269.019 73.8542 268.619 73.0382 268.619 cv
73.0382 267.371 mo
74.3342 267.371 75.3262 267.899 76.0302 268.923 cv
76.7182 269.963 77.0702 271.467 77.0702 273.419 cv
77.0702 275.387 76.7182 276.891 76.0302 277.915 cv
75.3262 278.939 74.3342 279.451 73.0382 279.451 cv
71.7262 279.451 70.7182 278.939 70.0302 277.915 cv
69.3422 276.891 69.0062 275.387 69.0062 273.419 cv
69.0062 271.467 69.3422 269.963 70.0302 268.923 cv
70.7182 267.899 71.7262 267.371 73.0382 267.371 cv
f
83.2142 268.619 mo
82.3982 268.619 81.7902 269.019 81.3742 269.819 cv
80.9582 270.619 80.7662 271.819 80.7662 273.419 cv
80.7662 275.019 80.9582 276.219 81.3742 277.019 cv
81.7902 277.819 82.3982 278.219 83.2142 278.219 cv
84.0302 278.219 84.6382 277.819 85.0542 277.019 cv
85.4542 276.219 85.6622 275.019 85.6622 273.419 cv
85.6622 271.819 85.4542 270.619 85.0542 269.819 cv
84.6382 269.019 84.0302 268.619 83.2142 268.619 cv
83.2142 267.371 mo
84.5102 267.371 85.5022 267.899 86.2062 268.923 cv
86.8942 269.963 87.2462 271.467 87.2462 273.419 cv
87.2462 275.387 86.8942 276.891 86.2062 277.915 cv
85.5022 278.939 84.5102 279.451 83.2142 279.451 cv
81.9022 279.451 80.8942 278.939 80.2062 277.915 cv
79.5182 276.891 79.1822 275.387 79.1822 273.419 cv
79.1822 271.467 79.5182 269.963 80.2062 268.923 cv
80.8942 267.899 81.9022 267.371 83.2142 267.371 cv
f
93.3902 268.619 mo
92.5742 268.619 91.9662 269.019 91.5502 269.819 cv
91.1342 270.619 90.9422 271.819 90.9422 273.419 cv
90.9422 275.019 91.1342 276.219 91.5502 277.019 cv
91.9662 277.819 92.5742 278.219 93.3902 278.219 cv
94.2062 278.219 94.8142 277.819 95.2302 277.019 cv
95.6302 276.219 95.8382 275.019 95.8382 273.419 cv
95.8382 271.819 95.6302 270.619 95.2302 269.819 cv
94.8142 269.019 94.2062 268.619 93.3902 268.619 cv
93.3902 267.371 mo
94.6862 267.371 95.6782 267.899 96.3822 268.923 cv
97.0702 269.963 97.4222 271.467 97.4222 273.419 cv
97.4222 275.387 97.0702 276.891 96.3822 277.915 cv
95.6782 278.939 94.6862 279.451 93.3902 279.451 cv
92.0782 279.451 91.0702 278.939 90.3822 277.915 cv
89.6942 276.891 89.3582 275.387 89.3582 273.419 cv
89.3582 271.467 89.6942 269.963 90.3822 268.923 cv
91.0702 267.899 92.0782 267.371 93.3902 267.371 cv
f
101.55 277.915 mo
107.054 277.915 li
107.054 279.243 li
99.6462 279.243 li
99.6462 277.915 li
100.238 277.307 101.054 276.475 102.094 275.419 cv
103.118 274.379 103.774 273.707 104.046 273.403 cv
104.558 272.843 104.91 272.363 105.102 271.963 cv
105.294 271.579 105.406 271.179 105.406 270.795 cv
105.406 270.187 105.182 269.675 104.75 269.291 cv
104.318 268.907 103.758 268.699 103.054 268.699 cv
102.558 268.699 102.03 268.795 101.486 268.955 cv
100.942 269.131 100.35 269.387 99.7262 269.739 cv
99.7262 268.139 li
100.366 267.883 100.958 267.691 101.502 267.563 cv
102.046 267.435 102.558 267.371 103.022 267.371 cv
104.222 267.371 105.182 267.675 105.902 268.283 cv
106.622 268.891 106.99 269.691 106.99 270.699 cv
106.99 271.179 106.894 271.643 106.718 272.059 cv
106.542 272.491 106.222 273.003 105.742 273.579 cv
105.614 273.739 105.198 274.171 104.494 274.891 cv
103.79 275.611 102.814 276.619 101.55 277.915 cv
f
110.382 267.579 mo
116.574 267.579 li
116.574 268.907 li
111.822 268.907 li
111.822 271.771 li
112.046 271.691 112.286 271.627 112.51 271.595 cv
112.734 271.563 112.974 271.531 113.198 271.531 cv
114.494 271.531 115.518 271.899 116.286 272.603 cv
117.054 273.323 117.438 274.283 117.438 275.499 cv
117.438 276.763 117.038 277.739 116.254 278.427 cv
115.47 279.115 114.366 279.451 112.958 279.451 cv
112.462 279.451 111.966 279.403 111.454 279.339 cv
110.942 279.259 110.43 279.147 109.886 278.971 cv
109.886 277.387 li
110.35 277.643 110.83 277.835 111.342 277.963 cv
111.838 278.091 112.366 278.139 112.926 278.139 cv
113.822 278.139 114.542 277.915 115.07 277.435 cv
115.582 276.955 115.854 276.315 115.854 275.499 cv
115.854 274.699 115.582 274.059 115.07 273.579 cv
114.542 273.099 113.822 272.859 112.926 272.859 cv
112.51 272.859 112.078 272.907 111.662 273.003 cv
111.246 273.099 110.814 273.243 110.382 273.435 cv
110.382 267.579 li
f
40.976 273.563 mo
50.992 273.563 li
50.992 274.891 li
40.976 274.891 li
40.976 273.563 li
f
122.905 224.867 mo
126.905 224.867 li
f
122.905 224.867 mo
126.905 224.867 li
@
548.532 224.867 mo
544.532 224.867 li
f
548.532 224.867 mo
544.532 224.867 li
@
57.7743 218.657 mo
56.9582 218.657 56.3503 219.057 55.9342 219.857 cv
55.5182 220.657 55.3262 221.857 55.3262 223.457 cv
55.3262 225.057 55.5182 226.257 55.9342 227.057 cv
56.3503 227.857 56.9582 228.257 57.7743 228.257 cv
58.5902 228.257 59.1982 227.857 59.6143 227.057 cv
60.0142 226.257 60.2222 225.057 60.2222 223.457 cv
60.2222 221.857 60.0142 220.657 59.6143 219.857 cv
59.1982 219.057 58.5902 218.657 57.7743 218.657 cv
57.7743 217.409 mo
59.0702 217.409 60.0622 217.937 60.7663 218.961 cv
61.4543 220.001 61.8063 221.505 61.8063 223.457 cv
61.8063 225.425 61.4543 226.929 60.7663 227.953 cv
60.0622 228.977 59.0702 229.489 57.7743 229.489 cv
56.4622 229.489 55.4543 228.977 54.7663 227.953 cv
54.0782 226.929 53.7422 225.425 53.7422 223.457 cv
53.7422 221.505 54.0782 220.001 54.7663 218.961 cv
55.4543 217.937 56.4622 217.409 57.7743 217.409 cv
f
64.5743 227.297 mo
66.2223 227.297 li
66.2223 229.281 li
64.5743 229.281 li
64.5743 227.297 li
f
73.0382 218.657 mo
72.2222 218.657 71.6142 219.057 71.1982 219.857 cv
70.7822 220.657 70.5902 221.857 70.5902 223.457 cv
70.5902 225.057 70.7822 226.257 71.1982 227.057 cv
71.6142 227.857 72.2222 228.257 73.0382 228.257 cv
73.8542 228.257 74.4622 227.857 74.8782 227.057 cv
75.2782 226.257 75.4862 225.057 75.4862 223.457 cv
75.4862 221.857 75.2782 220.657 74.8782 219.857 cv
74.4622 219.057 73.8542 218.657 73.0382 218.657 cv
73.0382 217.409 mo
74.3342 217.409 75.3262 217.937 76.0302 218.961 cv
76.7182 220.001 77.0702 221.505 77.0702 223.457 cv
77.0702 225.425 76.7182 226.929 76.0302 227.953 cv
75.3262 228.977 74.3342 229.489 73.0382 229.489 cv
71.7262 229.489 70.7182 228.977 70.0302 227.953 cv
69.3422 226.929 69.0062 225.425 69.0062 223.457 cv
69.0062 221.505 69.3422 220.001 70.0302 218.961 cv
70.7182 217.937 71.7262 217.409 73.0382 217.409 cv
f
83.2142 218.657 mo
82.3982 218.657 81.7902 219.057 81.3742 219.857 cv
80.9582 220.657 80.7662 221.857 80.7662 223.457 cv
80.7662 225.057 80.9582 226.257 81.3742 227.057 cv
81.7902 227.857 82.3982 228.257 83.2142 228.257 cv
84.0302 228.257 84.6382 227.857 85.0542 227.057 cv
85.4542 226.257 85.6622 225.057 85.6622 223.457 cv
85.6622 221.857 85.4542 220.657 85.0542 219.857 cv
84.6382 219.057 84.0302 218.657 83.2142 218.657 cv
83.2142 217.409 mo
84.5102 217.409 85.5022 217.937 86.2062 218.961 cv
86.8942 220.001 87.2462 221.505 87.2462 223.457 cv
87.2462 225.425 86.8942 226.929 86.2062 227.953 cv
85.5022 228.977 84.5102 229.489 83.2142 229.489 cv
81.9022 229.489 80.8942 228.977 80.2062 227.953 cv
79.5182 226.929 79.1822 225.425 79.1822 223.457 cv
79.1822 221.505 79.5182 220.001 80.2062 218.961 cv
80.8942 217.937 81.9022 217.409 83.2142 217.409 cv
f
93.3902 218.657 mo
92.5742 218.657 91.9662 219.057 91.5502 219.857 cv
91.1342 220.657 90.9422 221.857 90.9422 223.457 cv
90.9422 225.057 91.1342 226.257 91.5502 227.057 cv
91.9662 227.857 92.5742 228.257 93.3902 228.257 cv
94.2062 228.257 94.8142 227.857 95.2302 227.057 cv
95.6302 226.257 95.8382 225.057 95.8382 223.457 cv
95.8382 221.857 95.6302 220.657 95.2302 219.857 cv
94.8142 219.057 94.2062 218.657 93.3902 218.657 cv
93.3902 217.409 mo
94.6862 217.409 95.6782 217.937 96.3822 218.961 cv
97.0702 220.001 97.4222 221.505 97.4222 223.457 cv
97.4222 225.425 97.0702 226.929 96.3822 227.953 cv
95.6782 228.977 94.6862 229.489 93.3902 229.489 cv
92.0782 229.489 91.0702 228.977 90.3822 227.953 cv
89.6942 226.929 89.3582 225.425 89.3582 223.457 cv
89.3582 221.505 89.6942 220.001 90.3822 218.961 cv
91.0702 217.937 92.0782 217.409 93.3902 217.409 cv
f
101.55 227.953 mo
107.054 227.953 li
107.054 229.281 li
99.6462 229.281 li
99.6462 227.953 li
100.238 227.345 101.054 226.513 102.094 225.457 cv
103.118 224.417 103.774 223.745 104.046 223.441 cv
104.558 222.881 104.91 222.401 105.102 222.001 cv
105.294 221.617 105.406 221.217 105.406 220.833 cv
105.406 220.225 105.182 219.713 104.75 219.329 cv
104.318 218.945 103.758 218.737 103.054 218.737 cv
102.558 218.737 102.03 218.833 101.486 218.993 cv
100.942 219.169 100.35 219.425 99.7262 219.777 cv
99.7262 218.177 li
100.366 217.921 100.958 217.729 101.502 217.601 cv
102.046 217.473 102.558 217.409 103.022 217.409 cv
104.222 217.409 105.182 217.713 105.902 218.321 cv
106.622 218.929 106.99 219.729 106.99 220.737 cv
106.99 221.217 106.894 221.681 106.718 222.097 cv
106.542 222.529 106.222 223.041 105.742 223.617 cv
105.614 223.777 105.198 224.209 104.494 224.929 cv
103.79 225.649 102.814 226.657 101.55 227.953 cv
f
113.742 218.657 mo
112.926 218.657 112.318 219.057 111.902 219.857 cv
111.486 220.657 111.294 221.857 111.294 223.457 cv
111.294 225.057 111.486 226.257 111.902 227.057 cv
112.318 227.857 112.926 228.257 113.742 228.257 cv
114.558 228.257 115.166 227.857 115.582 227.057 cv
115.982 226.257 116.19 225.057 116.19 223.457 cv
116.19 221.857 115.982 220.657 115.582 219.857 cv
115.166 219.057 114.558 218.657 113.742 218.657 cv
113.742 217.409 mo
115.038 217.409 116.03 217.937 116.734 218.961 cv
117.422 220.001 117.774 221.505 117.774 223.457 cv
117.774 225.425 117.422 226.929 116.734 227.953 cv
116.03 228.977 115.038 229.489 113.742 229.489 cv
112.43 229.489 111.422 228.977 110.734 227.953 cv
110.046 226.929 109.71 225.425 109.71 223.457 cv
109.71 221.505 110.046 220.001 110.734 218.961 cv
111.422 217.937 112.43 217.409 113.742 217.409 cv
f
40.976 223.601 mo
50.992 223.601 li
50.992 224.929 li
40.976 224.929 li
40.976 223.601 li
f
122.905 174.906 mo
126.905 174.906 li
f
122.905 174.906 mo
126.905 174.906 li
@
548.532 174.906 mo
544.532 174.906 li
f
548.532 174.906 mo
544.532 174.906 li
@
57.7743 168.696 mo
56.9582 168.696 56.3503 169.096 55.9342 169.896 cv
55.5182 170.696 55.3262 171.896 55.3262 173.496 cv
55.3262 175.096 55.5182 176.296 55.9342 177.096 cv
56.3503 177.896 56.9582 178.296 57.7743 178.296 cv
58.5902 178.296 59.1982 177.896 59.6143 177.096 cv
60.0142 176.296 60.2222 175.096 60.2222 173.496 cv
60.2222 171.896 60.0142 170.696 59.6143 169.896 cv
59.1982 169.096 58.5902 168.696 57.7743 168.696 cv
57.7743 167.448 mo
59.0702 167.448 60.0622 167.976 60.7663 169 cv
61.4543 170.04 61.8063 171.544 61.8063 173.496 cv
61.8063 175.464 61.4543 176.968 60.7663 177.992 cv
60.0622 179.016 59.0702 179.528 57.7743 179.528 cv
56.4622 179.528 55.4543 179.016 54.7663 177.992 cv
54.0782 176.968 53.7422 175.464 53.7422 173.496 cv
53.7422 171.544 54.0782 170.04 54.7663 169 cv
55.4543 167.976 56.4622 167.448 57.7743 167.448 cv
f
64.5743 177.336 mo
66.2223 177.336 li
66.2223 179.32 li
64.5743 179.32 li
64.5743 177.336 li
f
73.0382 168.696 mo
72.2222 168.696 71.6142 169.096 71.1982 169.896 cv
70.7822 170.696 70.5902 171.896 70.5902 173.496 cv
70.5902 175.096 70.7822 176.296 71.1982 177.096 cv
71.6142 177.896 72.2222 178.296 73.0382 178.296 cv
73.8542 178.296 74.4622 177.896 74.8782 177.096 cv
75.2782 176.296 75.4862 175.096 75.4862 173.496 cv
75.4862 171.896 75.2782 170.696 74.8782 169.896 cv
74.4622 169.096 73.8542 168.696 73.0382 168.696 cv
73.0382 167.448 mo
74.3342 167.448 75.3262 167.976 76.0302 169 cv
76.7182 170.04 77.0702 171.544 77.0702 173.496 cv
77.0702 175.464 76.7182 176.968 76.0302 177.992 cv
75.3262 179.016 74.3342 179.528 73.0382 179.528 cv
71.7262 179.528 70.7182 179.016 70.0302 177.992 cv
69.3422 176.968 69.0062 175.464 69.0062 173.496 cv
69.0062 171.544 69.3422 170.04 70.0302 169 cv
70.7182 167.976 71.7262 167.448 73.0382 167.448 cv
f
83.2142 168.696 mo
82.3982 168.696 81.7902 169.096 81.3742 169.896 cv
80.9582 170.696 80.7662 171.896 80.7662 173.496 cv
80.7662 175.096 80.9582 176.296 81.3742 177.096 cv
81.7902 177.896 82.3982 178.296 83.2142 178.296 cv
84.0302 178.296 84.6382 177.896 85.0542 177.096 cv
85.4542 176.296 85.6622 175.096 85.6622 173.496 cv
85.6622 171.896 85.4542 170.696 85.0542 169.896 cv
84.6382 169.096 84.0302 168.696 83.2142 168.696 cv
83.2142 167.448 mo
84.5102 167.448 85.5022 167.976 86.2062 169 cv
86.8942 170.04 87.2462 171.544 87.2462 173.496 cv
87.2462 175.464 86.8942 176.968 86.2062 177.992 cv
85.5022 179.016 84.5102 179.528 83.2142 179.528 cv
81.9022 179.528 80.8942 179.016 80.2062 177.992 cv
79.5182 176.968 79.1822 175.464 79.1822 173.496 cv
79.1822 171.544 79.5182 170.04 80.2062 169 cv
80.8942 167.976 81.9022 167.448 83.2142 167.448 cv
f
93.3902 168.696 mo
92.5742 168.696 91.9662 169.096 91.5502 169.896 cv
91.1342 170.696 90.9422 171.896 90.9422 173.496 cv
90.9422 175.096 91.1342 176.296 91.5502 177.096 cv
91.9662 177.896 92.5742 178.296 93.3902 178.296 cv
94.2062 178.296 94.8142 177.896 95.2302 177.096 cv
95.6302 176.296 95.8382 175.096 95.8382 173.496 cv
95.8382 171.896 95.6302 170.696 95.2302 169.896 cv
94.8142 169.096 94.2062 168.696 93.3902 168.696 cv
93.3902 167.448 mo
94.6862 167.448 95.6782 167.976 96.3822 169 cv
97.0702 170.04 97.4222 171.544 97.4222 173.496 cv
97.4222 175.464 97.0702 176.968 96.3822 177.992 cv
95.6782 179.016 94.6862 179.528 93.3902 179.528 cv
92.0782 179.528 91.0702 179.016 90.3822 177.992 cv
89.6942 176.968 89.3582 175.464 89.3582 173.496 cv
89.3582 171.544 89.6942 170.04 90.3822 169 cv
91.0702 167.976 92.0782 167.448 93.3902 167.448 cv
f
100.462 177.992 mo
103.038 177.992 li
103.038 169.096 li
100.238 169.656 li
100.238 168.216 li
103.022 167.656 li
104.606 167.656 li
104.606 177.992 li
107.182 177.992 li
107.182 179.32 li
100.462 179.32 li
100.462 177.992 li
f
110.382 167.656 mo
116.574 167.656 li
116.574 168.984 li
111.822 168.984 li
111.822 171.848 li
112.046 171.768 112.286 171.704 112.51 171.672 cv
112.734 171.64 112.974 171.608 113.198 171.608 cv
114.494 171.608 115.518 171.976 116.286 172.68 cv
117.054 173.4 117.438 174.36 117.438 175.576 cv
117.438 176.84 117.038 177.816 116.254 178.504 cv
115.47 179.192 114.366 179.528 112.958 179.528 cv
112.462 179.528 111.966 179.48 111.454 179.416 cv
110.942 179.336 110.43 179.224 109.886 179.048 cv
109.886 177.464 li
110.35 177.72 110.83 177.912 111.342 178.04 cv
111.838 178.168 112.366 178.216 112.926 178.216 cv
113.822 178.216 114.542 177.992 115.07 177.512 cv
115.582 177.032 115.854 176.392 115.854 175.576 cv
115.854 174.776 115.582 174.136 115.07 173.656 cv
114.542 173.176 113.822 172.936 112.926 172.936 cv
112.51 172.936 112.078 172.984 111.662 173.08 cv
111.246 173.176 110.814 173.32 110.382 173.512 cv
110.382 167.656 li
f
40.976 173.64 mo
50.992 173.64 li
50.992 174.968 li
40.976 174.968 li
40.976 173.64 li
f
122.905 124.945 mo
126.905 124.945 li
f
122.905 124.945 mo
126.905 124.945 li
@
548.532 124.945 mo
544.532 124.945 li
f
548.532 124.945 mo
544.532 124.945 li
@
57.7743 118.735 mo
56.9582 118.735 56.3503 119.135 55.9342 119.935 cv
55.5182 120.735 55.3262 121.935 55.3262 123.535 cv
55.3262 125.135 55.5182 126.335 55.9342 127.135 cv
56.3503 127.935 56.9582 128.335 57.7743 128.335 cv
58.5902 128.335 59.1982 127.935 59.6143 127.135 cv
60.0142 126.335 60.2222 125.135 60.2222 123.535 cv
60.2222 121.935 60.0142 120.735 59.6143 119.935 cv
59.1982 119.135 58.5902 118.735 57.7743 118.735 cv
57.7743 117.487 mo
59.0702 117.487 60.0622 118.015 60.7663 119.039 cv
61.4543 120.079 61.8063 121.583 61.8063 123.535 cv
61.8063 125.503 61.4543 127.007 60.7663 128.031 cv
60.0622 129.055 59.0702 129.567 57.7743 129.567 cv
56.4622 129.567 55.4543 129.055 54.7663 128.031 cv
54.0782 127.007 53.7422 125.503 53.7422 123.535 cv
53.7422 121.583 54.0782 120.079 54.7663 119.039 cv
55.4543 118.015 56.4622 117.487 57.7743 117.487 cv
f
64.5743 127.375 mo
66.2223 127.375 li
66.2223 129.359 li
64.5743 129.359 li
64.5743 127.375 li
f
73.0382 118.735 mo
72.2222 118.735 71.6142 119.135 71.1982 119.935 cv
70.7822 120.735 70.5902 121.935 70.5902 123.535 cv
70.5902 125.135 70.7822 126.335 71.1982 127.135 cv
71.6142 127.935 72.2222 128.335 73.0382 128.335 cv
73.8542 128.335 74.4622 127.935 74.8782 127.135 cv
75.2782 126.335 75.4862 125.135 75.4862 123.535 cv
75.4862 121.935 75.2782 120.735 74.8782 119.935 cv
74.4622 119.135 73.8542 118.735 73.0382 118.735 cv
73.0382 117.487 mo
74.3342 117.487 75.3262 118.015 76.0302 119.039 cv
76.7182 120.079 77.0702 121.583 77.0702 123.535 cv
77.0702 125.503 76.7182 127.007 76.0302 128.031 cv
75.3262 129.055 74.3342 129.567 73.0382 129.567 cv
71.7262 129.567 70.7182 129.055 70.0302 128.031 cv
69.3422 127.007 69.0062 125.503 69.0062 123.535 cv
69.0062 121.583 69.3422 120.079 70.0302 119.039 cv
70.7182 118.015 71.7262 117.487 73.0382 117.487 cv
f
83.2142 118.735 mo
82.3982 118.735 81.7902 119.135 81.3742 119.935 cv
80.9582 120.735 80.7662 121.935 80.7662 123.535 cv
80.7662 125.135 80.9582 126.335 81.3742 127.135 cv
81.7902 127.935 82.3982 128.335 83.2142 128.335 cv
84.0302 128.335 84.6382 127.935 85.0542 127.135 cv
85.4542 126.335 85.6622 125.135 85.6622 123.535 cv
85.6622 121.935 85.4542 120.735 85.0542 119.935 cv
84.6382 119.135 84.0302 118.735 83.2142 118.735 cv
83.2142 117.487 mo
84.5102 117.487 85.5022 118.015 86.2062 119.039 cv
86.8942 120.079 87.2462 121.583 87.2462 123.535 cv
87.2462 125.503 86.8942 127.007 86.2062 128.031 cv
85.5022 129.055 84.5102 129.567 83.2142 129.567 cv
81.9022 129.567 80.8942 129.055 80.2062 128.031 cv
79.5182 127.007 79.1822 125.503 79.1822 123.535 cv
79.1822 121.583 79.5182 120.079 80.2062 119.039 cv
80.8942 118.015 81.9022 117.487 83.2142 117.487 cv
f
93.3902 118.735 mo
92.5742 118.735 91.9662 119.135 91.5502 119.935 cv
91.1342 120.735 90.9422 121.935 90.9422 123.535 cv
90.9422 125.135 91.1342 126.335 91.5502 127.135 cv
91.9662 127.935 92.5742 128.335 93.3902 128.335 cv
94.2062 128.335 94.8142 127.935 95.2302 127.135 cv
95.6302 126.335 95.8382 125.135 95.8382 123.535 cv
95.8382 121.935 95.6302 120.735 95.2302 119.935 cv
94.8142 119.135 94.2062 118.735 93.3902 118.735 cv
93.3902 117.487 mo
94.6862 117.487 95.6782 118.015 96.3822 119.039 cv
97.0702 120.079 97.4222 121.583 97.4222 123.535 cv
97.4222 125.503 97.0702 127.007 96.3822 128.031 cv
95.6782 129.055 94.6862 129.567 93.3902 129.567 cv
92.0782 129.567 91.0702 129.055 90.3822 128.031 cv
89.6942 127.007 89.3582 125.503 89.3582 123.535 cv
89.3582 121.583 89.6942 120.079 90.3822 119.039 cv
91.0702 118.015 92.0782 117.487 93.3902 117.487 cv
f
100.462 128.031 mo
103.038 128.031 li
103.038 119.135 li
100.238 119.695 li
100.238 118.255 li
103.022 117.695 li
104.606 117.695 li
104.606 128.031 li
107.182 128.031 li
107.182 129.359 li
100.462 129.359 li
100.462 128.031 li
f
113.742 118.735 mo
112.926 118.735 112.318 119.135 111.902 119.935 cv
111.486 120.735 111.294 121.935 111.294 123.535 cv
111.294 125.135 111.486 126.335 111.902 127.135 cv
112.318 127.935 112.926 128.335 113.742 128.335 cv
114.558 128.335 115.166 127.935 115.582 127.135 cv
115.982 126.335 116.19 125.135 116.19 123.535 cv
116.19 121.935 115.982 120.735 115.582 119.935 cv
115.166 119.135 114.558 118.735 113.742 118.735 cv
113.742 117.487 mo
115.038 117.487 116.03 118.015 116.734 119.039 cv
117.422 120.079 117.774 121.583 117.774 123.535 cv
117.774 125.503 117.422 127.007 116.734 128.031 cv
116.03 129.055 115.038 129.567 113.742 129.567 cv
112.43 129.567 111.422 129.055 110.734 128.031 cv
110.046 127.007 109.71 125.503 109.71 123.535 cv
109.71 121.583 110.046 120.079 110.734 119.039 cv
111.422 118.015 112.43 117.487 113.742 117.487 cv
f
40.976 123.679 mo
50.992 123.679 li
50.992 125.007 li
40.976 125.007 li
40.976 123.679 li
f
122.905 74.9835 mo
126.905 74.9835 li
f
122.905 74.9835 mo
126.905 74.9835 li
@
548.532 74.9835 mo
544.532 74.9835 li
f
548.532 74.9835 mo
544.532 74.9835 li
@
57.7743 68.7736 mo
56.9582 68.7736 56.3503 69.1736 55.9342 69.9735 cv
55.5182 70.7736 55.3262 71.9735 55.3262 73.5736 cv
55.3262 75.1736 55.5182 76.3736 55.9342 77.1736 cv
56.3503 77.9735 56.9582 78.3736 57.7743 78.3736 cv
58.5902 78.3736 59.1982 77.9735 59.6143 77.1736 cv
60.0142 76.3736 60.2222 75.1736 60.2222 73.5736 cv
60.2222 71.9735 60.0142 70.7736 59.6143 69.9735 cv
59.1982 69.1736 58.5902 68.7736 57.7743 68.7736 cv
57.7743 67.5256 mo
59.0702 67.5256 60.0622 68.0536 60.7663 69.0776 cv
61.4543 70.1176 61.8063 71.6216 61.8063 73.5736 cv
61.8063 75.5415 61.4543 77.0456 60.7663 78.0695 cv
60.0622 79.0936 59.0702 79.6056 57.7743 79.6056 cv
56.4622 79.6056 55.4543 79.0936 54.7663 78.0695 cv
54.0782 77.0456 53.7422 75.5415 53.7422 73.5736 cv
53.7422 71.6216 54.0782 70.1176 54.7663 69.0776 cv
55.4543 68.0536 56.4622 67.5256 57.7743 67.5256 cv
f
64.5743 77.4136 mo
66.2223 77.4136 li
66.2223 79.3976 li
64.5743 79.3976 li
64.5743 77.4136 li
f
73.0382 68.7736 mo
72.2222 68.7736 71.6142 69.1736 71.1982 69.9735 cv
70.7822 70.7736 70.5902 71.9735 70.5902 73.5736 cv
70.5902 75.1736 70.7822 76.3736 71.1982 77.1736 cv
71.6142 77.9735 72.2222 78.3736 73.0382 78.3736 cv
73.8542 78.3736 74.4622 77.9735 74.8782 77.1736 cv
75.2782 76.3736 75.4862 75.1736 75.4862 73.5736 cv
75.4862 71.9735 75.2782 70.7736 74.8782 69.9735 cv
74.4622 69.1736 73.8542 68.7736 73.0382 68.7736 cv
73.0382 67.5256 mo
74.3342 67.5256 75.3262 68.0536 76.0302 69.0776 cv
76.7182 70.1176 77.0702 71.6216 77.0702 73.5736 cv
77.0702 75.5415 76.7182 77.0456 76.0302 78.0695 cv
75.3262 79.0936 74.3342 79.6056 73.0382 79.6056 cv
71.7262 79.6056 70.7182 79.0936 70.0302 78.0695 cv
69.3422 77.0456 69.0062 75.5415 69.0062 73.5736 cv
69.0062 71.6216 69.3422 70.1176 70.0302 69.0776 cv
70.7182 68.0536 71.7262 67.5256 73.0382 67.5256 cv
f
83.2142 68.7736 mo
82.3982 68.7736 81.7902 69.1736 81.3742 69.9735 cv
80.9582 70.7736 80.7662 71.9735 80.7662 73.5736 cv
80.7662 75.1736 80.9582 76.3736 81.3742 77.1736 cv
81.7902 77.9735 82.3982 78.3736 83.2142 78.3736 cv
84.0302 78.3736 84.6382 77.9735 85.0542 77.1736 cv
85.4542 76.3736 85.6622 75.1736 85.6622 73.5736 cv
85.6622 71.9735 85.4542 70.7736 85.0542 69.9735 cv
84.6382 69.1736 84.0302 68.7736 83.2142 68.7736 cv
83.2142 67.5256 mo
84.5102 67.5256 85.5022 68.0536 86.2062 69.0776 cv
86.8942 70.1176 87.2462 71.6216 87.2462 73.5736 cv
87.2462 75.5415 86.8942 77.0456 86.2062 78.0695 cv
85.5022 79.0936 84.5102 79.6056 83.2142 79.6056 cv
81.9022 79.6056 80.8942 79.0936 80.2062 78.0695 cv
79.5182 77.0456 79.1822 75.5415 79.1822 73.5736 cv
79.1822 71.6216 79.5182 70.1176 80.2062 69.0776 cv
80.8942 68.0536 81.9022 67.5256 83.2142 67.5256 cv
f
93.3902 68.7736 mo
92.5742 68.7736 91.9662 69.1736 91.5502 69.9735 cv
91.1342 70.7736 90.9422 71.9735 90.9422 73.5736 cv
90.9422 75.1736 91.1342 76.3736 91.5502 77.1736 cv
91.9662 77.9735 92.5742 78.3736 93.3902 78.3736 cv
94.2062 78.3736 94.8142 77.9735 95.2302 77.1736 cv
95.6302 76.3736 95.8382 75.1736 95.8382 73.5736 cv
95.8382 71.9735 95.6302 70.7736 95.2302 69.9735 cv
94.8142 69.1736 94.2062 68.7736 93.3902 68.7736 cv
93.3902 67.5256 mo
94.6862 67.5256 95.6782 68.0536 96.3822 69.0776 cv
97.0702 70.1176 97.4222 71.6216 97.4222 73.5736 cv
97.4222 75.5415 97.0702 77.0456 96.3822 78.0695 cv
95.6782 79.0936 94.6862 79.6056 93.3902 79.6056 cv
92.0782 79.6056 91.0702 79.0936 90.3822 78.0695 cv
89.6942 77.0456 89.3582 75.5415 89.3582 73.5736 cv
89.3582 71.6216 89.6942 70.1176 90.3822 69.0776 cv
91.0702 68.0536 92.0782 67.5256 93.3902 67.5256 cv
f
103.566 68.7736 mo
102.75 68.7736 102.142 69.1736 101.726 69.9735 cv
101.31 70.7736 101.118 71.9735 101.118 73.5736 cv
101.118 75.1736 101.31 76.3736 101.726 77.1736 cv
102.142 77.9735 102.75 78.3736 103.566 78.3736 cv
104.382 78.3736 104.99 77.9735 105.406 77.1736 cv
105.806 76.3736 106.014 75.1736 106.014 73.5736 cv
106.014 71.9735 105.806 70.7736 105.406 69.9735 cv
104.99 69.1736 104.382 68.7736 103.566 68.7736 cv
103.566 67.5256 mo
104.862 67.5256 105.854 68.0536 106.558 69.0776 cv
107.246 70.1176 107.598 71.6216 107.598 73.5736 cv
107.598 75.5415 107.246 77.0456 106.558 78.0695 cv
105.854 79.0936 104.862 79.6056 103.566 79.6056 cv
102.254 79.6056 101.246 79.0936 100.558 78.0695 cv
99.8702 77.0456 99.5342 75.5415 99.5342 73.5736 cv
99.5342 71.6216 99.8702 70.1176 100.558 69.0776 cv
101.246 68.0536 102.254 67.5256 103.566 67.5256 cv
f
110.382 67.7336 mo
116.574 67.7336 li
116.574 69.0616 li
111.822 69.0616 li
111.822 71.9256 li
112.046 71.8456 112.286 71.7816 112.51 71.7495 cv
112.734 71.7176 112.974 71.6856 113.198 71.6856 cv
114.494 71.6856 115.518 72.0536 116.286 72.7576 cv
117.054 73.4776 117.438 74.4376 117.438 75.6535 cv
117.438 76.9175 117.038 77.8936 116.254 78.5816 cv
115.47 79.2696 114.366 79.6056 112.958 79.6056 cv
112.462 79.6056 111.966 79.5576 111.454 79.4936 cv
110.942 79.4136 110.43 79.3016 109.886 79.1255 cv
109.886 77.5415 li
110.35 77.7976 110.83 77.9896 111.342 78.1176 cv
111.838 78.2456 112.366 78.2935 112.926 78.2935 cv
113.822 78.2935 114.542 78.0695 115.07 77.5896 cv
115.582 77.1096 115.854 76.4696 115.854 75.6535 cv
115.854 74.8536 115.582 74.2136 115.07 73.7336 cv
114.542 73.2536 113.822 73.0135 112.926 73.0135 cv
112.51 73.0135 112.078 73.0616 111.662 73.1576 cv
111.246 73.2536 110.814 73.3976 110.382 73.5896 cv
110.382 67.7336 li
f
40.976 73.7176 mo
50.992 73.7176 li
50.992 75.0456 li
40.976 75.0456 li
40.976 73.7176 li
f
122.905 25.0222 mo
126.905 25.0222 li
f
122.905 25.0222 mo
126.905 25.0222 li
@
548.532 25.0222 mo
544.532 25.0222 li
f
548.532 25.0222 mo
544.532 25.0222 li
@
57.7743 18.8122 mo
56.9582 18.8122 56.3503 19.2122 55.9342 20.0122 cv
55.5182 20.8122 55.3262 22.0122 55.3262 23.6122 cv
55.3262 25.2122 55.5182 26.4122 55.9342 27.2122 cv
56.3503 28.0122 56.9582 28.4122 57.7743 28.4122 cv
58.5902 28.4122 59.1982 28.0122 59.6143 27.2122 cv
60.0142 26.4122 60.2222 25.2122 60.2222 23.6122 cv
60.2222 22.0122 60.0142 20.8122 59.6143 20.0122 cv
59.1982 19.2122 58.5902 18.8122 57.7743 18.8122 cv
57.7743 17.5642 mo
59.0702 17.5642 60.0622 18.0922 60.7663 19.1162 cv
61.4543 20.1562 61.8063 21.6602 61.8063 23.6122 cv
61.8063 25.5802 61.4543 27.0842 60.7663 28.1082 cv
60.0622 29.1322 59.0702 29.6442 57.7743 29.6442 cv
56.4622 29.6442 55.4543 29.1322 54.7663 28.1082 cv
54.0782 27.0842 53.7422 25.5802 53.7422 23.6122 cv
53.7422 21.6602 54.0782 20.1562 54.7663 19.1162 cv
55.4543 18.0922 56.4622 17.5642 57.7743 17.5642 cv
f
64.5743 27.4522 mo
66.2223 27.4522 li
66.2223 29.4362 li
64.5743 29.4362 li
64.5743 27.4522 li
f
73.0382 18.8122 mo
72.2222 18.8122 71.6142 19.2122 71.1982 20.0122 cv
70.7822 20.8122 70.5902 22.0122 70.5902 23.6122 cv
70.5902 25.2122 70.7822 26.4122 71.1982 27.2122 cv
71.6142 28.0122 72.2222 28.4122 73.0382 28.4122 cv
73.8542 28.4122 74.4622 28.0122 74.8782 27.2122 cv
75.2782 26.4122 75.4862 25.2122 75.4862 23.6122 cv
75.4862 22.0122 75.2782 20.8122 74.8782 20.0122 cv
74.4622 19.2122 73.8542 18.8122 73.0382 18.8122 cv
73.0382 17.5642 mo
74.3342 17.5642 75.3262 18.0922 76.0302 19.1162 cv
76.7182 20.1562 77.0702 21.6602 77.0702 23.6122 cv
77.0702 25.5802 76.7182 27.0842 76.0302 28.1082 cv
75.3262 29.1322 74.3342 29.6442 73.0382 29.6442 cv
71.7262 29.6442 70.7182 29.1322 70.0302 28.1082 cv
69.3422 27.0842 69.0062 25.5802 69.0062 23.6122 cv
69.0062 21.6602 69.3422 20.1562 70.0302 19.1162 cv
70.7182 18.0922 71.7262 17.5642 73.0382 17.5642 cv
f
83.2142 18.8122 mo
82.3982 18.8122 81.7902 19.2122 81.3742 20.0122 cv
80.9582 20.8122 80.7662 22.0122 80.7662 23.6122 cv
80.7662 25.2122 80.9582 26.4122 81.3742 27.2122 cv
81.7902 28.0122 82.3982 28.4122 83.2142 28.4122 cv
84.0302 28.4122 84.6382 28.0122 85.0542 27.2122 cv
85.4542 26.4122 85.6622 25.2122 85.6622 23.6122 cv
85.6622 22.0122 85.4542 20.8122 85.0542 20.0122 cv
84.6382 19.2122 84.0302 18.8122 83.2142 18.8122 cv
83.2142 17.5642 mo
84.5102 17.5642 85.5022 18.0922 86.2062 19.1162 cv
86.8942 20.1562 87.2462 21.6602 87.2462 23.6122 cv
87.2462 25.5802 86.8942 27.0842 86.2062 28.1082 cv
85.5022 29.1322 84.5102 29.6442 83.2142 29.6442 cv
81.9022 29.6442 80.8942 29.1322 80.2062 28.1082 cv
79.5182 27.0842 79.1822 25.5802 79.1822 23.6122 cv
79.1822 21.6602 79.5182 20.1562 80.2062 19.1162 cv
80.8942 18.0922 81.9022 17.5642 83.2142 17.5642 cv
f
93.3902 18.8122 mo
92.5742 18.8122 91.9662 19.2122 91.5502 20.0122 cv
91.1342 20.8122 90.9422 22.0122 90.9422 23.6122 cv
90.9422 25.2122 91.1342 26.4122 91.5502 27.2122 cv
91.9662 28.0122 92.5742 28.4122 93.3902 28.4122 cv
94.2062 28.4122 94.8142 28.0122 95.2302 27.2122 cv
95.6302 26.4122 95.8382 25.2122 95.8382 23.6122 cv
95.8382 22.0122 95.6302 20.8122 95.2302 20.0122 cv
94.8142 19.2122 94.2062 18.8122 93.3902 18.8122 cv
93.3902 17.5642 mo
94.6862 17.5642 95.6782 18.0922 96.3822 19.1162 cv
97.0702 20.1562 97.4222 21.6602 97.4222 23.6122 cv
97.4222 25.5802 97.0702 27.0842 96.3822 28.1082 cv
95.6782 29.1322 94.6862 29.6442 93.3902 29.6442 cv
92.0782 29.6442 91.0702 29.1322 90.3822 28.1082 cv
89.6942 27.0842 89.3582 25.5802 89.3582 23.6122 cv
89.3582 21.6602 89.6942 20.1562 90.3822 19.1162 cv
91.0702 18.0922 92.0782 17.5642 93.3902 17.5642 cv
f
103.566 18.8122 mo
102.75 18.8122 102.142 19.2122 101.726 20.0122 cv
101.31 20.8122 101.118 22.0122 101.118 23.6122 cv
101.118 25.2122 101.31 26.4122 101.726 27.2122 cv
102.142 28.0122 102.75 28.4122 103.566 28.4122 cv
104.382 28.4122 104.99 28.0122 105.406 27.2122 cv
105.806 26.4122 106.014 25.2122 106.014 23.6122 cv
106.014 22.0122 105.806 20.8122 105.406 20.0122 cv
104.99 19.2122 104.382 18.8122 103.566 18.8122 cv
103.566 17.5642 mo
104.862 17.5642 105.854 18.0922 106.558 19.1162 cv
107.246 20.1562 107.598 21.6602 107.598 23.6122 cv
107.598 25.5802 107.246 27.0842 106.558 28.1082 cv
105.854 29.1322 104.862 29.6442 103.566 29.6442 cv
102.254 29.6442 101.246 29.1322 100.558 28.1082 cv
99.8702 27.0842 99.5342 25.5802 99.5342 23.6122 cv
99.5342 21.6602 99.8702 20.1562 100.558 19.1162 cv
101.246 18.0922 102.254 17.5642 103.566 17.5642 cv
f
113.742 18.8122 mo
112.926 18.8122 112.318 19.2122 111.902 20.0122 cv
111.486 20.8122 111.294 22.0122 111.294 23.6122 cv
111.294 25.2122 111.486 26.4122 111.902 27.2122 cv
112.318 28.0122 112.926 28.4122 113.742 28.4122 cv
114.558 28.4122 115.166 28.0122 115.582 27.2122 cv
115.982 26.4122 116.19 25.2122 116.19 23.6122 cv
116.19 22.0122 115.982 20.8122 115.582 20.0122 cv
115.166 19.2122 114.558 18.8122 113.742 18.8122 cv
113.742 17.5642 mo
115.038 17.5642 116.03 18.0922 116.734 19.1162 cv
117.422 20.1562 117.774 21.6602 117.774 23.6122 cv
117.774 25.5802 117.422 27.0842 116.734 28.1082 cv
116.03 29.1322 115.038 29.6442 113.742 29.6442 cv
112.43 29.6442 111.422 29.1322 110.734 28.1082 cv
110.046 27.0842 109.71 25.5802 109.71 23.6122 cv
109.71 21.6602 110.046 20.1562 110.734 19.1162 cv
111.422 18.0922 112.43 17.5642 113.742 17.5642 cv
f
18.6683 270.083 mo
20.3323 270.083 li
19.8522 270.627 19.4842 271.187 19.2283 271.795 cv
18.9883 272.403 18.8603 273.027 18.8603 273.699 cv
18.8603 275.043 19.2762 276.067 20.0923 276.771 cv
20.9082 277.475 22.0763 277.827 23.6123 277.827 cv
25.1483 277.827 26.3323 277.475 27.1483 276.771 cv
27.9643 276.067 28.3643 275.043 28.3643 273.699 cv
28.3643 273.027 28.2523 272.403 27.9963 271.795 cv
27.7563 271.187 27.3883 270.627 26.8923 270.083 cv
28.5403 270.083 li
28.9243 270.643 29.1963 271.235 29.3723 271.843 cv
29.5483 272.451 29.6443 273.107 29.6443 273.795 cv
29.6443 275.555 29.1163 276.947 28.0443 277.971 cv
26.9722 278.995 25.5002 279.491 23.6123 279.491 cv
21.7402 279.491 20.2682 278.995 19.1803 277.971 cv
18.1082 276.947 17.5643 275.555 17.5643 273.795 cv
17.5643 273.091 17.6602 272.435 17.8363 271.827 cv
18.0282 271.219 18.3003 270.627 18.6683 270.083 cv
f
25.0363 263.727 mo
25.0363 264.895 25.1803 265.695 25.4363 266.143 cv
25.7083 266.591 26.1563 266.815 26.7963 266.815 cv
27.3083 266.815 27.7243 266.655 28.0123 266.319 cv
28.3162 265.983 28.4603 265.519 28.4603 264.943 cv
28.4603 264.143 28.1883 263.503 27.6123 263.023 cv
27.0522 262.543 26.3003 262.303 25.3563 262.303 cv
25.0363 262.303 li
25.0363 263.727 li
24.4443 260.863 mo
29.4363 260.863 li
29.4363 262.303 li
28.1082 262.303 li
28.6523 262.639 29.0363 263.055 29.2763 263.535 cv
29.5163 264.015 29.6443 264.623 29.6443 265.327 cv
29.6443 266.223 29.4043 266.943 28.9083 267.471 cv
28.4123 267.999 27.7402 268.255 26.8923 268.255 cv
25.9163 268.255 25.1803 267.935 24.6683 267.263 cv
24.1723 266.607 23.9163 265.631 23.9163 264.319 cv
23.9163 262.303 li
23.7723 262.303 li
23.1163 262.303 22.6042 262.527 22.2362 262.959 cv
21.8843 263.391 21.6922 263.999 21.6922 264.783 cv
21.6922 265.295 21.7563 265.775 21.8843 266.255 cv
22.0123 266.735 22.1883 267.183 22.4123 267.615 cv
21.0843 267.615 li
20.8923 267.103 20.7323 266.591 20.6362 266.095 cv
20.5402 265.599 20.4762 265.119 20.4762 264.639 cv
20.4762 263.375 20.8123 262.431 21.4683 261.807 cv
22.1243 261.183 23.1163 260.863 24.4443 260.863 cv
f
28.1243 256.514 mo
32.7483 256.514 li
32.7483 257.954 li
20.6842 257.954 li
20.6842 256.514 li
22.0123 256.514 li
21.5002 256.226 21.1162 255.842 20.8603 255.378 cv
20.6042 254.914 20.4762 254.354 20.4762 253.714 cv
20.4762 252.658 20.9082 251.794 21.7402 251.122 cv
22.5882 250.466 23.6922 250.13 25.0683 250.13 cv
26.4443 250.13 27.5643 250.466 28.3962 251.122 cv
29.2283 251.794 29.6443 252.658 29.6443 253.714 cv
29.6443 254.354 29.5163 254.914 29.2763 255.378 cv
29.0363 255.842 28.6523 256.226 28.1243 256.514 cv
25.0683 251.618 mo
24.0123 251.618 23.1963 251.842 22.5882 252.274 cv
21.9803 252.722 21.6763 253.314 21.6763 254.066 cv
21.6763 254.834 21.9803 255.426 22.5882 255.858 cv
23.1963 256.306 24.0123 256.514 25.0683 256.514 cv
26.1243 256.514 26.9563 256.306 27.5643 255.858 cv
28.1723 255.426 28.4603 254.834 28.4603 254.066 cv
28.4603 253.314 28.1723 252.722 27.5643 252.274 cv
26.9563 251.842 26.1243 251.618 25.0683 251.618 cv
f
25.0363 243.766 mo
25.0363 244.934 25.1803 245.734 25.4363 246.182 cv
25.7083 246.63 26.1563 246.854 26.7963 246.854 cv
27.3083 246.854 27.7243 246.694 28.0123 246.358 cv
28.3162 246.022 28.4603 245.558 28.4603 244.982 cv
28.4603 244.182 28.1883 243.542 27.6123 243.062 cv
27.0522 242.582 26.3003 242.342 25.3563 242.342 cv
25.0363 242.342 li
25.0363 243.766 li
24.4443 240.902 mo
29.4363 240.902 li
29.4363 242.342 li
28.1082 242.342 li
28.6523 242.678 29.0363 243.094 29.2763 243.574 cv
29.5163 244.054 29.6443 244.662 29.6443 245.366 cv
29.6443 246.262 29.4043 246.982 28.9083 247.51 cv
28.4123 248.038 27.7402 248.294 26.8923 248.294 cv
25.9163 248.294 25.1803 247.974 24.6683 247.302 cv
24.1723 246.646 23.9163 245.67 23.9163 244.358 cv
23.9163 242.342 li
23.7723 242.342 li
23.1163 242.342 22.6042 242.566 22.2362 242.998 cv
21.8843 243.43 21.6922 244.038 21.6922 244.822 cv
21.6922 245.334 21.7563 245.814 21.8843 246.294 cv
22.0123 246.774 22.1883 247.222 22.4123 247.654 cv
21.0843 247.654 li
20.8923 247.142 20.7323 246.63 20.6362 246.134 cv
20.5402 245.638 20.4762 245.158 20.4762 244.678 cv
20.4762 243.414 20.8123 242.47 21.4683 241.846 cv
22.1243 241.222 23.1163 240.902 24.4443 240.902 cv
f
21.0203 231.641 mo
22.3643 231.641 li
22.1403 232.057 21.9803 232.457 21.8682 232.873 cv
21.7563 233.289 21.6922 233.689 21.6922 234.105 cv
21.6922 235.033 21.9963 235.769 22.5882 236.281 cv
23.1803 236.793 24.0123 237.049 25.0683 237.049 cv
26.1403 237.049 26.9722 236.793 27.5643 236.281 cv
28.1563 235.769 28.4443 235.033 28.4443 234.105 cv
28.4443 233.689 28.3962 233.289 28.2843 232.873 cv
28.1723 232.457 27.9963 232.057 27.7723 231.641 cv
29.1003 231.641 li
29.2923 232.057 29.4363 232.473 29.5163 232.889 cv
29.5963 233.321 29.6443 233.785 29.6443 234.265 cv
29.6443 235.577 29.2443 236.633 28.4123 237.401 cv
27.5963 238.185 26.4762 238.569 25.0683 238.569 cv
23.6443 238.569 22.5243 238.185 21.7083 237.401 cv
20.8923 236.617 20.4762 235.545 20.4762 234.169 cv
20.4762 233.721 20.5243 233.289 20.6203 232.873 cv
20.7163 232.457 20.8442 232.041 21.0203 231.641 cv
f
20.6842 229.148 mo
20.6842 227.708 li
29.4363 227.708 li
29.4363 229.148 li
20.6842 229.148 li
17.2762 229.148 mo
17.2762 227.708 li
19.1003 227.708 li
19.1003 229.148 li
17.2762 229.148 li
f
18.2043 223.279 mo
20.6842 223.279 li
20.6842 220.319 li
21.8043 220.319 li
21.8043 223.279 li
26.5563 223.279 li
27.2763 223.279 27.7402 223.183 27.9323 222.991 cv
28.1403 222.799 28.2362 222.399 28.2362 221.791 cv
28.2362 220.319 li
29.4363 220.319 li
29.4363 221.791 li
29.4363 222.911 29.2283 223.679 28.8123 224.095 cv
28.3962 224.511 27.6443 224.719 26.5563 224.719 cv
21.8043 224.719 li
21.8043 225.775 li
20.6842 225.775 li
20.6842 224.719 li
18.2043 224.719 li
18.2043 223.279 li
f
25.0363 214.446 mo
25.0363 215.614 25.1803 216.414 25.4363 216.862 cv
25.7083 217.31 26.1563 217.534 26.7963 217.534 cv
27.3083 217.534 27.7243 217.374 28.0123 217.038 cv
28.3162 216.702 28.4603 216.238 28.4603 215.662 cv
28.4603 214.862 28.1883 214.222 27.6123 213.742 cv
27.0522 213.262 26.3003 213.022 25.3563 213.022 cv
25.0363 213.022 li
25.0363 214.446 li
24.4443 211.582 mo
29.4363 211.582 li
29.4363 213.022 li
28.1082 213.022 li
28.6523 213.358 29.0363 213.774 29.2763 214.254 cv
29.5163 214.734 29.6443 215.342 29.6443 216.046 cv
29.6443 216.942 29.4043 217.662 28.9083 218.19 cv
28.4123 218.718 27.7402 218.974 26.8923 218.974 cv
25.9163 218.974 25.1803 218.654 24.6683 217.982 cv
24.1723 217.326 23.9163 216.35 23.9163 215.038 cv
23.9163 213.022 li
23.7723 213.022 li
23.1163 213.022 22.6042 213.246 22.2362 213.678 cv
21.8843 214.11 21.6922 214.718 21.6922 215.502 cv
21.6922 216.014 21.7563 216.494 21.8843 216.974 cv
22.0123 217.454 22.1883 217.902 22.4123 218.334 cv
21.0843 218.334 li
20.8923 217.822 20.7323 217.31 20.6362 216.814 cv
20.5402 216.318 20.4762 215.838 20.4762 215.358 cv
20.4762 214.094 20.8123 213.15 21.4683 212.526 cv
22.1243 211.902 23.1163 211.582 24.4443 211.582 cv
f
24.1563 201.345 mo
29.4363 201.345 li
29.4363 202.785 li
24.2043 202.785 li
23.3722 202.785 22.7642 202.961 22.3483 203.281 cv
21.9323 203.601 21.7243 204.081 21.7243 204.721 cv
21.7243 205.505 21.9803 206.113 22.4762 206.561 cv
22.9722 207.009 23.6443 207.233 24.4923 207.233 cv
29.4363 207.233 li
29.4363 208.673 li
20.6842 208.673 li
20.6842 207.233 li
22.0443 207.233 li
21.5322 206.897 21.1322 206.497 20.8763 206.017 cv
20.6203 205.553 20.4762 205.009 20.4762 204.401 cv
20.4762 203.409 20.7962 202.641 21.4202 202.129 cv
22.0443 201.617 22.9562 201.345 24.1563 201.345 cv
f
21.0203 192.18 mo
22.3643 192.18 li
22.1403 192.596 21.9803 192.996 21.8682 193.412 cv
21.7563 193.828 21.6922 194.228 21.6922 194.644 cv
21.6922 195.572 21.9963 196.308 22.5882 196.82 cv
23.1803 197.332 24.0123 197.588 25.0683 197.588 cv
26.1403 197.588 26.9722 197.332 27.5643 196.82 cv
28.1563 196.308 28.4443 195.572 28.4443 194.644 cv
28.4443 194.228 28.3962 193.828 28.2843 193.412 cv
28.1723 192.996 27.9963 192.596 27.7723 192.18 cv
29.1003 192.18 li
29.2923 192.596 29.4363 193.012 29.5163 193.428 cv
29.5963 193.86 29.6443 194.324 29.6443 194.804 cv
29.6443 196.116 29.2443 197.172 28.4123 197.94 cv
27.5963 198.724 26.4762 199.108 25.0683 199.108 cv
23.6443 199.108 22.5243 198.724 21.7083 197.94 cv
20.8923 197.156 20.4762 196.084 20.4762 194.708 cv
20.4762 194.26 20.5243 193.828 20.6203 193.412 cv
20.7163 192.996 20.8442 192.58 21.0203 192.18 cv
f
24.7003 182.199 mo
25.4043 182.199 li
25.4043 188.807 li
26.3962 188.743 27.1643 188.455 27.6763 187.911 cv
28.1883 187.383 28.4443 186.647 28.4443 185.687 cv
28.4443 185.143 28.3803 184.599 28.2523 184.087 cv
28.1243 183.575 27.9163 183.047 27.6283 182.535 cv
28.9883 182.535 li
29.2122 183.047 29.3883 183.575 29.4843 184.119 cv
29.5802 184.663 29.6443 185.223 29.6443 185.767 cv
29.6443 187.175 29.2443 188.279 28.4443 189.095 cv
27.6443 189.911 26.5403 190.311 25.1483 190.311 cv
23.7243 190.311 22.5882 189.927 21.7402 189.159 cv
20.9082 188.391 20.4762 187.335 20.4762 186.023 cv
20.4762 184.839 20.8603 183.911 21.6123 183.223 cv
22.3803 182.551 23.4043 182.199 24.7003 182.199 cv
24.2843 183.639 mo
23.5002 183.655 22.8763 183.879 22.3962 184.295 cv
21.9323 184.727 21.6922 185.303 21.6922 186.007 cv
21.6922 186.807 21.9323 187.447 22.3803 187.927 cv
22.8283 188.407 23.4683 188.695 24.2843 188.759 cv
24.2843 183.639 li
f
27.4523 179.476 mo
27.4523 177.828 li
28.7963 177.828 li
31.2763 179.108 li
31.2763 180.116 li
28.7963 179.476 li
27.4523 179.476 li
f
29.4363 170.312 mo
29.4363 170.408 29.4043 170.44 29.3083 170.44 cv
29.2923 170.44 li
29.2603 170.424 li
18.1563 164.92 li
18.0443 164.872 17.9803 164.776 17.9803 164.632 cv
17.9803 164.408 li
17.9803 164.264 18.0443 164.168 18.1563 164.12 cv
29.2603 158.616 li
29.2923 158.6 li
29.3083 158.6 li
29.4043 158.6 29.4363 158.648 29.4363 158.728 cv
29.4363 170.312 li
28.1563 169.256 mo
28.1563 160.824 li
19.6603 165.032 li
28.1563 169.256 li
f
25.9803 155.512 mo
26.6203 155.512 27.1963 155.4 27.6763 155.144 cv
28.1723 154.904 28.5563 154.552 28.8283 154.072 cv
29.1003 153.592 29.2283 153.032 29.2283 152.392 cv
29.2283 151.72 29.0683 151.08 28.7163 150.456 cv
28.3643 149.832 27.9003 149.304 27.3243 148.856 cv
26.7483 148.424 26.1403 148.12 25.5002 147.96 cv
25.4043 147.832 li
25.4043 147.64 li
25.4523 147.544 li
25.5483 147.496 li
25.5963 147.512 li
26.3323 147.704 27.0363 148.056 27.6763 148.568 cv
28.3323 149.096 28.8442 149.72 29.2122 150.456 cv
29.5802 151.192 29.7723 151.928 29.7723 152.696 cv
29.7723 153.528 29.5802 154.28 29.2283 154.936 cv
28.8603 155.608 28.3483 156.12 27.6763 156.488 cv
27.0042 156.856 26.2523 157.032 25.4043 157.032 cv
24.5083 157.032 23.6283 156.84 22.7483 156.44 cv
21.8843 156.04 21.1003 155.496 20.4123 154.824 cv
19.7243 154.152 19.1803 153.368 18.7642 152.504 cv
18.3643 151.64 18.1563 150.76 18.1563 149.864 cv
18.1563 149.512 18.2202 149.176 18.3162 148.856 cv
18.4282 148.536 18.5882 148.232 18.8123 147.944 cv
19.0363 147.672 19.2762 147.448 19.5643 147.272 cv
18.1883 146.008 li
18.1563 145.928 li
18.1563 145.832 li
18.2202 145.736 li
18.3162 145.688 li
22.6362 146.776 li
22.7483 146.904 li
22.7483 147.192 li
22.7483 147.288 22.7003 147.32 22.5723 147.32 cv
22.3483 147.288 22.0602 147.256 21.7243 147.256 cv
21.2122 147.256 20.7163 147.352 20.2523 147.528 cv
19.8042 147.704 19.4363 147.976 19.1483 148.344 cv
18.8603 148.728 18.7163 149.176 18.7163 149.704 cv
18.7163 150.584 18.9403 151.384 19.3722 152.104 cv
19.8203 152.824 20.3963 153.432 21.1003 153.944 cv
21.8043 154.456 22.6042 154.84 23.4683 155.112 cv
24.3323 155.384 25.1803 155.512 25.9803 155.512 cv
f
33.1003 145.53 mo
33.0363 145.514 li
17.6283 139.946 li
17.4842 139.834 li
17.4362 139.658 li
17.4362 139.562 17.4683 139.498 17.5322 139.434 cv
17.5963 139.37 17.6602 139.338 17.7563 139.338 cv
17.8203 139.338 li
33.2283 144.906 li
33.3563 144.97 33.4202 145.082 33.4202 145.21 cv
33.4202 145.306 33.3883 145.37 33.3242 145.434 cv
33.1003 145.53 li
f
25.9803 136.09 mo
26.6203 136.09 27.1963 135.978 27.6763 135.722 cv
28.1723 135.482 28.5563 135.13 28.8283 134.65 cv
29.1003 134.17 29.2283 133.61 29.2283 132.97 cv
29.2283 132.298 29.0683 131.658 28.7163 131.034 cv
28.3643 130.41 27.9003 129.882 27.3243 129.434 cv
26.7483 129.002 26.1403 128.698 25.5002 128.538 cv
25.4043 128.41 li
25.4043 128.218 li
25.4523 128.122 li
25.5483 128.074 li
25.5963 128.09 li
26.3323 128.282 27.0363 128.634 27.6763 129.146 cv
28.3323 129.674 28.8442 130.298 29.2122 131.034 cv
29.5802 131.77 29.7723 132.506 29.7723 133.274 cv
29.7723 134.106 29.5802 134.858 29.2283 135.514 cv
28.8603 136.186 28.3483 136.698 27.6763 137.066 cv
27.0042 137.434 26.2523 137.61 25.4043 137.61 cv
24.5083 137.61 23.6283 137.418 22.7483 137.018 cv
21.8843 136.618 21.1003 136.074 20.4123 135.402 cv
19.7243 134.73 19.1803 133.946 18.7642 133.082 cv
18.3643 132.218 18.1563 131.338 18.1563 130.442 cv
18.1563 130.09 18.2202 129.754 18.3162 129.434 cv
18.4282 129.114 18.5882 128.81 18.8123 128.522 cv
19.0363 128.25 19.2762 128.026 19.5643 127.85 cv
18.1883 126.586 li
18.1563 126.506 li
18.1563 126.41 li
18.2202 126.314 li
18.3162 126.266 li
22.6362 127.354 li
22.7483 127.482 li
22.7483 127.77 li
22.7483 127.866 22.7003 127.898 22.5723 127.898 cv
22.3483 127.866 22.0602 127.834 21.7243 127.834 cv
21.2122 127.834 20.7163 127.93 20.2523 128.106 cv
19.8042 128.282 19.4363 128.554 19.1483 128.922 cv
18.8603 129.306 18.7163 129.754 18.7163 130.282 cv
18.7163 131.162 18.9403 131.962 19.3722 132.682 cv
19.8203 133.402 20.3963 134.01 21.1003 134.522 cv
21.8043 135.034 22.6042 135.418 23.4683 135.69 cv
24.3323 135.962 25.1803 136.09 25.9803 136.09 cv
f
32.3924 124.204 mo
32.3924 125.122 32.0229 125.75 31.2724 126.074 cv
30.522 126.41 29.626 126.567 28.5844 126.567 cv
27.9348 126.567 27.33 126.511 26.7589 126.388 cv
26.1876 126.276 25.706 126.041 25.3028 125.682 cv
24.8996 125.335 24.698 124.842 24.698 124.204 cv
24.698 123.711 24.8212 123.308 25.0564 122.994 cv
25.3028 122.681 25.6052 122.446 25.986 122.278 cv
26.3668 122.121 26.7813 122.009 27.218 121.942 cv
27.6549 121.886 28.114 121.852 28.5844 121.852 cv
29.234 121.852 29.8277 121.919 30.3876 122.031 cv
30.9476 122.154 31.4292 122.39 31.81 122.737 cv
32.1908 123.084 32.3924 123.577 32.3924 124.204 cv
32.1124 124.204 mo
32.1124 123.79 31.8996 123.476 31.474 123.274 cv
31.0484 123.073 30.578 122.95 30.0628 122.905 cv
29.5476 122.86 28.9876 122.826 28.4052 122.826 cv
27.8452 122.826 27.33 122.86 26.8596 122.905 cv
26.3892 122.95 25.9524 123.073 25.5716 123.274 cv
25.1908 123.476 24.9893 123.79 24.9893 124.204 cv
24.9893 124.63 25.1908 124.943 25.5716 125.145 cv
25.9524 125.346 26.3892 125.481 26.8596 125.526 cv
27.33 125.57 27.8452 125.593 28.4052 125.593 cv
28.8308 125.593 29.2228 125.593 29.5812 125.57 cv
29.9508 125.548 30.3316 125.492 30.7236 125.402 cv
31.1157 125.313 31.4404 125.178 31.7092 124.977 cv
31.9781 124.786 32.1124 124.529 32.1124 124.204 cv
f
126.68 93.42 mo
139 93.42 li
139 95.08 li
133.82 95.08 li
133.82 108 li
131.84 108 li
131.84 95.08 li
126.68 95.08 li
126.68 93.42 li
f
147.42 98.92 mo
159.94 98.92 li
159.94 100.56 li
147.42 100.56 li
147.42 98.92 li
147.42 102.9 mo
159.94 102.9 li
159.94 104.56 li
147.42 104.56 li
147.42 102.9 li
f
175.98 95.14 mo
171 102.92 li
175.98 102.92 li
175.98 95.14 li
175.46 93.42 mo
177.94 93.42 li
177.94 102.92 li
180.02 102.92 li
180.02 104.56 li
177.94 104.56 li
177.94 108 li
175.98 108 li
175.98 104.56 li
169.4 104.56 li
169.4 102.66 li
175.46 93.42 li
f
183.28 105.52 mo
185.34 105.52 li
185.34 108 li
183.28 108 li
183.28 105.52 li
f
191.339 106.34 mo
198.219 106.34 li
198.219 108 li
188.959 108 li
188.959 106.34 li
189.699 105.58 190.719 104.54 192.019 103.22 cv
193.299 101.92 194.119 101.08 194.459 100.7 cv
195.099 100 195.539 99.4 195.779 98.9 cv
196.019 98.42 196.159 97.92 196.159 97.44 cv
196.159 96.68 195.879 96.04 195.339 95.56 cv
194.799 95.08 194.099 94.82 193.219 94.82 cv
192.599 94.82 191.939 94.94 191.259 95.14 cv
190.579 95.36 189.839 95.68 189.059 96.12 cv
189.059 94.12 li
189.859 93.8 190.599 93.56 191.279 93.4 cv
191.959 93.24 192.599 93.16 193.179 93.16 cv
194.679 93.16 195.879 93.54 196.779 94.3 cv
197.679 95.06 198.139 96.06 198.139 97.32 cv
198.139 97.92 198.019 98.5 197.799 99.02 cv
197.579 99.56 197.179 100.2 196.579 100.92 cv
196.419 101.12 195.899 101.66 195.019 102.56 cv
194.139 103.46 192.919 104.72 191.339 106.34 cv
f
208.539 93.42 mo
210.519 93.42 li
210.519 99.58 li
217.059 93.42 li
219.599 93.42 li
212.359 100.22 li
220.119 108 li
217.519 108 li
210.519 100.98 li
210.519 108 li
208.539 108 li
208.539 93.42 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
