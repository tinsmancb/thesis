%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cvt_mm.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: luli
%%CreationDate: 6/4/16, 1:23 PM
%%BoundingBox: 0 0 864 648
%%HiResBoundingBox: 0 0 864 648
%%CropBox: 0 0 864 648
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-02-25T19:11:50-04:00"
   xmp:CreatorTool="matplotlib 1.4.3, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -648 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 648 li
864 648 li
864 0 li
cp
clp
gsave
0 648 mo
864 648 li
864 0 li
0 0 li
cp
clp
0 648 mo
864 648 li
864 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
83.4975 569.52 mo
714.099 569.52 li
714.099 24.48 li
83.4975 24.48 li
cp
f
2 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
89.3906 77.2895 mo
92.4457 77.3752 li
94.0856 77.7614 li
97.7007 79.4344 li
98.6814 80.1638 li
101.692 82.609 li
105.471 86.7059 li
106.069 87.4567 li
106.791 88.3576 li
107.316 89.0439 li
107.87 89.7733 li
107.91 89.6017 li
107.949 88.9582 li
108.027 89.0654 li
108.949 90.3953 li
109.384 91.0388 li
112.167 95.5862 li
112.875 96.8732 li
113.669 98.3103 li
114.501 99.8976 li
115.313 101.485 li
116.931 104.767 li
117.37 105.668 li
123.198 118.795 li
124.096 120.983 li
124.878 122.892 li
125.7 124.93 li
126.481 126.881 li
127.809 130.271 li
139.354 161.652 li
140.015 163.496 li
143.595 173.706 li
144.476 176.28 li
160.477 222.226 li
170.896 251.054 li
171.664 253.071 li
174.716 261.136 li
175.559 263.281 li
176.698 266.177 li
177.786 268.965 li
179.106 272.311 li
180.402 275.507 li
181.231 277.566 li
183.34 282.714 li
184.254 284.902 li
194.299 307.725 li
194.751 308.69 li
196.212 311.843 li
196.747 312.937 li
198.076 315.704 li
198.567 316.712 li
199.545 318.729 li
200.254 320.166 li
201.05 321.753 li
202.079 323.791 li
202.726 325.056 li
203.329 326.236 li
205.32 330.097 li
206.046 331.448 li
207.04 333.293 li
209.22 337.326 li
212.259 342.731 li
212.822 343.739 li
219.291 354.614 li
219.638 355.15 li
228.311 368.364 li
229.172 369.608 li
229.979 370.766 li
230.48 371.452 li
231.132 372.375 li
231.781 373.276 li
233.71 375.914 li
234.391 376.858 li
235.052 377.716 li
235.474 378.273 li
236.166 379.174 li
236.816 380.032 li
237.503 380.912 li
239.326 383.25 li
239.854 383.936 li
248.398 394.146 li
250.113 396.077 li
250.503 396.506 li
258.431 404.893 li
258.734 405.193 li
261.234 407.681 li
261.507 407.938 li
262.009 408.41 li
263.658 410.019 li
263.93 410.255 li
265.62 411.864 li
265.936 412.143 li
266.363 412.529 li
268.106 414.116 li
268.381 414.352 li
269.114 415.017 li
269.46 415.317 li
270.191 415.982 li
270.61 416.347 li
271.338 416.99 li
271.77 417.355 li
272.351 417.848 li
273.484 418.814 li
274.066 419.285 li
274.919 420.015 li
275.343 420.358 li
276 420.916 li
276.388 421.216 li
276.849 421.602 li
277.575 422.203 li
278.204 422.696 li
278.593 423.018 li
279.065 423.382 li
279.41 423.661 li
279.808 423.961 li
280.195 424.283 li
280.735 424.691 li
281.322 425.163 li
281.863 425.57 li
282.287 425.913 li
282.754 426.257 li
283.41 426.771 li
284.102 427.286 li
284.615 427.672 li
285.21 428.101 li
285.56 428.38 li
286.306 428.916 li
286.736 429.238 li
287.362 429.689 li
287.791 430.01 li
288.601 430.589 li
289.148 430.997 li
290.148 431.705 li
290.661 432.07 li
291.565 432.692 li
291.996 432.992 li
293.129 433.764 li
293.517 434.043 li
294.137 434.45 li
294.6 434.772 li
296.08 435.759 li
296.538 436.081 li
297.72 436.831 li
298.103 437.089 li
308.266 443.374 li
308.468 443.481 li
316.09 447.749 li
316.32 447.857 li
316.868 448.157 li
317.093 448.264 li
318.467 448.993 li
318.688 449.101 li
319.315 449.444 li
319.537 449.551 li
319.949 449.766 li
320.162 449.873 li
321.267 450.452 li
321.513 450.559 li
322.379 451.01 li
322.624 451.117 li
323.791 451.718 li
324.036 451.825 li
325.269 452.447 li
325.509 452.554 li
325.888 452.747 li
326.133 452.854 li
326.63 453.112 li
326.896 453.219 li
327.799 453.669 li
328.036 453.777 li
328.504 454.013 li
328.768 454.12 li
329.935 454.678 li
330.196 454.785 li
330.627 454.999 li
330.885 455.107 li
331.37 455.343 li
331.625 455.45 li
332.245 455.75 li
332.496 455.857 li
332.947 456.072 li
333.195 456.179 li
333.902 456.501 li
334.147 456.608 li
334.501 456.78 li
334.781 456.887 li
335.285 457.123 li
335.531 457.23 li
336.25 457.552 li
336.53 457.659 li
336.803 457.788 li
337.068 457.895 li
337.587 458.131 li
337.85 458.238 li
338.689 458.603 li
338.959 458.71 li
339.196 458.817 li
339.461 458.925 li
339.731 459.053 li
340.019 459.161 li
340.306 459.289 li
340.571 459.397 li
340.859 459.525 li
341.116 459.633 li
341.502 459.804 li
341.792 459.911 li
342.122 460.062 li
342.387 460.169 li
342.705 460.297 li
343.121 460.469 li
343.411 460.576 li
343.959 460.812 li
344.251 460.92 li
344.476 461.005 li
345.452 461.413 li
345.762 461.52 li
346.045 461.649 li
346.342 461.756 li
346.617 461.863 li
347.069 462.056 li
347.374 462.164 li
347.674 462.292 li
347.972 462.4 li
348.418 462.593 li
348.716 462.7 li
348.991 462.807 li
349.281 462.914 li
349.576 463.043 li
349.891 463.15 li
350.184 463.279 li
350.494 463.386 li
350.784 463.515 li
351.107 463.622 li
351.281 463.708 li
351.599 463.815 li
351.899 463.944 li
352.22 464.051 li
352.479 464.158 li
352.81 464.266 li
352.992 464.352 li
353.337 464.459 li
353.65 464.587 li
353.998 464.695 li
354.228 464.802 li
354.56 464.909 li
354.823 465.016 li
355.151 465.124 li
355.458 465.252 li
355.799 465.36 li
355.938 465.424 li
356.286 465.531 li
356.588 465.66 li
356.914 465.767 li
357.146 465.853 li
357.449 465.96 li
357.724 466.068 li
358.046 466.175 li
358.296 466.282 li
358.639 466.389 li
358.912 466.496 li
359.227 466.604 li
359.522 466.732 li
359.86 466.84 li
360.127 466.947 li
360.44 467.054 li
360.753 467.183 li
361.066 467.29 li
361.288 467.376 li
361.595 467.483 li
361.838 467.59 li
362.163 467.698 li
362.478 467.826 li
362.794 467.934 li
363.109 468.062 li
363.419 468.17 li
363.687 468.277 li
363.994 468.384 li
364.305 468.513 li
364.612 468.62 li
364.875 468.727 li
365.202 468.835 li
365.465 468.942 li
365.768 469.049 li
366.03 469.156 li
366.33 469.264 li
366.587 469.371 li
366.91 469.478 li
367.167 469.585 li
367.49 469.693 li
367.722 469.8 li
368.06 469.907 li
368.313 470.014 li
368.63 470.122 li
368.88 470.229 li
369.195 470.336 li
369.445 470.443 li
369.758 470.551 li
369.985 470.636 li
370.273 470.744 li
370.542 470.851 li
370.853 470.958 li
371.054 471.044 li
371.382 471.151 li
371.607 471.237 li
371.91 471.344 li
372.174 471.451 li
372.5 471.559 li
372.772 471.666 li
373.08 471.773 li
373.347 471.88 li
373.678 471.988 li
373.882 472.073 li
374.207 472.181 li
374.432 472.266 li
374.755 472.374 li
374.997 472.481 li
375.343 472.588 li
375.542 472.674 li
375.882 472.781 li
376.104 472.867 li
376.442 472.974 li
376.639 473.06 li
376.975 473.167 li
377.194 473.253 li
377.53 473.36 li
377.744 473.446 li
378.077 473.553 li
378.294 473.639 li
378.622 473.747 li
378.894 473.854 li
379.225 473.961 li
379.436 474.047 li
379.782 474.154 li
379.994 474.24 li
380.357 474.347 li
380.604 474.454 li
380.962 474.562 li
381.248 474.669 li
381.588 474.776 li
381.813 474.862 li
382.153 474.969 li
382.378 475.055 li
382.721 475.162 li
382.932 475.248 li
383.311 475.355 li
383.54 475.441 li
383.881 475.548 li
384.07 475.613 li
384.406 475.72 li
384.633 475.806 li
385.006 475.913 li
385.21 475.999 li
385.584 476.106 li
385.77 476.17 li
386.118 476.278 li
386.34 476.363 li
386.688 476.471 li
386.87 476.535 li
387.221 476.642 li
387.4 476.707 li
387.748 476.814 li
387.927 476.878 li
388.288 476.985 li
388.467 477.05 li
388.81 477.157 li
389.006 477.221 li
389.347 477.329 li
389.579 477.414 li
389.952 477.522 li
390.126 477.586 li
390.482 477.693 li
390.694 477.779 li
391.08 477.886 li
391.254 477.951 li
391.622 478.058 li
391.796 478.122 li
392.177 478.23 li
392.369 478.294 li
392.719 478.401 li
392.896 478.466 li
393.284 478.573 li
393.479 478.637 li
393.849 478.744 li
394.041 478.809 li
394.427 478.916 li
394.621 478.98 li
394.985 479.088 li
395.171 479.152 li
395.555 479.259 li
395.744 479.323 li
396.14 479.431 li
396.314 479.495 li
396.702 479.602 li
396.909 479.667 li
397.282 479.774 li
397.487 479.838 li
397.858 479.946 li
398.024 480.01 li
398.428 480.117 li
398.597 480.181 li
399.013 480.289 li
399.194 480.353 li
399.593 480.46 li
399.757 480.525 li
400.168 480.632 li
400.365 480.696 li
400.761 480.804 li
400.92 480.868 li
401.344 480.975 li
401.525 481.039 li
401.944 481.147 li
402.123 481.211 li
402.506 481.318 li
402.701 481.383 li
403.117 481.49 li
403.309 481.554 li
403.705 481.662 li
403.846 481.704 li
404.234 481.812 li
404.416 481.876 li
404.865 481.983 li
405.059 482.048 li
405.493 482.155 li
405.685 482.219 li
406.116 482.326 li
406.308 482.391 li
406.736 482.498 li
406.931 482.562 li
407.37 482.67 li
407.526 482.713 li
407.922 482.82 li
408.094 482.884 li
408.548 482.991 li
408.717 483.056 li
409.171 483.163 li
409.34 483.227 li
409.801 483.335 li
410.005 483.399 li
410.434 483.506 li
410.618 483.571 li
411.08 483.678 li
411.264 483.742 li
411.723 483.849 li
411.89 483.914 li
412.359 484.021 li
412.53 484.085 li
412.997 484.193 li
413.148 484.236 li
413.572 484.343 li
413.724 484.386 li
414.142 484.493 li
414.321 484.557 li
414.803 484.664 li
414.997 484.729 li
415.454 484.836 li
415.635 484.9 li
416.115 485.008 li
416.271 485.051 li
416.705 485.158 li
416.897 485.222 li
417.389 485.329 li
417.583 485.394 li
418.067 485.501 li
418.264 485.565 li
418.756 485.673 li
418.917 485.716 li
419.116 485.78 li
419.598 485.887 li
419.747 485.93 li
420.194 486.037 li
420.36 486.08 li
420.811 486.187 li
420.963 486.23 li
421.429 486.338 li
421.593 486.38 li
421.762 486.423 li
422.179 486.531 li
422.33 486.574 li
422.797 486.681 li
422.963 486.724 li
423.412 486.831 li
423.616 486.895 li
424.116 487.003 li
424.285 487.045 li
424.734 487.153 li
424.903 487.196 li
425.347 487.303 li
425.501 487.346 li
425.96 487.453 li
426.169 487.517 li
426.663 487.625 li
426.885 487.689 li
427.392 487.796 li
427.63 487.861 li
428.124 487.968 li
428.437 488.054 li
428.934 488.161 li
429.204 488.225 li
429.685 488.332 li
430.001 488.418 li
430.525 488.525 li
430.78 488.59 li
431.259 488.697 li
431.58 488.783 li
432.099 488.89 li
432.362 488.954 li
432.851 489.062 li
433.113 489.126 li
433.608 489.233 li
433.941 489.319 li
434.468 489.426 li
434.839 489.512 li
435.373 489.619 li
435.605 489.684 li
436.14 489.791 li
436.471 489.877 li
437.003 489.984 li
437.374 490.07 li
437.908 490.177 li
438.216 490.263 li
438.799 490.37 li
439.069 490.435 li
439.583 490.542 li
439.856 490.606 li
440.395 490.713 li
440.733 490.799 li
441.311 490.906 li
441.649 490.992 li
442.254 491.099 li
442.595 491.185 li
443.198 491.292 li
443.463 491.357 li
444.033 491.464 li
444.366 491.55 li
444.958 491.657 li
445.324 491.743 li
445.889 491.85 li
446.152 491.915 li
446.742 492.022 li
447.004 492.086 li
447.592 492.193 li
447.884 492.258 li
448.437 492.365 li
448.694 492.429 li
449.307 492.537 li
449.572 492.601 li
450.198 492.708 li
450.457 492.773 li
451.116 492.88 li
451.375 492.944 li
452.026 493.051 li
452.314 493.116 li
452.929 493.223 li
453.222 493.287 li
453.863 493.395 li
454.087 493.437 li
454.692 493.545 li
454.947 493.609 li
455.643 493.716 li
455.863 493.759 li
456.463 493.866 li
456.688 493.909 li
457.341 494.017 li
457.56 494.06 li
458.214 494.167 li
458.496 494.231 li
459.205 494.338 li
459.45 494.381 li
460.128 494.489 li
460.403 494.553 li
461.178 494.66 li
461.432 494.703 li
462.116 494.81 li
462.421 494.875 li
463.163 494.982 li
463.41 495.025 li
464.086 495.132 li
464.3 495.175 li
464.971 495.282 li
465.213 495.325 li
465.912 495.432 li
466.18 495.497 li
466.934 495.604 li
467.173 495.647 li
467.862 495.754 li
468.134 495.818 li
468.909 495.926 li
469.141 495.969 li
469.794 496.076 li
469.998 496.119 li
470.7 496.226 li
470.992 496.29 li
471.721 496.398 li
471.981 496.462 li
472.755 496.569 li
473.025 496.633 li
473.787 496.741 li
474.085 496.805 li
474.819 496.912 li
475.053 496.955 li
475.722 497.063 li
475.956 497.105 li
476.647 497.213 li
476.88 497.256 li
477.573 497.363 li
477.803 497.406 li
478.486 497.513 li
478.711 497.556 li
479.43 497.663 li
479.629 497.706 li
480.363 497.813 li
480.565 497.856 li
481.289 497.963 li
481.516 498.006 li
482.214 498.114 li
482.406 498.156 li
483.158 498.264 li
483.41 498.307 li
484.116 498.414 li
484.341 498.457 li
485.075 498.564 li
485.327 498.607 li
486.056 498.714 li
486.25 498.757 li
486.999 498.864 li
487.219 498.907 li
487.966 499.014 li
488.16 499.057 li
488.959 499.165 li
489.146 499.207 li
489.936 499.315 li
490.152 499.358 li
490.914 499.465 li
491.103 499.508 li
491.913 499.615 li
492.1 499.658 li
492.902 499.765 li
493.114 499.808 li
493.891 499.915 li
494.1 499.958 li
494.872 500.065 li
495.086 500.108 li
495.868 500.216 li
496.085 500.259 li
496.882 500.366 li
497.127 500.409 li
497.921 500.516 li
498.159 500.559 li
498.976 500.666 li
499.21 500.709 li
500.05 500.816 li
500.262 500.859 li
501.122 500.966 li
501.332 501.009 li
502.21 501.117 li
502.414 501.159 li
503.289 501.267 li
503.468 501.31 li
504.339 501.417 li
504.54 501.46 li
505.428 501.567 li
505.63 501.61 li
506.498 501.717 li
506.699 501.76 li
507.62 501.867 li
507.888 501.91 li
508.702 502.017 li
508.899 502.06 li
509.817 502.168 li
510.024 502.21 li
510.945 502.318 li
511.177 502.361 li
515.049 502.854 li
515.291 502.897 li
516.131 503.004 li
516.388 503.047 li
517.246 503.154 li
517.541 503.197 li
518.409 503.304 li
518.779 503.369 li
519.758 503.476 li
520.172 503.54 li
521.115 503.648 li
521.551 503.712 li
522.502 503.819 li
522.898 503.884 li
523.837 503.991 li
524.316 504.055 li
525.227 504.162 li
525.718 504.227 li
526.669 504.334 li
527.242 504.42 li
528.223 504.527 li
528.818 504.613 li
529.825 504.72 li
530.433 504.806 li
531.406 504.913 li
531.906 504.977 li
532.915 505.085 li
533.571 505.171 li
534.527 505.278 li
535.046 505.342 li
536.02 505.449 li
536.618 505.535 li
537.682 505.642 li
538.371 505.728 li
539.372 505.835 li
540.068 505.921 li
541.082 506.029 li
541.791 506.114 li
542.815 506.222 li
543.612 506.329 li
544.667 506.436 li
545.328 506.5 li
546.4 506.608 li
547.06 506.693 li
548.226 506.801 li
549.061 506.908 li
550.239 507.015 li
551.079 507.122 li
552.259 507.23 li
552.935 507.315 li
554.126 507.423 li
554.973 507.53 li
556.164 507.637 li
557.039 507.745 li
558.268 507.852 li
559.15 507.959 li
560.376 508.066 li
561.173 508.152 li
562.233 508.259 li
563.03 508.345 li
564.183 508.452 li
564.447 508.495 li
564.629 508.345 li
565.784 508.452 li
566.493 508.517 li
567.56 508.645 li
568.72 508.753 li
569.616 508.86 li
570.854 508.967 li
571.465 509.01 li
572.655 509.117 li
573.402 509.203 li
574.603 509.31 li
575.15 509.375 li
576.353 509.482 li
576.931 509.546 li
578.19 509.654 li
578.729 509.718 li
579.897 509.825 li
580.329 509.868 li
581.706 509.975 li
582.051 510.018 li
583.285 510.125 li
583.658 510.168 li
584.881 510.276 li
585.28 510.318 li
586.488 510.426 li
586.854 510.469 li
588.072 510.576 li
588.312 510.597 li
589.492 510.705 li
589.783 510.747 li
591.066 510.855 li
591.324 510.898 li
592.676 511.005 li
592.93 511.048 li
594.315 511.155 li
594.507 511.176 li
598.003 511.284 li
599.597 511.412 li
601.07 511.52 li
603.086 511.713 li
604.458 511.82 li
605.134 511.863 li
606.516 511.97 li
607.455 512.056 li
608.822 512.163 li
609.763 512.249 li
611.122 512.356 li
612.166 512.442 li
613.307 512.528 li
/1 
[/DeviceCMYK] /CSA add_res
.930816 .793027 0 0 cmyk
@
1 lw
0 lj
83.4975 24.48 mo
714.099 24.48 li
1 /0 /CSD get_res sepcs
1 sep
@
714.099 569.52 mo
714.099 24.48 li
@
83.4975 569.52 mo
714.099 569.52 li
@
83.4975 569.52 mo
83.4975 24.48 li
@
83.4975 569.52 mo
83.4975 554.52 li
f
2 lw
0 lc
1 lj
83.4975 569.52 mo
83.4975 554.52 li
@
83.4975 24.48 mo
83.4975 39.48 li
f
83.4975 24.48 mo
83.4975 39.48 li
@
85.3468 576.209 mo
83.9188 576.209 82.8548 576.909 82.1268 578.309 cv
81.3988 579.709 81.0628 581.809 81.0628 584.609 cv
81.0628 587.409 81.3988 589.509 82.1268 590.909 cv
82.8548 592.309 83.9188 593.009 85.3468 593.009 cv
86.7748 593.009 87.8388 592.309 88.5668 590.909 cv
89.2668 589.509 89.6308 587.409 89.6308 584.609 cv
89.6308 581.809 89.2668 579.709 88.5668 578.309 cv
87.8388 576.909 86.7748 576.209 85.3468 576.209 cv
85.3468 574.025 mo
87.6148 574.025 89.3508 574.949 90.5828 576.741 cv
91.7868 578.561 92.4028 581.193 92.4028 584.609 cv
92.4028 588.053 91.7868 590.685 90.5828 592.477 cv
89.3508 594.269 87.6148 595.165 85.3468 595.165 cv
83.0508 595.165 81.2868 594.269 80.0828 592.477 cv
78.8788 590.685 78.2908 588.053 78.2908 584.609 cv
78.2908 581.193 78.8788 578.561 80.0828 576.741 cv
81.2868 574.949 83.0508 574.025 85.3468 574.025 cv
f
209.618 569.52 mo
209.618 554.52 li
f
209.618 569.52 mo
209.618 554.52 li
@
209.618 24.48 mo
209.618 39.48 li
f
209.618 24.48 mo
209.618 39.48 li
@
196.837 574.389 mo
207.673 574.389 li
207.673 576.713 li
199.357 576.713 li
199.357 581.725 li
199.749 581.585 200.169 581.473 200.561 581.417 cv
200.953 581.361 201.373 581.305 201.765 581.305 cv
204.033 581.305 205.825 581.949 207.169 583.181 cv
208.513 584.441 209.185 586.121 209.185 588.249 cv
209.185 590.461 208.485 592.169 207.113 593.373 cv
205.741 594.577 203.809 595.165 201.345 595.165 cv
200.477 595.165 199.609 595.081 198.713 594.969 cv
197.817 594.829 196.921 594.633 195.969 594.325 cv
195.969 591.553 li
196.781 592.001 197.621 592.337 198.517 592.561 cv
199.385 592.785 200.309 592.869 201.289 592.869 cv
202.857 592.869 204.117 592.477 205.041 591.637 cv
205.937 590.797 206.413 589.677 206.413 588.249 cv
206.413 586.849 205.937 585.729 205.041 584.889 cv
204.117 584.049 202.857 583.629 201.289 583.629 cv
200.561 583.629 199.805 583.713 199.077 583.881 cv
198.349 584.049 197.593 584.301 196.837 584.637 cv
196.837 574.389 li
f
220.525 576.209 mo
219.097 576.209 218.033 576.909 217.305 578.309 cv
216.577 579.709 216.241 581.809 216.241 584.609 cv
216.241 587.409 216.577 589.509 217.305 590.909 cv
218.033 592.309 219.097 593.009 220.525 593.009 cv
221.953 593.009 223.017 592.309 223.745 590.909 cv
224.445 589.509 224.809 587.409 224.809 584.609 cv
224.809 581.809 224.445 579.709 223.745 578.309 cv
223.017 576.909 221.953 576.209 220.525 576.209 cv
220.525 574.025 mo
222.793 574.025 224.529 574.949 225.761 576.741 cv
226.965 578.561 227.581 581.193 227.581 584.609 cv
227.581 588.053 226.965 590.685 225.761 592.477 cv
224.529 594.269 222.793 595.165 220.525 595.165 cv
218.229 595.165 216.465 594.269 215.261 592.477 cv
214.057 590.685 213.469 588.053 213.469 584.609 cv
213.469 581.193 214.057 578.561 215.261 576.741 cv
216.465 574.949 218.229 574.025 220.525 574.025 cv
f
335.738 569.52 mo
335.738 554.52 li
f
335.738 569.52 mo
335.738 554.52 li
@
335.738 24.48 mo
335.738 39.48 li
f
335.738 24.48 mo
335.738 39.48 li
@
314.96 592.477 mo
319.468 592.477 li
319.468 576.909 li
314.568 577.889 li
314.568 575.369 li
319.44 574.389 li
322.212 574.389 li
322.212 592.477 li
326.72 592.477 li
326.72 594.801 li
314.96 594.801 li
314.96 592.477 li
f
338.2 576.209 mo
336.772 576.209 335.708 576.909 334.98 578.309 cv
334.252 579.709 333.916 581.809 333.916 584.609 cv
333.916 587.409 334.252 589.509 334.98 590.909 cv
335.708 592.309 336.772 593.009 338.2 593.009 cv
339.628 593.009 340.692 592.309 341.42 590.909 cv
342.12 589.509 342.484 587.409 342.484 584.609 cv
342.484 581.809 342.12 579.709 341.42 578.309 cv
340.692 576.909 339.628 576.209 338.2 576.209 cv
338.2 574.025 mo
340.468 574.025 342.204 574.949 343.436 576.741 cv
344.64 578.561 345.256 581.193 345.256 584.609 cv
345.256 588.053 344.64 590.685 343.436 592.477 cv
342.204 594.269 340.468 595.165 338.2 595.165 cv
335.904 595.165 334.14 594.269 332.936 592.477 cv
331.732 590.685 331.144 588.053 331.144 584.609 cv
331.144 581.193 331.732 578.561 332.936 576.741 cv
334.14 574.949 335.904 574.025 338.2 574.025 cv
f
356.008 576.209 mo
354.58 576.209 353.516 576.909 352.788 578.309 cv
352.06 579.709 351.724 581.809 351.724 584.609 cv
351.724 587.409 352.06 589.509 352.788 590.909 cv
353.516 592.309 354.58 593.009 356.008 593.009 cv
357.436 593.009 358.5 592.309 359.228 590.909 cv
359.928 589.509 360.292 587.409 360.292 584.609 cv
360.292 581.809 359.928 579.709 359.228 578.309 cv
358.5 576.909 357.436 576.209 356.008 576.209 cv
356.008 574.025 mo
358.276 574.025 360.012 574.949 361.244 576.741 cv
362.448 578.561 363.064 581.193 363.064 584.609 cv
363.064 588.053 362.448 590.685 361.244 592.477 cv
360.012 594.269 358.276 595.165 356.008 595.165 cv
353.712 595.165 351.948 594.269 350.744 592.477 cv
349.54 590.685 348.952 588.053 348.952 584.609 cv
348.952 581.193 349.54 578.561 350.744 576.741 cv
351.948 574.949 353.712 574.025 356.008 574.025 cv
f
461.859 569.52 mo
461.859 554.52 li
f
461.859 569.52 mo
461.859 554.52 li
@
461.859 24.48 mo
461.859 39.48 li
f
461.859 24.48 mo
461.859 39.48 li
@
441.081 592.477 mo
445.589 592.477 li
445.589 576.909 li
440.689 577.889 li
440.689 575.369 li
445.561 574.389 li
448.333 574.389 li
448.333 592.477 li
452.841 592.477 li
452.841 594.801 li
441.081 594.801 li
441.081 592.477 li
f
458.441 574.389 mo
469.277 574.389 li
469.277 576.713 li
460.961 576.713 li
460.961 581.725 li
461.353 581.585 461.773 581.473 462.165 581.417 cv
462.557 581.361 462.977 581.305 463.369 581.305 cv
465.637 581.305 467.429 581.949 468.773 583.181 cv
470.117 584.441 470.789 586.121 470.789 588.249 cv
470.789 590.461 470.089 592.169 468.717 593.373 cv
467.345 594.577 465.413 595.165 462.949 595.165 cv
462.081 595.165 461.213 595.081 460.317 594.969 cv
459.421 594.829 458.525 594.633 457.573 594.325 cv
457.573 591.553 li
458.385 592.001 459.225 592.337 460.121 592.561 cv
460.989 592.785 461.913 592.869 462.893 592.869 cv
464.461 592.869 465.721 592.477 466.645 591.637 cv
467.541 590.797 468.017 589.677 468.017 588.249 cv
468.017 586.849 467.541 585.729 466.645 584.889 cv
465.721 584.049 464.461 583.629 462.893 583.629 cv
462.165 583.629 461.409 583.713 460.681 583.881 cv
459.953 584.049 459.197 584.301 458.441 584.637 cv
458.441 574.389 li
f
482.129 576.209 mo
480.701 576.209 479.637 576.909 478.909 578.309 cv
478.181 579.709 477.845 581.809 477.845 584.609 cv
477.845 587.409 478.181 589.509 478.909 590.909 cv
479.637 592.309 480.701 593.009 482.129 593.009 cv
483.557 593.009 484.621 592.309 485.349 590.909 cv
486.049 589.509 486.413 587.409 486.413 584.609 cv
486.413 581.809 486.049 579.709 485.349 578.309 cv
484.621 576.909 483.557 576.209 482.129 576.209 cv
482.129 574.025 mo
484.397 574.025 486.133 574.949 487.365 576.741 cv
488.569 578.561 489.185 581.193 489.185 584.609 cv
489.185 588.053 488.569 590.685 487.365 592.477 cv
486.133 594.269 484.397 595.165 482.129 595.165 cv
479.833 595.165 478.069 594.269 476.865 592.477 cv
475.661 590.685 475.073 588.053 475.073 584.609 cv
475.073 581.193 475.661 578.561 476.865 576.741 cv
478.069 574.949 479.833 574.025 482.129 574.025 cv
f
587.979 569.52 mo
587.979 554.52 li
f
587.979 569.52 mo
587.979 554.52 li
@
587.979 24.48 mo
587.979 39.48 li
f
587.979 24.48 mo
587.979 39.48 li
@
568.589 592.477 mo
578.221 592.477 li
578.221 594.801 li
565.257 594.801 li
565.257 592.477 li
566.293 591.413 567.721 589.957 569.541 588.109 cv
571.333 586.289 572.481 585.113 572.957 584.581 cv
573.853 583.601 574.469 582.761 574.805 582.061 cv
575.141 581.389 575.337 580.689 575.337 580.017 cv
575.337 578.953 574.945 578.057 574.189 577.385 cv
573.433 576.713 572.453 576.349 571.221 576.349 cv
570.353 576.349 569.429 576.517 568.477 576.797 cv
567.525 577.105 566.489 577.553 565.397 578.169 cv
565.397 575.369 li
566.517 574.921 567.553 574.585 568.505 574.361 cv
569.457 574.137 570.353 574.025 571.165 574.025 cv
573.265 574.025 574.945 574.557 576.205 575.621 cv
577.465 576.685 578.109 578.085 578.109 579.849 cv
578.109 580.689 577.941 581.501 577.633 582.229 cv
577.325 582.985 576.765 583.881 575.925 584.889 cv
575.701 585.169 574.973 585.925 573.741 587.185 cv
572.509 588.445 570.801 590.209 568.589 592.477 cv
f
589.925 576.209 mo
588.497 576.209 587.433 576.909 586.705 578.309 cv
585.977 579.709 585.641 581.809 585.641 584.609 cv
585.641 587.409 585.977 589.509 586.705 590.909 cv
587.433 592.309 588.497 593.009 589.925 593.009 cv
591.353 593.009 592.417 592.309 593.145 590.909 cv
593.845 589.509 594.209 587.409 594.209 584.609 cv
594.209 581.809 593.845 579.709 593.145 578.309 cv
592.417 576.909 591.353 576.209 589.925 576.209 cv
589.925 574.025 mo
592.193 574.025 593.929 574.949 595.161 576.741 cv
596.365 578.561 596.981 581.193 596.981 584.609 cv
596.981 588.053 596.365 590.685 595.161 592.477 cv
593.929 594.269 592.193 595.165 589.925 595.165 cv
587.629 595.165 585.865 594.269 584.661 592.477 cv
583.457 590.685 582.869 588.053 582.869 584.609 cv
582.869 581.193 583.457 578.561 584.661 576.741 cv
585.865 574.949 587.629 574.025 589.925 574.025 cv
f
607.733 576.209 mo
606.305 576.209 605.241 576.909 604.513 578.309 cv
603.785 579.709 603.449 581.809 603.449 584.609 cv
603.449 587.409 603.785 589.509 604.513 590.909 cv
605.241 592.309 606.305 593.009 607.733 593.009 cv
609.161 593.009 610.225 592.309 610.953 590.909 cv
611.653 589.509 612.017 587.409 612.017 584.609 cv
612.017 581.809 611.653 579.709 610.953 578.309 cv
610.225 576.909 609.161 576.209 607.733 576.209 cv
607.733 574.025 mo
610.001 574.025 611.737 574.949 612.969 576.741 cv
614.173 578.561 614.789 581.193 614.789 584.609 cv
614.789 588.053 614.173 590.685 612.969 592.477 cv
611.737 594.269 610.001 595.165 607.733 595.165 cv
605.437 595.165 603.673 594.269 602.469 592.477 cv
601.265 590.685 600.677 588.053 600.677 584.609 cv
600.677 581.193 601.265 578.561 602.469 576.741 cv
603.673 574.949 605.437 574.025 607.733 574.025 cv
f
714.099 569.52 mo
714.099 554.52 li
f
714.099 569.52 mo
714.099 554.52 li
@
714.099 24.48 mo
714.099 39.48 li
f
714.099 24.48 mo
714.099 39.48 li
@
694.71 592.477 mo
704.342 592.477 li
704.342 594.801 li
691.378 594.801 li
691.378 592.477 li
692.414 591.413 693.842 589.957 695.662 588.109 cv
697.454 586.289 698.602 585.113 699.078 584.581 cv
699.974 583.601 700.59 582.761 700.926 582.061 cv
701.262 581.389 701.458 580.689 701.458 580.017 cv
701.458 578.953 701.066 578.057 700.31 577.385 cv
699.554 576.713 698.574 576.349 697.342 576.349 cv
696.474 576.349 695.55 576.517 694.598 576.797 cv
693.646 577.105 692.61 577.553 691.518 578.169 cv
691.518 575.369 li
692.638 574.921 693.674 574.585 694.626 574.361 cv
695.578 574.137 696.474 574.025 697.286 574.025 cv
699.386 574.025 701.066 574.557 702.326 575.621 cv
703.586 576.685 704.23 578.085 704.23 579.849 cv
704.23 580.689 704.062 581.501 703.754 582.229 cv
703.446 582.985 702.886 583.881 702.046 584.889 cv
701.822 585.169 701.094 585.925 699.862 587.185 cv
698.63 588.445 696.922 590.209 694.71 592.477 cv
f
710.166 574.389 mo
721.002 574.389 li
721.002 576.713 li
712.686 576.713 li
712.686 581.725 li
713.078 581.585 713.498 581.473 713.89 581.417 cv
714.282 581.361 714.702 581.305 715.094 581.305 cv
717.362 581.305 719.154 581.949 720.498 583.181 cv
721.842 584.441 722.514 586.121 722.514 588.249 cv
722.514 590.461 721.814 592.169 720.442 593.373 cv
719.07 594.577 717.138 595.165 714.674 595.165 cv
713.806 595.165 712.938 595.081 712.042 594.969 cv
711.146 594.829 710.25 594.633 709.298 594.325 cv
709.298 591.553 li
710.11 592.001 710.95 592.337 711.846 592.561 cv
712.714 592.785 713.638 592.869 714.618 592.869 cv
716.186 592.869 717.446 592.477 718.37 591.637 cv
719.266 590.797 719.742 589.677 719.742 588.249 cv
719.742 586.849 719.266 585.729 718.37 584.889 cv
717.446 584.049 716.186 583.629 714.618 583.629 cv
713.89 583.629 713.134 583.713 712.406 583.881 cv
711.678 584.049 710.922 584.301 710.166 584.637 cv
710.166 574.389 li
f
733.854 576.209 mo
732.426 576.209 731.362 576.909 730.634 578.309 cv
729.906 579.709 729.57 581.809 729.57 584.609 cv
729.57 587.409 729.906 589.509 730.634 590.909 cv
731.362 592.309 732.426 593.009 733.854 593.009 cv
735.282 593.009 736.346 592.309 737.074 590.909 cv
737.774 589.509 738.138 587.409 738.138 584.609 cv
738.138 581.809 737.774 579.709 737.074 578.309 cv
736.346 576.909 735.282 576.209 733.854 576.209 cv
733.854 574.025 mo
736.122 574.025 737.858 574.949 739.09 576.741 cv
740.294 578.561 740.91 581.193 740.91 584.609 cv
740.91 588.053 740.294 590.685 739.09 592.477 cv
737.858 594.269 736.122 595.165 733.854 595.165 cv
731.558 595.165 729.794 594.269 728.59 592.477 cv
727.386 590.685 726.798 588.053 726.798 584.609 cv
726.798 581.193 727.386 578.561 728.59 576.741 cv
729.794 574.949 731.558 574.025 733.854 574.025 cv
f
250.695 606.614 mo
270.407 606.614 li
270.407 609.27 li
262.119 609.27 li
262.119 629.942 li
258.951 629.942 li
258.951 609.27 li
250.695 609.27 li
250.695 606.614 li
f
288.295 620.47 mo
288.295 621.878 li
275.079 621.878 li
275.207 623.862 275.783 625.398 276.871 626.422 cv
277.927 627.446 279.399 627.958 281.319 627.958 cv
282.407 627.958 283.495 627.83 284.519 627.574 cv
285.543 627.318 286.599 626.902 287.623 626.326 cv
287.623 629.046 li
286.599 629.494 285.543 629.846 284.455 630.038 cv
283.367 630.23 282.247 630.358 281.159 630.358 cv
278.343 630.358 276.135 629.558 274.503 627.958 cv
272.871 626.358 272.071 624.15 272.071 621.366 cv
272.071 618.518 272.839 616.246 274.375 614.55 cv
275.911 612.886 278.023 612.022 280.647 612.022 cv
283.015 612.022 284.871 612.79 286.247 614.294 cv
287.591 615.83 288.295 617.878 288.295 620.47 cv
285.415 619.638 mo
285.383 618.07 284.935 616.822 284.103 615.862 cv
283.239 614.934 282.087 614.454 280.679 614.454 cv
279.079 614.454 277.799 614.934 276.839 615.83 cv
275.879 616.726 275.303 618.006 275.175 619.638 cv
285.415 619.638 li
f
306.631 615.798 mo
307.335 614.518 308.199 613.59 309.191 612.95 cv
310.183 612.342 311.367 612.022 312.743 612.022 cv
314.535 612.022 315.943 612.662 316.935 613.942 cv
317.927 615.222 318.439 617.046 318.439 619.382 cv
318.439 629.942 li
315.559 629.942 li
315.559 619.478 li
315.559 617.814 315.239 616.566 314.663 615.734 cv
314.055 614.934 313.159 614.518 311.943 614.518 cv
310.439 614.518 309.255 615.03 308.391 616.022 cv
307.527 617.014 307.111 618.358 307.111 620.054 cv
307.111 629.942 li
304.231 629.942 li
304.231 619.478 li
304.231 617.814 303.911 616.566 303.335 615.734 cv
302.727 614.934 301.799 614.518 300.583 614.518 cv
299.111 614.518 297.927 615.03 297.063 616.022 cv
296.199 617.014 295.783 618.358 295.783 620.054 cv
295.783 629.942 li
292.903 629.942 li
292.903 612.438 li
295.783 612.438 li
295.783 615.158 li
296.423 614.102 297.223 613.302 298.151 612.79 cv
299.047 612.278 300.135 612.022 301.415 612.022 cv
302.695 612.022 303.751 612.342 304.647 612.982 cv
305.543 613.622 306.183 614.582 306.631 615.798 cv
f
326.951 627.318 mo
326.951 636.566 li
324.071 636.566 li
324.071 612.438 li
326.951 612.438 li
326.951 615.094 li
327.527 614.07 328.295 613.302 329.223 612.79 cv
330.151 612.278 331.271 612.022 332.551 612.022 cv
334.663 612.022 336.391 612.886 337.735 614.55 cv
339.047 616.246 339.719 618.454 339.719 621.206 cv
339.719 623.958 339.047 626.198 337.735 627.862 cv
336.391 629.526 334.663 630.358 332.551 630.358 cv
331.271 630.358 330.151 630.102 329.223 629.622 cv
328.295 629.142 327.527 628.374 326.951 627.318 cv
336.743 621.206 mo
336.743 619.094 336.295 617.462 335.431 616.246 cv
334.535 615.03 333.351 614.422 331.847 614.422 cv
330.311 614.422 329.127 615.03 328.263 616.246 cv
327.367 617.462 326.951 619.094 326.951 621.206 cv
326.951 623.318 327.367 624.982 328.263 626.198 cv
329.127 627.414 330.311 627.99 331.847 627.99 cv
333.351 627.99 334.535 627.414 335.431 626.198 cv
336.295 624.982 336.743 623.318 336.743 621.206 cv
f
359.463 620.47 mo
359.463 621.878 li
346.247 621.878 li
346.375 623.862 346.951 625.398 348.039 626.422 cv
349.095 627.446 350.567 627.958 352.487 627.958 cv
353.575 627.958 354.663 627.83 355.687 627.574 cv
356.711 627.318 357.767 626.902 358.791 626.326 cv
358.791 629.046 li
357.767 629.494 356.711 629.846 355.623 630.038 cv
354.535 630.23 353.415 630.358 352.327 630.358 cv
349.511 630.358 347.303 629.558 345.671 627.958 cv
344.039 626.358 343.239 624.15 343.239 621.366 cv
343.239 618.518 344.007 616.246 345.543 614.55 cv
347.079 612.886 349.191 612.022 351.815 612.022 cv
354.183 612.022 356.039 612.79 357.415 614.294 cv
358.759 615.83 359.463 617.878 359.463 620.47 cv
356.583 619.638 mo
356.551 618.07 356.103 616.822 355.271 615.862 cv
354.407 614.934 353.255 614.454 351.847 614.454 cv
350.247 614.454 348.967 614.934 348.007 615.83 cv
347.047 616.726 346.471 618.006 346.343 619.638 cv
356.583 619.638 li
f
374.311 615.126 mo
373.991 614.934 373.639 614.806 373.255 614.71 cv
372.871 614.646 372.455 614.582 372.007 614.582 cv
370.375 614.582 369.127 615.126 368.263 616.182 cv
367.367 617.238 366.951 618.742 366.951 620.726 cv
366.951 629.942 li
364.071 629.942 li
364.071 612.438 li
366.951 612.438 li
366.951 615.158 li
367.527 614.102 368.327 613.302 369.287 612.79 cv
370.247 612.278 371.431 612.022 372.839 612.022 cv
373.031 612.022 373.255 612.054 373.511 612.054 cv
373.735 612.086 373.991 612.118 374.311 612.182 cv
374.311 615.126 li
f
385.287 621.142 mo
382.951 621.142 381.351 621.43 380.455 621.942 cv
379.559 622.486 379.111 623.382 379.111 624.662 cv
379.111 625.686 379.431 626.518 380.103 627.094 cv
380.775 627.702 381.703 627.99 382.855 627.99 cv
384.455 627.99 385.735 627.446 386.695 626.294 cv
387.655 625.174 388.135 623.67 388.135 621.782 cv
388.135 621.142 li
385.287 621.142 li
391.015 619.958 mo
391.015 629.942 li
388.135 629.942 li
388.135 627.286 li
387.463 628.374 386.631 629.142 385.671 629.622 cv
384.711 630.102 383.495 630.358 382.087 630.358 cv
380.295 630.358 378.855 629.878 377.799 628.886 cv
376.743 627.894 376.231 626.55 376.231 624.854 cv
376.231 622.902 376.871 621.43 378.215 620.406 cv
379.527 619.414 381.479 618.902 384.103 618.902 cv
388.135 618.902 li
388.135 618.614 li
388.135 617.302 387.687 616.278 386.823 615.542 cv
385.959 614.838 384.743 614.454 383.175 614.454 cv
382.151 614.454 381.191 614.582 380.231 614.838 cv
379.271 615.094 378.375 615.446 377.511 615.894 cv
377.511 613.238 li
378.535 612.854 379.559 612.534 380.551 612.342 cv
381.543 612.15 382.503 612.022 383.463 612.022 cv
385.991 612.022 387.879 612.694 389.127 614.006 cv
390.375 615.318 391.015 617.302 391.015 619.958 cv
f
399.783 607.478 mo
399.783 612.438 li
405.703 612.438 li
405.703 614.678 li
399.783 614.678 li
399.783 624.182 li
399.783 625.622 399.975 626.55 400.359 626.934 cv
400.743 627.35 401.543 627.542 402.759 627.542 cv
405.703 627.542 li
405.703 629.942 li
402.759 629.942 li
400.519 629.942 398.983 629.526 398.151 628.694 cv
397.319 627.862 396.903 626.358 396.903 624.182 cv
396.903 614.678 li
394.791 614.678 li
394.791 612.438 li
396.903 612.438 li
396.903 607.478 li
399.783 607.478 li
f
409.191 623.03 mo
409.191 612.438 li
412.071 612.438 li
412.071 622.934 li
412.071 624.598 412.391 625.814 413.031 626.646 cv
413.671 627.478 414.631 627.894 415.943 627.894 cv
417.479 627.894 418.727 627.414 419.623 626.422 cv
420.519 625.43 420.967 624.086 420.967 622.358 cv
420.967 612.438 li
423.847 612.438 li
423.847 629.942 li
420.967 629.942 li
420.967 627.254 li
420.263 628.342 419.431 629.11 418.535 629.622 cv
417.607 630.102 416.551 630.358 415.335 630.358 cv
413.319 630.358 411.783 629.75 410.759 628.502 cv
409.703 627.286 409.191 625.462 409.191 623.03 cv
f
439.911 615.126 mo
439.591 614.934 439.239 614.806 438.855 614.71 cv
438.471 614.646 438.055 614.582 437.607 614.582 cv
435.975 614.582 434.727 615.126 433.863 616.182 cv
432.967 617.238 432.551 618.742 432.551 620.726 cv
432.551 629.942 li
429.671 629.942 li
429.671 612.438 li
432.551 612.438 li
432.551 615.158 li
433.127 614.102 433.927 613.302 434.887 612.79 cv
435.847 612.278 437.031 612.022 438.439 612.022 cv
438.631 612.022 438.855 612.054 439.111 612.054 cv
439.335 612.086 439.591 612.118 439.911 612.182 cv
439.911 615.126 li
f
457.895 620.47 mo
457.895 621.878 li
444.679 621.878 li
444.807 623.862 445.383 625.398 446.471 626.422 cv
447.527 627.446 448.999 627.958 450.919 627.958 cv
452.007 627.958 453.095 627.83 454.119 627.574 cv
455.143 627.318 456.199 626.902 457.223 626.326 cv
457.223 629.046 li
456.199 629.494 455.143 629.846 454.055 630.038 cv
452.967 630.23 451.847 630.358 450.759 630.358 cv
447.943 630.358 445.735 629.558 444.103 627.958 cv
442.471 626.358 441.671 624.15 441.671 621.366 cv
441.671 618.518 442.439 616.246 443.975 614.55 cv
445.511 612.886 447.623 612.022 450.247 612.022 cv
452.615 612.022 454.471 612.79 455.847 614.294 cv
457.191 615.83 457.895 617.878 457.895 620.47 cv
455.015 619.638 mo
454.983 618.07 454.535 616.822 453.703 615.862 cv
452.839 614.934 451.687 614.454 450.279 614.454 cv
448.679 614.454 447.399 614.934 446.439 615.83 cv
445.479 616.726 444.903 618.006 444.775 619.638 cv
455.015 619.638 li
f
469.703 606.614 mo
489.415 606.614 li
489.415 609.27 li
481.127 609.27 li
481.127 629.942 li
477.959 629.942 li
477.959 609.27 li
469.703 609.27 li
469.703 606.614 li
f
493.063 625.974 mo
496.359 625.974 li
496.359 628.662 li
493.799 633.622 li
491.783 633.622 li
493.063 628.662 li
493.063 625.974 li
f
519.591 605.654 mo
518.182 608.086 517.159 610.454 516.487 612.79 cv
515.783 615.126 515.463 617.494 515.463 619.894 cv
515.463 622.326 515.783 624.694 516.487 627.03 cv
517.159 629.398 518.182 631.734 519.591 634.134 cv
517.094 634.134 li
515.526 631.67 514.343 629.302 513.575 626.934 cv
512.807 624.566 512.422 622.23 512.422 619.894 cv
512.422 617.59 512.807 615.254 513.575 612.886 cv
514.343 610.518 515.495 608.118 517.094 605.654 cv
519.591 605.654 li
f
525.286 606.614 mo
528.455 606.614 li
528.455 616.47 li
538.919 606.614 li
542.983 606.614 li
531.398 617.494 li
543.815 629.942 li
539.655 629.942 li
528.455 618.71 li
528.455 629.942 li
525.286 629.942 li
525.286 606.614 li
f
545.703 605.654 mo
548.199 605.654 li
549.735 608.118 550.919 610.518 551.687 612.886 cv
552.455 615.254 552.871 617.59 552.871 619.894 cv
552.871 622.23 552.455 624.566 551.687 626.934 cv
550.919 629.302 549.735 631.67 548.199 634.134 cv
545.703 634.134 li
547.079 631.734 548.103 629.398 548.807 627.03 cv
549.479 624.694 549.831 622.326 549.831 619.894 cv
549.831 617.494 549.479 615.126 548.807 612.79 cv
548.103 610.454 547.079 608.086 545.703 605.654 cv
f
83.4975 569.52 mo
98.4975 569.52 li
f
83.4975 569.52 mo
98.4975 569.52 li
@
74.2921 558.655 mo
72.8641 558.655 71.8001 559.355 71.0721 560.755 cv
70.3441 562.155 70.0081 564.255 70.0081 567.055 cv
70.0081 569.855 70.3441 571.955 71.0721 573.355 cv
71.8001 574.755 72.8641 575.455 74.2921 575.455 cv
75.7201 575.455 76.7841 574.755 77.5121 573.355 cv
78.2121 571.955 78.5761 569.855 78.5761 567.055 cv
78.5761 564.255 78.2121 562.155 77.5121 560.755 cv
76.7841 559.355 75.7201 558.655 74.2921 558.655 cv
74.2921 556.471 mo
76.5601 556.471 78.2961 557.395 79.5281 559.187 cv
80.7321 561.007 81.3481 563.639 81.3481 567.055 cv
81.3481 570.499 80.7321 573.131 79.5281 574.923 cv
78.2961 576.715 76.5601 577.611 74.2921 577.611 cv
71.9961 577.611 70.2321 576.715 69.0281 574.923 cv
67.8241 573.131 67.2361 570.499 67.2361 567.055 cv
67.2361 563.639 67.8241 561.007 69.0281 559.187 cv
70.2321 557.395 71.9961 556.471 74.2921 556.471 cv
f
83.4975 491.657 mo
98.4975 491.657 li
f
83.4975 491.657 mo
98.4975 491.657 li
@
52.282 497.06 mo
56.79 497.06 li
56.79 481.492 li
51.89 482.472 li
51.89 479.952 li
56.762 478.972 li
59.534 478.972 li
59.534 497.06 li
64.042 497.06 li
64.042 499.384 li
52.282 499.384 li
52.282 497.06 li
f
75.522 480.792 mo
74.094 480.792 73.03 481.492 72.302 482.892 cv
71.574 484.292 71.238 486.392 71.238 489.192 cv
71.238 491.992 71.574 494.092 72.302 495.492 cv
73.03 496.892 74.094 497.592 75.522 497.592 cv
76.95 497.592 78.014 496.892 78.742 495.492 cv
79.442 494.092 79.806 491.992 79.806 489.192 cv
79.806 486.392 79.442 484.292 78.742 482.892 cv
78.014 481.492 76.95 480.792 75.522 480.792 cv
75.522 478.608 mo
77.79 478.608 79.526 479.532 80.758 481.324 cv
81.962 483.144 82.578 485.776 82.578 489.192 cv
82.578 492.636 81.962 495.268 80.758 497.06 cv
79.526 498.852 77.79 499.748 75.522 499.748 cv
73.226 499.748 71.462 498.852 70.258 497.06 cv
69.054 495.268 68.466 492.636 68.466 489.192 cv
68.466 485.776 69.054 483.144 70.258 481.324 cv
71.462 479.532 73.226 478.608 75.522 478.608 cv
f
83.4975 413.794 mo
98.4975 413.794 li
f
83.4975 413.794 mo
98.4975 413.794 li
@
53.1548 419.197 mo
62.7868 419.197 li
62.7868 421.521 li
49.8228 421.521 li
49.8228 419.197 li
50.8588 418.133 52.2868 416.677 54.1068 414.829 cv
55.8988 413.009 57.0468 411.833 57.5228 411.301 cv
58.4188 410.321 59.0348 409.481 59.3708 408.781 cv
59.7068 408.109 59.9028 407.409 59.9028 406.737 cv
59.9028 405.673 59.5107 404.777 58.7548 404.105 cv
57.9988 403.433 57.0188 403.069 55.7868 403.069 cv
54.9188 403.069 53.9948 403.237 53.0428 403.517 cv
52.0908 403.825 51.0548 404.273 49.9628 404.889 cv
49.9628 402.089 li
51.0828 401.641 52.1188 401.305 53.0708 401.081 cv
54.0228 400.857 54.9188 400.745 55.7308 400.745 cv
57.8307 400.745 59.5107 401.277 60.7708 402.341 cv
62.0308 403.405 62.6748 404.805 62.6748 406.569 cv
62.6748 407.409 62.5068 408.221 62.1988 408.949 cv
61.8908 409.705 61.3307 410.601 60.4908 411.609 cv
60.2668 411.889 59.5387 412.645 58.3068 413.905 cv
57.0748 415.165 55.3668 416.929 53.1548 419.197 cv
f
74.4908 402.929 mo
73.0628 402.929 71.9988 403.629 71.2708 405.029 cv
70.5428 406.429 70.2068 408.529 70.2068 411.329 cv
70.2068 414.129 70.5428 416.229 71.2708 417.629 cv
71.9988 419.029 73.0628 419.729 74.4908 419.729 cv
75.9188 419.729 76.9828 419.029 77.7108 417.629 cv
78.4108 416.229 78.7748 414.129 78.7748 411.329 cv
78.7748 408.529 78.4108 406.429 77.7108 405.029 cv
76.9828 403.629 75.9188 402.929 74.4908 402.929 cv
74.4908 400.745 mo
76.7588 400.745 78.4948 401.669 79.7268 403.461 cv
80.9308 405.281 81.5468 407.913 81.5468 411.329 cv
81.5468 414.773 80.9308 417.405 79.7268 419.197 cv
78.4948 420.989 76.7588 421.885 74.4908 421.885 cv
72.1948 421.885 70.4308 420.989 69.2268 419.197 cv
68.0228 417.405 67.4348 414.773 67.4348 411.329 cv
67.4348 407.913 68.0228 405.281 69.2268 403.461 cv
70.4308 401.669 72.1948 400.745 74.4908 400.745 cv
f
83.4975 335.931 mo
98.4975 335.931 li
f
83.4975 335.931 mo
98.4975 335.931 li
@
59.2405 332.654 mo
60.5565 332.934 61.5925 333.522 62.3205 334.418 cv
63.0485 335.314 63.4405 336.434 63.4405 337.722 cv
63.4405 339.738 62.7405 341.306 61.3685 342.398 cv
59.9685 343.49 58.0085 344.022 55.4605 344.022 cv
54.5925 344.022 53.6965 343.938 52.8005 343.77 cv
51.9045 343.63 50.9525 343.378 50.0005 343.042 cv
50.0005 340.382 li
50.7565 340.83 51.5965 341.166 52.5205 341.39 cv
53.4165 341.614 54.3685 341.726 55.3765 341.726 cv
57.1125 341.726 58.4285 341.39 59.3245 340.718 cv
60.2205 340.046 60.6965 339.038 60.6965 337.722 cv
60.6965 336.546 60.2765 335.594 59.4365 334.922 cv
58.5965 334.25 57.4205 333.886 55.9085 333.886 cv
53.5285 333.886 li
53.5285 331.618 li
56.0205 331.618 li
57.3645 331.618 58.4005 331.366 59.1285 330.806 cv
59.8565 330.274 60.2205 329.49 60.2205 328.454 cv
60.2205 327.418 59.8285 326.606 59.1005 326.046 cv
58.3445 325.486 57.2805 325.206 55.9085 325.206 cv
55.1525 325.206 54.3405 325.29 53.4725 325.458 cv
52.6045 325.626 51.6525 325.878 50.6165 326.214 cv
50.6165 323.75 li
51.6525 323.47 52.6325 323.246 53.5565 323.106 cv
54.4525 322.966 55.3205 322.882 56.1605 322.882 cv
58.2325 322.882 59.8845 323.358 61.1165 324.31 cv
62.3485 325.262 62.9645 326.55 62.9645 328.174 cv
62.9645 329.294 62.6285 330.246 61.9845 331.03 cv
61.3405 331.814 60.4165 332.374 59.2405 332.654 cv
f
74.5845 325.066 mo
73.1565 325.066 72.0925 325.766 71.3645 327.166 cv
70.6365 328.566 70.3005 330.666 70.3005 333.466 cv
70.3005 336.266 70.6365 338.366 71.3645 339.766 cv
72.0925 341.166 73.1565 341.866 74.5845 341.866 cv
76.0125 341.866 77.0765 341.166 77.8045 339.766 cv
78.5045 338.366 78.8685 336.266 78.8685 333.466 cv
78.8685 330.666 78.5045 328.566 77.8045 327.166 cv
77.0765 325.766 76.0125 325.066 74.5845 325.066 cv
74.5845 322.882 mo
76.8525 322.882 78.5885 323.806 79.8205 325.598 cv
81.0245 327.418 81.6405 330.05 81.6405 333.466 cv
81.6405 336.91 81.0245 339.542 79.8205 341.334 cv
78.5885 343.126 76.8525 344.022 74.5845 344.022 cv
72.2885 344.022 70.5245 343.126 69.3205 341.334 cv
68.1165 339.542 67.5285 336.91 67.5285 333.466 cv
67.5285 330.05 68.1165 327.418 69.3205 325.598 cv
70.5245 323.806 72.2885 322.882 74.5845 322.882 cv
f
83.4975 258.069 mo
98.4975 258.069 li
f
83.4975 258.069 mo
98.4975 258.069 li
@
57.6909 247.791 mo
50.7189 258.683 li
57.6909 258.683 li
57.6909 247.791 li
56.9629 245.383 mo
60.4349 245.383 li
60.4349 258.683 li
63.3469 258.683 li
63.3469 260.979 li
60.4349 260.979 li
60.4349 265.795 li
57.6909 265.795 li
57.6909 260.979 li
48.4789 260.979 li
48.4789 258.319 li
56.9629 245.383 li
f
73.8189 247.203 mo
72.3909 247.203 71.3269 247.903 70.5989 249.303 cv
69.8709 250.703 69.5349 252.803 69.5349 255.603 cv
69.5349 258.403 69.8709 260.503 70.5989 261.903 cv
71.3269 263.303 72.3909 264.003 73.8189 264.003 cv
75.2469 264.003 76.3109 263.303 77.0389 261.903 cv
77.7389 260.503 78.1029 258.403 78.1029 255.603 cv
78.1029 252.803 77.7389 250.703 77.0389 249.303 cv
76.3109 247.903 75.2469 247.203 73.8189 247.203 cv
73.8189 245.019 mo
76.0869 245.019 77.8229 245.943 79.0549 247.735 cv
80.2589 249.555 80.8749 252.187 80.8749 255.603 cv
80.8749 259.047 80.2589 261.679 79.0549 263.471 cv
77.8229 265.263 76.0869 266.159 73.8189 266.159 cv
71.5229 266.159 69.7589 265.263 68.5549 263.471 cv
67.3509 261.679 66.7629 259.047 66.7629 255.603 cv
66.7629 252.187 67.3509 249.555 68.5549 247.735 cv
69.7589 245.943 71.5229 245.019 73.8189 245.019 cv
f
83.4975 180.206 mo
98.4975 180.206 li
f
83.4975 180.206 mo
98.4975 180.206 li
@
50.9121 167.52 mo
61.7481 167.52 li
61.7481 169.844 li
53.4321 169.844 li
53.4321 174.856 li
53.8241 174.716 54.2441 174.604 54.6361 174.548 cv
55.0281 174.492 55.4481 174.436 55.8401 174.436 cv
58.1081 174.436 59.9001 175.08 61.2441 176.312 cv
62.5881 177.572 63.2601 179.252 63.2601 181.38 cv
63.2601 183.592 62.5601 185.3 61.1881 186.504 cv
59.8161 187.708 57.8841 188.296 55.4201 188.296 cv
54.5521 188.296 53.6841 188.212 52.7881 188.1 cv
51.8921 187.96 50.9961 187.764 50.0441 187.456 cv
50.0441 184.684 li
50.8561 185.132 51.6961 185.468 52.5921 185.692 cv
53.4601 185.916 54.3841 186 55.3641 186 cv
56.9321 186 58.1921 185.608 59.1161 184.768 cv
60.0121 183.928 60.4881 182.808 60.4881 181.38 cv
60.4881 179.98 60.0121 178.86 59.1161 178.02 cv
58.1921 177.18 56.9321 176.76 55.3641 176.76 cv
54.6361 176.76 53.8801 176.844 53.1521 177.012 cv
52.4241 177.18 51.6681 177.432 50.9121 177.768 cv
50.9121 167.52 li
f
74.6002 169.34 mo
73.1722 169.34 72.1082 170.04 71.3802 171.44 cv
70.6522 172.84 70.3162 174.94 70.3162 177.74 cv
70.3162 180.54 70.6522 182.64 71.3802 184.04 cv
72.1082 185.44 73.1722 186.14 74.6002 186.14 cv
76.0282 186.14 77.0922 185.44 77.8202 184.04 cv
78.5202 182.64 78.8842 180.54 78.8842 177.74 cv
78.8842 174.94 78.5202 172.84 77.8202 171.44 cv
77.0922 170.04 76.0282 169.34 74.6002 169.34 cv
74.6002 167.156 mo
76.8682 167.156 78.6042 168.08 79.8362 169.872 cv
81.0402 171.692 81.6562 174.324 81.6562 177.74 cv
81.6562 181.184 81.0402 183.816 79.8362 185.608 cv
78.6042 187.4 76.8682 188.296 74.6002 188.296 cv
72.3042 188.296 70.5402 187.4 69.3362 185.608 cv
68.1322 183.816 67.5442 181.184 67.5442 177.74 cv
67.5442 174.324 68.1322 171.692 69.3362 169.872 cv
70.5402 168.08 72.3042 167.156 74.6002 167.156 cv
f
83.4975 102.343 mo
98.4975 102.343 li
f
83.4975 102.343 mo
98.4975 102.343 li
@
56.925 98.7574 mo
55.693 98.7574 54.713 99.2054 53.985 100.045 cv
53.257 100.885 52.893 102.061 52.893 103.517 cv
52.893 105.001 53.257 106.177 53.985 107.017 cv
54.713 107.857 55.693 108.277 56.925 108.277 cv
58.157 108.277 59.137 107.857 59.865 107.017 cv
60.593 106.177 60.957 105.001 60.957 103.517 cv
60.957 102.061 60.593 100.885 59.865 100.045 cv
59.137 99.2054 58.157 98.7574 56.925 98.7574 cv
62.413 90.1054 mo
62.413 92.6254 li
61.713 92.2894 61.013 92.0374 60.313 91.8694 cv
59.585 91.7014 58.885 91.6174 58.213 91.6174 cv
56.365 91.6174 54.965 92.2334 54.013 93.4654 cv
53.061 94.6974 52.501 96.5734 52.389 99.0374 cv
52.921 98.2534 53.593 97.6374 54.405 97.2174 cv
55.217 96.7974 56.113 96.5734 57.093 96.5734 cv
59.137 96.5734 60.761 97.2174 61.937 98.4494 cv
63.113 99.6814 63.729 101.389 63.729 103.517 cv
63.729 105.617 63.085 107.297 61.853 108.557 cv
60.621 109.817 58.969 110.433 56.925 110.433 cv
54.573 110.433 52.753 109.537 51.521 107.745 cv
50.261 105.953 49.645 103.321 49.645 99.8774 cv
49.645 96.6574 50.401 94.0814 51.941 92.1774 cv
53.453 90.2734 55.525 89.2934 58.101 89.2934 cv
58.773 89.2934 59.473 89.3774 60.201 89.4894 cv
60.901 89.6294 61.629 89.8254 62.413 90.1054 cv
f
74.397 91.4774 mo
72.969 91.4774 71.905 92.1774 71.177 93.5774 cv
70.449 94.9774 70.113 97.0774 70.113 99.8774 cv
70.113 102.677 70.449 104.777 71.177 106.177 cv
71.905 107.577 72.969 108.277 74.397 108.277 cv
75.825 108.277 76.889 107.577 77.617 106.177 cv
78.317 104.777 78.681 102.677 78.681 99.8774 cv
78.681 97.0774 78.317 94.9774 77.617 93.5774 cv
76.889 92.1774 75.825 91.4774 74.397 91.4774 cv
74.397 89.2934 mo
76.665 89.2934 78.401 90.2174 79.633 92.0094 cv
80.837 93.8294 81.453 96.4614 81.453 99.8774 cv
81.453 103.321 80.837 105.953 79.633 107.745 cv
78.401 109.537 76.665 110.433 74.397 110.433 cv
72.101 110.433 70.337 109.537 69.133 107.745 cv
67.929 105.953 67.341 103.321 67.341 99.8774 cv
67.341 96.4614 67.929 93.8294 69.133 92.0094 cv
70.337 90.2174 72.101 89.2934 74.397 89.2934 cv
f
83.4975 24.48 mo
98.4975 24.48 li
f
83.4975 24.48 mo
98.4975 24.48 li
@
50.3248 11.7945 mo
63.4568 11.7945 li
63.4568 12.9705 li
56.0368 32.2065 li
53.1528 32.2065 li
60.1248 14.1185 li
50.3248 14.1185 li
50.3248 11.7945 li
f
74.7408 13.6145 mo
73.3128 13.6145 72.2488 14.3145 71.5208 15.7145 cv
70.7928 17.1145 70.4568 19.2145 70.4568 22.0145 cv
70.4568 24.8145 70.7928 26.9145 71.5208 28.3145 cv
72.2488 29.7145 73.3128 30.4145 74.7408 30.4145 cv
76.1688 30.4145 77.2328 29.7145 77.9608 28.3145 cv
78.6608 26.9145 79.0248 24.8145 79.0248 22.0145 cv
79.0248 19.2145 78.6608 17.1145 77.9608 15.7145 cv
77.2328 14.3145 76.1688 13.6145 74.7408 13.6145 cv
74.7408 11.4305 mo
77.0088 11.4305 78.7448 12.3545 79.9768 14.1465 cv
81.1808 15.9665 81.7968 18.5985 81.7968 22.0145 cv
81.7968 25.4585 81.1808 28.0905 79.9768 29.8825 cv
78.7448 31.6745 77.0088 32.5705 74.7408 32.5705 cv
72.4448 32.5705 70.6808 31.6745 69.4768 29.8825 cv
68.2728 28.0905 67.6848 25.4585 67.6848 22.0145 cv
67.6848 18.5985 68.2728 15.9665 69.4768 14.1465 cv
70.6808 12.3545 72.4448 11.4305 74.7408 11.4305 cv
f
13.9146 432.329 mo
17.2426 432.329 li
16.2826 433.418 15.5466 434.538 15.0346 435.754 cv
14.5546 436.97 14.2986 438.217 14.2986 439.561 cv
14.2986 442.25 15.1306 444.297 16.7626 445.706 cv
18.3946 447.113 20.7306 447.818 23.8026 447.818 cv
26.8746 447.818 29.2426 447.113 30.8746 445.706 cv
32.5066 444.297 33.3066 442.25 33.3066 439.561 cv
33.3066 438.217 33.0826 436.97 32.5706 435.754 cv
32.0906 434.538 31.3546 433.418 30.3626 432.329 cv
33.6586 432.329 li
34.4266 433.449 34.9706 434.633 35.3226 435.849 cv
35.6746 437.065 35.8666 438.378 35.8666 439.754 cv
35.8666 443.273 34.8106 446.057 32.6666 448.105 cv
30.5226 450.154 27.5786 451.146 23.8026 451.146 cv
20.0586 451.146 17.1146 450.154 14.9386 448.105 cv
12.7946 446.057 11.7066 443.273 11.7066 439.754 cv
11.7066 438.345 11.8986 437.034 12.2506 435.818 cv
12.6346 434.602 13.1786 433.418 13.9146 432.329 cv
f
26.6506 419.626 mo
26.6506 421.962 26.9386 423.562 27.4506 424.458 cv
27.9946 425.354 28.8906 425.802 30.1706 425.802 cv
31.1946 425.802 32.0266 425.482 32.6026 424.81 cv
33.2106 424.138 33.4986 423.21 33.4986 422.058 cv
33.4986 420.458 32.9546 419.178 31.8026 418.218 cv
30.6826 417.258 29.1786 416.778 27.2906 416.778 cv
26.6506 416.778 li
26.6506 419.626 li
25.4666 413.898 mo
35.4506 413.898 li
35.4506 416.778 li
32.7946 416.778 li
33.8826 417.45 34.6506 418.282 35.1306 419.242 cv
35.6106 420.202 35.8666 421.418 35.8666 422.826 cv
35.8666 424.618 35.3866 426.058 34.3946 427.114 cv
33.4026 428.17 32.0586 428.682 30.3626 428.682 cv
28.4106 428.682 26.9386 428.042 25.9146 426.698 cv
24.9226 425.386 24.4106 423.434 24.4106 420.81 cv
24.4106 416.778 li
24.1226 416.778 li
22.8106 416.778 21.7866 417.226 21.0506 418.09 cv
20.3466 418.954 19.9626 420.17 19.9626 421.738 cv
19.9626 422.762 20.0906 423.722 20.3466 424.682 cv
20.6026 425.642 20.9546 426.538 21.4026 427.402 cv
18.7466 427.402 li
18.3626 426.378 18.0426 425.354 17.8506 424.362 cv
17.6586 423.37 17.5306 422.41 17.5306 421.45 cv
17.5306 418.922 18.2026 417.034 19.5146 415.786 cv
20.8266 414.538 22.8106 413.898 25.4666 413.898 cv
f
32.8266 405.193 mo
42.0746 405.193 li
42.0746 408.073 li
17.9466 408.073 li
17.9466 405.193 li
20.6026 405.193 li
19.5786 404.617 18.8106 403.849 18.2986 402.921 cv
17.7866 401.993 17.5306 400.873 17.5306 399.593 cv
17.5306 397.481 18.3946 395.753 20.0586 394.409 cv
21.7546 393.097 23.9626 392.425 26.7146 392.425 cv
29.4666 392.425 31.7066 393.097 33.3706 394.409 cv
35.0346 395.753 35.8666 397.481 35.8666 399.593 cv
35.8666 400.873 35.6106 401.993 35.1306 402.921 cv
34.6506 403.849 33.8826 404.617 32.8266 405.193 cv
26.7146 395.401 mo
24.6026 395.401 22.9706 395.849 21.7546 396.713 cv
20.5386 397.609 19.9306 398.793 19.9306 400.297 cv
19.9306 401.833 20.5386 403.017 21.7546 403.881 cv
22.9706 404.777 24.6026 405.193 26.7146 405.193 cv
28.8266 405.193 30.4906 404.777 31.7066 403.881 cv
32.9226 403.017 33.4986 401.833 33.4986 400.297 cv
33.4986 398.793 32.9226 397.609 31.7066 396.713 cv
30.4906 395.849 28.8266 395.401 26.7146 395.401 cv
f
26.6506 379.69 mo
26.6506 382.026 26.9386 383.626 27.4506 384.522 cv
27.9946 385.418 28.8906 385.866 30.1706 385.866 cv
31.1946 385.866 32.0266 385.546 32.6026 384.874 cv
33.2106 384.202 33.4986 383.274 33.4986 382.122 cv
33.4986 380.522 32.9546 379.242 31.8026 378.282 cv
30.6826 377.322 29.1786 376.842 27.2906 376.842 cv
26.6506 376.842 li
26.6506 379.69 li
25.4666 373.962 mo
35.4506 373.962 li
35.4506 376.842 li
32.7946 376.842 li
33.8826 377.514 34.6506 378.346 35.1306 379.306 cv
35.6106 380.266 35.8666 381.482 35.8666 382.89 cv
35.8666 384.682 35.3866 386.122 34.3946 387.178 cv
33.4026 388.234 32.0586 388.746 30.3626 388.746 cv
28.4106 388.746 26.9386 388.106 25.9146 386.762 cv
24.9226 385.45 24.4106 383.498 24.4106 380.874 cv
24.4106 376.842 li
24.1226 376.842 li
22.8106 376.842 21.7866 377.29 21.0506 378.154 cv
20.3466 379.018 19.9626 380.234 19.9626 381.802 cv
19.9626 382.826 20.0906 383.786 20.3466 384.746 cv
20.6026 385.706 20.9546 386.602 21.4026 387.466 cv
18.7466 387.466 li
18.3626 386.442 18.0426 385.418 17.8506 384.426 cv
17.6586 383.434 17.5306 382.474 17.5306 381.514 cv
17.5306 378.986 18.2026 377.098 19.5146 375.85 cv
20.8266 374.602 22.8106 373.962 25.4666 373.962 cv
f
18.6186 355.433 mo
21.3066 355.433 li
20.8586 356.265 20.5386 357.065 20.3146 357.897 cv
20.0906 358.729 19.9626 359.529 19.9626 360.361 cv
19.9626 362.217 20.5706 363.689 21.7546 364.713 cv
22.9386 365.737 24.6026 366.249 26.7146 366.249 cv
28.8586 366.249 30.5226 365.737 31.7066 364.713 cv
32.8906 363.689 33.4666 362.217 33.4666 360.361 cv
33.4666 359.529 33.3706 358.729 33.1466 357.897 cv
32.9226 357.065 32.5706 356.265 32.1226 355.433 cv
34.7786 355.433 li
35.1626 356.265 35.4506 357.097 35.6106 357.929 cv
35.7706 358.793 35.8666 359.721 35.8666 360.681 cv
35.8666 363.305 35.0666 365.417 33.4026 366.953 cv
31.7706 368.521 29.5306 369.289 26.7146 369.289 cv
23.8666 369.289 21.6266 368.521 19.9946 366.953 cv
18.3626 365.385 17.5306 363.241 17.5306 360.489 cv
17.5306 359.593 17.6266 358.729 17.8186 357.897 cv
18.0106 357.065 18.2666 356.233 18.6186 355.433 cv
f
17.9466 350.441 mo
17.9466 347.561 li
35.4506 347.561 li
35.4506 350.441 li
17.9466 350.441 li
11.1306 350.441 mo
11.1306 347.561 li
14.7786 347.561 li
14.7786 350.441 li
11.1306 350.441 li
f
12.9866 338.697 mo
17.9466 338.697 li
17.9466 332.777 li
20.1866 332.777 li
20.1866 338.697 li
29.6906 338.697 li
31.1306 338.697 32.0586 338.505 32.4426 338.121 cv
32.8586 337.737 33.0506 336.937 33.0506 335.721 cv
33.0506 332.777 li
35.4506 332.777 li
35.4506 335.721 li
35.4506 337.961 35.0346 339.497 34.2026 340.329 cv
33.3706 341.161 31.8666 341.577 29.6906 341.577 cv
20.1866 341.577 li
20.1866 343.689 li
17.9466 343.689 li
17.9466 341.577 li
12.9866 341.577 li
12.9866 338.697 li
f
26.6506 321.033 mo
26.6506 323.369 26.9386 324.969 27.4506 325.865 cv
27.9946 326.761 28.8906 327.209 30.1706 327.209 cv
31.1946 327.209 32.0266 326.889 32.6026 326.217 cv
33.2106 325.545 33.4986 324.617 33.4986 323.465 cv
33.4986 321.865 32.9546 320.585 31.8026 319.625 cv
30.6826 318.665 29.1786 318.185 27.2906 318.185 cv
26.6506 318.185 li
26.6506 321.033 li
25.4666 315.305 mo
35.4506 315.305 li
35.4506 318.185 li
32.7946 318.185 li
33.8826 318.857 34.6506 319.689 35.1306 320.649 cv
35.6106 321.609 35.8666 322.825 35.8666 324.233 cv
35.8666 326.025 35.3866 327.465 34.3946 328.521 cv
33.4026 329.577 32.0586 330.089 30.3626 330.089 cv
28.4106 330.089 26.9386 329.449 25.9146 328.105 cv
24.9226 326.793 24.4106 324.841 24.4106 322.217 cv
24.4106 318.185 li
24.1226 318.185 li
22.8106 318.185 21.7866 318.633 21.0506 319.497 cv
20.3466 320.361 19.9626 321.577 19.9626 323.145 cv
19.9626 324.169 20.0906 325.129 20.3466 326.089 cv
20.6026 327.049 20.9546 327.945 21.4026 328.809 cv
18.7466 328.809 li
18.3626 327.785 18.0426 326.761 17.8506 325.769 cv
17.6586 324.777 17.5306 323.817 17.5306 322.857 cv
17.5306 320.329 18.2026 318.441 19.5146 317.193 cv
20.8266 315.945 22.8106 315.305 25.4666 315.305 cv
f
24.8906 294.825 mo
35.4506 294.825 li
35.4506 297.705 li
24.9866 297.705 li
23.3226 297.705 22.1066 298.057 21.2746 298.697 cv
20.4426 299.337 20.0266 300.297 20.0266 301.577 cv
20.0266 303.145 20.5386 304.361 21.5306 305.257 cv
22.5226 306.153 23.8666 306.601 25.5626 306.601 cv
35.4506 306.601 li
35.4506 309.481 li
17.9466 309.481 li
17.9466 306.601 li
20.6666 306.601 li
19.6426 305.929 18.8426 305.129 18.3306 304.169 cv
17.8186 303.241 17.5306 302.153 17.5306 300.937 cv
17.5306 298.953 18.1706 297.417 19.4186 296.393 cv
20.6666 295.369 22.4906 294.825 24.8906 294.825 cv
f
18.6186 276.489 mo
21.3066 276.489 li
20.8586 277.321 20.5386 278.121 20.3146 278.953 cv
20.0906 279.785 19.9626 280.585 19.9626 281.417 cv
19.9626 283.273 20.5706 284.745 21.7546 285.769 cv
22.9386 286.793 24.6026 287.305 26.7146 287.305 cv
28.8586 287.305 30.5226 286.793 31.7066 285.769 cv
32.8906 284.745 33.4666 283.273 33.4666 281.417 cv
33.4666 280.585 33.3706 279.785 33.1466 278.953 cv
32.9226 278.121 32.5706 277.321 32.1226 276.489 cv
34.7786 276.489 li
35.1626 277.321 35.4506 278.153 35.6106 278.985 cv
35.7706 279.849 35.8666 280.777 35.8666 281.737 cv
35.8666 284.361 35.0666 286.473 33.4026 288.009 cv
31.7706 289.577 29.5306 290.345 26.7146 290.345 cv
23.8666 290.345 21.6266 289.577 19.9946 288.009 cv
18.3626 286.441 17.5306 284.297 17.5306 281.545 cv
17.5306 280.649 17.6266 279.785 17.8186 278.953 cv
18.0106 278.121 18.2666 277.289 18.6186 276.489 cv
f
25.9786 256.521 mo
27.3866 256.521 li
27.3866 269.737 li
29.3706 269.609 30.9066 269.033 31.9306 267.945 cv
32.9546 266.889 33.4666 265.417 33.4666 263.497 cv
33.4666 262.409 33.3386 261.321 33.0826 260.297 cv
32.8266 259.273 32.4106 258.217 31.8346 257.193 cv
34.5546 257.193 li
35.0026 258.217 35.3546 259.273 35.5466 260.361 cv
35.7386 261.449 35.8666 262.569 35.8666 263.657 cv
35.8666 266.473 35.0666 268.681 33.4666 270.313 cv
31.8666 271.945 29.6586 272.745 26.8746 272.745 cv
24.0266 272.745 21.7546 271.977 20.0586 270.441 cv
18.3946 268.905 17.5306 266.793 17.5306 264.169 cv
17.5306 261.801 18.2986 259.945 19.8026 258.569 cv
21.3386 257.225 23.3866 256.521 25.9786 256.521 cv
25.1466 259.401 mo
23.5786 259.433 22.3306 259.881 21.3706 260.713 cv
20.4426 261.577 19.9626 262.729 19.9626 264.137 cv
19.9626 265.737 20.4426 267.017 21.3386 267.977 cv
22.2346 268.937 23.5146 269.513 25.1466 269.641 cv
25.1466 259.401 li
f
13.9146 224.041 mo
17.2426 224.041 li
16.2826 225.129 15.5466 226.249 15.0346 227.465 cv
14.5546 228.681 14.2986 229.929 14.2986 231.273 cv
14.2986 233.961 15.1306 236.009 16.7626 237.417 cv
18.3946 238.825 20.7306 239.529 23.8026 239.529 cv
26.8746 239.529 29.2426 238.825 30.8746 237.417 cv
32.5066 236.009 33.3066 233.961 33.3066 231.273 cv
33.3066 229.929 33.0826 228.681 32.5706 227.465 cv
32.0906 226.249 31.3546 225.129 30.3626 224.041 cv
33.6586 224.041 li
34.4266 225.161 34.9706 226.345 35.3226 227.561 cv
35.6746 228.777 35.8666 230.089 35.8666 231.465 cv
35.8666 234.985 34.8106 237.769 32.6666 239.817 cv
30.5226 241.865 27.5786 242.857 23.8026 242.857 cv
20.0586 242.857 17.1146 241.865 14.9386 239.817 cv
12.7946 237.769 11.7066 234.985 11.7066 231.465 cv
11.7066 230.057 11.8986 228.745 12.2506 227.529 cv
12.6346 226.313 13.1786 225.129 13.9146 224.041 cv
f
31.4826 218.569 mo
31.4826 215.273 li
34.1706 215.273 li
39.1306 217.833 li
39.1306 219.849 li
34.1706 218.569 li
31.4826 218.569 li
f
11.1626 192.041 mo
13.5946 193.449 15.9626 194.473 18.2986 195.145 cv
20.6346 195.849 23.0026 196.169 25.4026 196.169 cv
27.8346 196.169 30.2026 195.849 32.5386 195.145 cv
34.9066 194.473 37.2426 193.449 39.6426 192.041 cv
39.6426 194.537 li
37.1786 196.105 34.8106 197.289 32.4426 198.057 cv
30.0746 198.825 27.7386 199.209 25.4026 199.209 cv
23.0986 199.209 20.7626 198.825 18.3946 198.057 cv
16.0266 197.289 13.6266 196.137 11.1626 194.537 cv
11.1626 192.041 li
f
32.8266 183.689 mo
42.0746 183.689 li
42.0746 186.569 li
17.9466 186.569 li
17.9466 183.689 li
20.6026 183.689 li
19.5786 183.113 18.8106 182.345 18.2986 181.417 cv
17.7866 180.489 17.5306 179.369 17.5306 178.089 cv
17.5306 175.977 18.3946 174.249 20.0586 172.905 cv
21.7546 171.593 23.9626 170.921 26.7146 170.921 cv
29.4666 170.921 31.7066 171.593 33.3706 172.905 cv
35.0346 174.249 35.8666 175.977 35.8666 178.089 cv
35.8666 179.369 35.6106 180.489 35.1306 181.417 cv
34.6506 182.345 33.8826 183.113 32.8266 183.689 cv
26.7146 173.897 mo
24.6026 173.897 22.9706 174.345 21.7546 175.209 cv
20.5386 176.105 19.9306 177.289 19.9306 178.793 cv
19.9306 180.329 20.5386 181.513 21.7546 182.377 cv
22.9706 183.273 24.6026 183.689 26.7146 183.689 cv
28.8266 183.689 30.4906 183.273 31.7066 182.377 cv
32.9226 181.513 33.4986 180.329 33.4986 178.793 cv
33.4986 177.289 32.9226 176.105 31.7066 175.209 cv
30.4906 174.345 28.8266 173.897 26.7146 173.897 cv
f
12.1226 166.026 mo
12.1226 152.618 li
14.7786 152.618 li
14.7786 162.858 li
21.6586 162.858 li
21.6586 153.61 li
24.3146 153.61 li
24.3146 162.858 li
35.4506 162.858 li
35.4506 166.026 li
12.1226 166.026 li
f
11.1626 148.202 mo
11.1626 145.706 li
13.6266 144.17 16.0266 142.986 18.3946 142.218 cv
20.7626 141.45 23.0986 141.034 25.4026 141.034 cv
27.7386 141.034 30.0746 141.45 32.4426 142.218 cv
34.8106 142.986 37.1786 144.17 39.6426 145.706 cv
39.6426 148.202 li
37.2426 146.826 34.9066 145.802 32.5386 145.098 cv
30.2026 144.426 27.8346 144.074 25.4026 144.074 cv
23.0026 144.074 20.6346 144.426 18.2986 145.098 cv
15.9626 145.802 13.5946 146.826 11.1626 148.202 cv
f
466.531 468.735 mo
466.531 470.015 466.755 471.167 467.267 472.127 cv
467.747 473.119 468.451 473.887 469.411 474.431 cv
470.371 474.975 471.491 475.231 472.771 475.231 cv
474.115 475.231 475.395 474.911 476.643 474.207 cv
477.891 473.503 478.947 472.575 479.843 471.423 cv
480.707 470.271 481.315 469.055 481.635 467.775 cv
481.667 467.647 481.763 467.583 481.891 467.583 cv
482.275 467.583 li
482.467 467.679 li
482.563 467.871 li
482.531 467.967 li
482.147 469.439 481.443 470.847 480.419 472.127 cv
479.363 473.439 478.115 474.463 476.643 475.199 cv
475.171 475.935 473.699 476.319 472.163 476.319 cv
470.499 476.319 468.995 475.935 467.683 475.231 cv
466.339 474.495 465.315 473.471 464.579 472.127 cv
463.843 470.783 463.491 469.279 463.491 467.583 cv
463.491 465.791 463.875 464.031 464.675 462.271 cv
465.475 460.543 466.563 458.975 467.907 457.599 cv
469.251 456.223 470.819 455.135 472.547 454.303 cv
474.275 453.503 476.035 453.087 477.827 453.087 cv
478.531 453.087 479.203 453.215 479.843 453.407 cv
480.483 453.631 481.091 453.951 481.667 454.399 cv
482.211 454.847 482.659 455.327 483.011 455.903 cv
485.539 453.151 li
485.539 453.119 485.571 453.087 485.699 453.087 cv
485.891 453.087 li
486.083 453.215 li
486.179 453.407 li
484.003 462.047 li
484.003 462.207 483.907 462.271 483.747 462.271 cv
483.171 462.271 li
482.979 462.271 482.915 462.175 482.915 461.919 cv
482.979 461.471 483.043 460.895 483.043 460.223 cv
483.043 459.199 482.851 458.207 482.499 457.279 cv
482.147 456.383 481.603 455.647 480.867 455.071 cv
480.099 454.495 479.203 454.207 478.147 454.207 cv
476.387 454.207 474.787 454.655 473.347 455.519 cv
471.907 456.415 470.691 457.567 469.667 458.975 cv
468.643 460.383 467.875 461.983 467.331 463.711 cv
466.787 465.439 466.531 467.135 466.531 468.735 cv
.930816 .793027 0 0 cmyk
f
[6 6 ] 0 dsh
89.4158 103.598 mo
93.6109 141.799 li
97.2817 173.325 li
100.952 203.117 li
104.623 231.216 li
108.294 257.66 li
111.965 282.487 li
115.635 305.737 li
119.306 327.448 li
122.977 347.659 li
126.123 363.819 li
129.269 378.93 li
132.416 393.016 li
135.562 406.102 li
138.708 418.212 li
141.855 429.371 li
145.001 439.604 li
147.623 447.44 li
150.245 454.665 li
152.867 461.291 li
155.489 467.332 li
158.111 472.804 li
160.733 477.72 li
163.355 482.095 li
165.452 485.213 li
167.55 488.002 li
169.647 490.467 li
171.745 492.617 li
173.843 494.457 li
175.94 495.997 li
178.038 497.242 li
180.135 498.2 li
182.233 498.879 li
184.33 499.285 li
186.428 499.426 li
188.525 499.309 li
190.623 498.941 li
192.721 498.33 li
194.818 497.482 li
196.916 496.406 li
199.013 495.107 li
201.635 493.184 li
204.257 490.939 li
206.879 488.388 li
209.501 485.544 li
212.647 481.764 li
215.794 477.608 li
218.94 473.1 li
224.184 465.099 li
225.757 462.593 li
226.282 462.323 li
226.806 461 li
227.33 460.544 li
233.099 450.105 li
233.623 449.43 li
234.672 447.121 li
235.721 444.963 li
236.245 443.649 li
237.294 441.918 li
239.391 437.547 li
240.44 435.79 li
241.489 433.861 li
246.733 423.496 li
248.306 420.207 li
250.928 414.848 li
251.977 412.72 li
253.025 411.206 li
254.599 408.179 li
255.123 407.653 li
256.172 406.069 li
256.696 405.611 li
259.318 399.993 li
260.891 397.159 li
261.416 396.045 li
261.94 395.239 li
262.989 392.924 li
263.513 392.434 li
264.038 391.123 li
265.086 389.697 li
266.135 387.274 li
266.66 386.766 li
267.184 385.829 li
267.708 384.635 li
269.282 382.254 li
270.855 378.671 li
272.952 376.497 li
275.574 370.985 li
276.623 369.528 li
277.672 367.21 li
278.196 366.69 li
279.245 364.322 li
279.769 363.423 li
280.294 362.211 li
280.818 361.703 li
281.342 360.648 li
281.867 360.125 li
283.44 356.678 li
283.964 355.84 li
284.489 355.35 li
285.538 353.043 li
286.586 351.468 li
287.635 350.315 li
290.782 343.624 li
292.879 341.815 li
293.403 341.119 li
294.452 339.227 li
296.55 335.847 li
297.074 335.349 li
297.599 334.361 li
298.123 333.719 li
298.647 333.299 li
299.172 332.082 li
300.221 331.211 li
300.745 330.324 li
301.269 329.929 li
301.794 329.291 li
302.842 327.489 li
303.367 326.726 li
303.891 325.656 li
304.416 325.277 li
305.464 323.354 li
305.989 322.859 li
306.513 322.019 li
308.086 321.114 li
308.611 320.023 li
309.135 319.446 li
311.233 318.174 li
312.806 316.115 li
313.855 314.632 li
316.477 312.052 li
317.001 311.693 li
318.05 311.396 li
319.099 309.64 li
319.623 309.507 li
320.147 308.765 li
320.672 308.46 li
321.196 307.872 li
321.721 306.875 li
322.245 306.618 li
322.769 305.613 li
323.294 305.236 li
323.818 304.409 li
324.867 303.866 li
325.391 302.716 li
325.916 302.104 li
326.964 301.649 li
327.489 300.901 li
328.538 299.012 li
331.684 293.391 li
332.208 293.07 li
333.257 291.066 li
333.781 290.256 li
334.306 289.685 li
335.355 288.171 li
335.879 287.684 li
336.403 286.878 li
336.928 286.502 li
337.452 285.896 li
339.025 285.472 li
340.074 285.283 li
340.599 285.094 li
341.123 284.245 li
341.647 283.888 li
342.696 282.445 li
343.22 281.766 li
344.794 279.2 li
345.318 278.354 li
346.891 276.442 li
347.94 274.903 li
348.464 274.486 li
349.513 273.054 li
350.038 272.846 li
350.562 272.871 li
351.086 273.035 li
351.611 272.915 li
352.66 273.069 li
353.708 271.21 li
355.281 271.699 li
355.806 271.6 li
356.33 270.876 li
357.903 270.359 li
358.428 269.591 li
358.952 269.493 li
360.001 269.569 li
360.525 268.811 li
361.05 268.762 li
361.574 269.044 li
362.099 268.298 li
363.147 268.452 li
364.196 267.3 li
364.72 267.188 li
365.245 267.23 li
365.769 266.983 li
366.294 267.132 li
366.818 266.723 li
367.342 266.916 li
367.867 266.445 li
368.391 266.535 li
368.916 266.808 li
369.44 266.068 li
369.964 266.255 li
370.489 265.542 li
371.013 265.519 li
371.538 265.13 li
372.586 265.13 li
373.111 264.275 li
373.635 264.473 li
374.16 264.184 li
374.684 264.565 li
375.208 264.627 li
376.257 263.32 li
376.781 263.422 li
377.306 262.595 li
377.83 262.647 li
378.355 262.82 li
379.403 261.325 li
379.928 261.396 li
380.452 261.33 li
382.025 261.77 li
382.55 261.883 li
383.074 261.678 li
383.599 261.783 li
384.123 261.099 li
384.647 261.178 li
385.172 260.911 li
385.696 260.174 li
386.745 260.31 li
387.269 260.502 li
387.794 260.505 li
388.318 260.196 li
389.891 258.128 li
390.416 258.148 li
390.94 257.792 li
391.464 257.68 li
391.989 257.721 li
392.513 257.962 li
393.038 257.909 li
393.562 258.244 li
395.135 258.183 li
395.659 258.288 li
396.184 258.155 li
397.233 258.493 li
397.757 258.54 li
398.806 258.174 li
399.33 257.889 li
399.855 257.852 li
400.903 257.013 li
401.428 257.029 li
402.477 257.291 li
403.525 257.21 li
404.574 256.153 li
405.099 255.676 li
405.623 255.891 li
406.672 255.971 li
407.196 255.753 li
408.769 256.186 li
409.818 255.568 li
410.342 255.798 li
410.867 255.697 li
411.391 255.351 li
411.916 254.667 li
412.44 254.384 li
413.489 254.254 li
414.013 253.682 li
415.062 253.5 li
415.586 252.955 li
416.635 252.74 li
417.159 252.485 li
418.208 252.288 li
418.733 251.887 li
419.257 252.061 li
419.781 251.468 li
421.355 250.958 li
421.879 250.902 li
422.403 250.276 li
422.928 250.647 li
423.452 250.323 li
423.977 250.551 li
424.501 249.939 li
425.025 249.917 li
425.55 249.318 li
426.074 249.276 li
426.598 248.681 li
427.123 248.615 li
427.647 248.061 li
428.172 248.173 li
428.696 247.585 li
429.22 247.573 li
429.745 247.088 li
430.269 247.021 li
430.794 246.657 li
431.318 246.615 li
431.842 246.284 li
432.891 246.213 li
433.416 249.386 li
433.94 248.818 li
434.464 248.818 li
434.989 248.428 li
436.562 248.377 li
437.086 248.126 li
437.611 248.003 li
438.135 247.567 li
438.659 247.513 li
439.184 246.969 li
440.233 247.134 li
440.757 246.614 li
441.281 246.689 li
441.806 246.494 li
442.33 246.527 li
442.855 246.089 li
443.379 245.356 li
444.428 244.551 li
444.952 244.576 li
445.477 243.995 li
446.525 244.298 li
447.05 243.958 li
447.574 243.334 li
448.098 243.453 li
448.623 242.564 li
449.672 242.204 li
450.72 242.492 li
451.245 242.583 li
451.769 241.862 li
452.294 241.536 li
452.818 241.577 li
453.342 240.92 li
454.391 240.917 li
454.916 239.748 li
455.44 239.01 li
455.964 239.265 li
456.489 239.236 li
457.013 238.367 li
457.537 238.009 li
458.062 238.112 li
458.586 237.959 li
459.111 237.116 li
460.159 237.019 li
460.684 235.926 li
461.208 235.738 li
461.733 235.672 li
462.781 234.963 li
463.306 234.841 li
463.83 235.059 li
464.355 234.775 li
465.403 234.413 li
465.928 234.198 li
466.452 234.182 li
467.501 233.37 li
469.074 232.894 li
470.123 231.957 li
470.647 231.853 li
471.696 230.759 li
472.22 230.514 li
476.94 229.615 li
477.464 229.428 li
477.989 228.88 li
479.562 226.457 li
480.086 225.932 li
480.611 224.937 li
481.135 224.869 li
481.659 224.293 li
482.184 224.214 li
528.33 196.479 li
538.294 190.894 li
547.208 186.15 li
555.074 182.203 li
562.415 178.754 li
569.233 175.781 li
576.05 173.05 li
582.342 170.765 li
588.635 168.724 li
594.403 167.083 li
600.172 165.676 li
605.415 164.611 li
610.659 163.762 li
613.281 163.421 li
.926818 .245335 1 .155612 cmyk
@
1 lw
2 lc
0 lj
[] 0 dsh
83.4975 24.48 mo
714.099 24.48 li
1 /0 /CSD get_res sepcs
1 sep
@
714.099 569.52 mo
714.099 24.48 li
@
83.4975 569.52 mo
714.099 569.52 li
@
83.4975 569.52 mo
83.4975 24.48 li
@
714.099 569.52 mo
699.099 569.52 li
f
2 lw
0 lc
1 lj
714.099 569.52 mo
699.099 569.52 li
@
750.464 558.655 mo
749.036 558.655 747.972 559.355 747.244 560.755 cv
746.516 562.155 746.18 564.255 746.18 567.055 cv
746.18 569.855 746.516 571.955 747.244 573.355 cv
747.972 574.755 749.036 575.455 750.464 575.455 cv
751.892 575.455 752.956 574.755 753.684 573.355 cv
754.384 571.955 754.748 569.855 754.748 567.055 cv
754.748 564.255 754.384 562.155 753.684 560.755 cv
752.956 559.355 751.892 558.655 750.464 558.655 cv
750.464 556.471 mo
752.732 556.471 754.468 557.395 755.7 559.187 cv
756.904 561.007 757.52 563.639 757.52 567.055 cv
757.52 570.499 756.904 573.131 755.7 574.923 cv
754.468 576.715 752.732 577.611 750.464 577.611 cv
748.168 577.611 746.404 576.715 745.2 574.923 cv
743.996 573.131 743.408 570.499 743.408 567.055 cv
743.408 563.639 743.996 561.007 745.2 559.187 cv
746.404 557.395 748.168 556.471 750.464 556.471 cv
f
762.364 573.775 mo
765.248 573.775 li
765.248 577.247 li
762.364 577.247 li
762.364 573.775 li
f
777.176 558.655 mo
775.748 558.655 774.684 559.355 773.956 560.755 cv
773.228 562.155 772.892 564.255 772.892 567.055 cv
772.892 569.855 773.228 571.955 773.956 573.355 cv
774.684 574.755 775.748 575.455 777.176 575.455 cv
778.604 575.455 779.668 574.755 780.396 573.355 cv
781.096 571.955 781.46 569.855 781.46 567.055 cv
781.46 564.255 781.096 562.155 780.396 560.755 cv
779.668 559.355 778.604 558.655 777.176 558.655 cv
777.176 556.471 mo
779.444 556.471 781.18 557.395 782.412 559.187 cv
783.616 561.007 784.232 563.639 784.232 567.055 cv
784.232 570.499 783.616 573.131 782.412 574.923 cv
781.18 576.715 779.444 577.611 777.176 577.611 cv
774.88 577.611 773.116 576.715 771.912 574.923 cv
770.708 573.131 770.12 570.499 770.12 567.055 cv
770.12 563.639 770.708 561.007 771.912 559.187 cv
773.116 557.395 774.88 556.471 777.176 556.471 cv
f
791.456 574.923 mo
801.088 574.923 li
801.088 577.247 li
788.124 577.247 li
788.124 574.923 li
789.16 573.859 790.588 572.403 792.408 570.555 cv
794.2 568.735 795.348 567.559 795.824 567.027 cv
796.72 566.047 797.336 565.207 797.672 564.507 cv
798.008 563.835 798.204 563.135 798.204 562.463 cv
798.204 561.399 797.812 560.503 797.056 559.831 cv
796.3 559.159 795.32 558.795 794.088 558.795 cv
793.22 558.795 792.296 558.963 791.344 559.243 cv
790.392 559.551 789.356 559.999 788.264 560.615 cv
788.264 557.815 li
789.384 557.367 790.42 557.031 791.372 556.807 cv
792.324 556.583 793.22 556.471 794.032 556.471 cv
796.132 556.471 797.812 557.003 799.072 558.067 cv
800.332 559.131 800.976 560.531 800.976 562.295 cv
800.976 563.135 800.808 563.947 800.5 564.675 cv
800.192 565.431 799.632 566.327 798.792 567.335 cv
798.568 567.615 797.84 568.371 796.608 569.631 cv
795.376 570.891 793.668 572.655 791.456 574.923 cv
f
806.912 556.835 mo
817.748 556.835 li
817.748 559.159 li
809.432 559.159 li
809.432 564.171 li
809.824 564.031 810.244 563.919 810.636 563.863 cv
811.028 563.807 811.448 563.751 811.84 563.751 cv
814.108 563.751 815.9 564.395 817.244 565.627 cv
818.588 566.887 819.26 568.567 819.26 570.695 cv
819.26 572.907 818.56 574.615 817.188 575.819 cv
815.816 577.023 813.884 577.611 811.42 577.611 cv
810.552 577.611 809.684 577.527 808.788 577.415 cv
807.892 577.275 806.996 577.079 806.044 576.771 cv
806.044 573.999 li
806.856 574.447 807.696 574.783 808.592 575.007 cv
809.46 575.231 810.384 575.315 811.364 575.315 cv
812.932 575.315 814.192 574.923 815.116 574.083 cv
816.012 573.243 816.488 572.123 816.488 570.695 cv
816.488 569.295 816.012 568.175 815.116 567.335 cv
814.192 566.495 812.932 566.075 811.364 566.075 cv
810.636 566.075 809.88 566.159 809.152 566.327 cv
808.424 566.495 807.668 566.747 806.912 567.083 cv
806.912 556.835 li
f
721.067 567.307 mo
738.595 567.307 li
738.595 569.631 li
721.067 569.631 li
721.067 567.307 li
f
714.099 478.68 mo
699.099 478.68 li
f
714.099 478.68 mo
699.099 478.68 li
@
750.464 467.815 mo
749.036 467.815 747.972 468.515 747.244 469.915 cv
746.516 471.315 746.18 473.415 746.18 476.215 cv
746.18 479.015 746.516 481.115 747.244 482.515 cv
747.972 483.915 749.036 484.615 750.464 484.615 cv
751.892 484.615 752.956 483.915 753.684 482.515 cv
754.384 481.115 754.748 479.015 754.748 476.215 cv
754.748 473.415 754.384 471.315 753.684 469.915 cv
752.956 468.515 751.892 467.815 750.464 467.815 cv
750.464 465.631 mo
752.732 465.631 754.468 466.555 755.7 468.347 cv
756.904 470.167 757.52 472.799 757.52 476.215 cv
757.52 479.659 756.904 482.291 755.7 484.083 cv
754.468 485.875 752.732 486.771 750.464 486.771 cv
748.168 486.771 746.404 485.875 745.2 484.083 cv
743.996 482.291 743.408 479.659 743.408 476.215 cv
743.408 472.799 743.996 470.167 745.2 468.347 cv
746.404 466.555 748.168 465.631 750.464 465.631 cv
f
762.364 482.935 mo
765.248 482.935 li
765.248 486.407 li
762.364 486.407 li
762.364 482.935 li
f
777.176 467.815 mo
775.748 467.815 774.684 468.515 773.956 469.915 cv
773.228 471.315 772.892 473.415 772.892 476.215 cv
772.892 479.015 773.228 481.115 773.956 482.515 cv
774.684 483.915 775.748 484.615 777.176 484.615 cv
778.604 484.615 779.668 483.915 780.396 482.515 cv
781.096 481.115 781.46 479.015 781.46 476.215 cv
781.46 473.415 781.096 471.315 780.396 469.915 cv
779.668 468.515 778.604 467.815 777.176 467.815 cv
777.176 465.631 mo
779.444 465.631 781.18 466.555 782.412 468.347 cv
783.616 470.167 784.232 472.799 784.232 476.215 cv
784.232 479.659 783.616 482.291 782.412 484.083 cv
781.18 485.875 779.444 486.771 777.176 486.771 cv
774.88 486.771 773.116 485.875 771.912 484.083 cv
770.708 482.291 770.12 479.659 770.12 476.215 cv
770.12 472.799 770.708 470.167 771.912 468.347 cv
773.116 466.555 774.88 465.631 777.176 465.631 cv
f
791.456 484.083 mo
801.088 484.083 li
801.088 486.407 li
788.124 486.407 li
788.124 484.083 li
789.16 483.019 790.588 481.563 792.408 479.715 cv
794.2 477.895 795.348 476.719 795.824 476.187 cv
796.72 475.207 797.336 474.367 797.672 473.667 cv
798.008 472.995 798.204 472.295 798.204 471.623 cv
798.204 470.559 797.812 469.663 797.056 468.991 cv
796.3 468.319 795.32 467.955 794.088 467.955 cv
793.22 467.955 792.296 468.123 791.344 468.403 cv
790.392 468.711 789.356 469.159 788.264 469.775 cv
788.264 466.975 li
789.384 466.527 790.42 466.191 791.372 465.967 cv
792.324 465.743 793.22 465.631 794.032 465.631 cv
796.132 465.631 797.812 466.163 799.072 467.227 cv
800.332 468.291 800.976 469.691 800.976 471.455 cv
800.976 472.295 800.808 473.107 800.5 473.835 cv
800.192 474.591 799.632 475.487 798.792 476.495 cv
798.568 476.775 797.84 477.531 796.608 478.791 cv
795.376 480.051 793.668 481.815 791.456 484.083 cv
f
812.792 467.815 mo
811.364 467.815 810.3 468.515 809.572 469.915 cv
808.844 471.315 808.508 473.415 808.508 476.215 cv
808.508 479.015 808.844 481.115 809.572 482.515 cv
810.3 483.915 811.364 484.615 812.792 484.615 cv
814.22 484.615 815.284 483.915 816.012 482.515 cv
816.712 481.115 817.076 479.015 817.076 476.215 cv
817.076 473.415 816.712 471.315 816.012 469.915 cv
815.284 468.515 814.22 467.815 812.792 467.815 cv
812.792 465.631 mo
815.06 465.631 816.796 466.555 818.028 468.347 cv
819.232 470.167 819.848 472.799 819.848 476.215 cv
819.848 479.659 819.232 482.291 818.028 484.083 cv
816.796 485.875 815.06 486.771 812.792 486.771 cv
810.496 486.771 808.732 485.875 807.528 484.083 cv
806.324 482.291 805.736 479.659 805.736 476.215 cv
805.736 472.799 806.324 470.167 807.528 468.347 cv
808.732 466.555 810.496 465.631 812.792 465.631 cv
f
721.067 476.467 mo
738.595 476.467 li
738.595 478.791 li
721.067 478.791 li
721.067 476.467 li
f
714.099 387.84 mo
699.099 387.84 li
f
714.099 387.84 mo
699.099 387.84 li
@
750.464 376.975 mo
749.036 376.975 747.972 377.675 747.244 379.075 cv
746.516 380.475 746.18 382.575 746.18 385.375 cv
746.18 388.175 746.516 390.275 747.244 391.675 cv
747.972 393.075 749.036 393.775 750.464 393.775 cv
751.892 393.775 752.956 393.075 753.684 391.675 cv
754.384 390.275 754.748 388.175 754.748 385.375 cv
754.748 382.575 754.384 380.475 753.684 379.075 cv
752.956 377.675 751.892 376.975 750.464 376.975 cv
750.464 374.791 mo
752.732 374.791 754.468 375.715 755.7 377.507 cv
756.904 379.327 757.52 381.959 757.52 385.375 cv
757.52 388.819 756.904 391.451 755.7 393.243 cv
754.468 395.035 752.732 395.931 750.464 395.931 cv
748.168 395.931 746.404 395.035 745.2 393.243 cv
743.996 391.451 743.408 388.819 743.408 385.375 cv
743.408 381.959 743.996 379.327 745.2 377.507 cv
746.404 375.715 748.168 374.791 750.464 374.791 cv
f
762.364 392.095 mo
765.248 392.095 li
765.248 395.567 li
762.364 395.567 li
762.364 392.095 li
f
777.176 376.975 mo
775.748 376.975 774.684 377.675 773.956 379.075 cv
773.228 380.475 772.892 382.575 772.892 385.375 cv
772.892 388.175 773.228 390.275 773.956 391.675 cv
774.684 393.075 775.748 393.775 777.176 393.775 cv
778.604 393.775 779.668 393.075 780.396 391.675 cv
781.096 390.275 781.46 388.175 781.46 385.375 cv
781.46 382.575 781.096 380.475 780.396 379.075 cv
779.668 377.675 778.604 376.975 777.176 376.975 cv
777.176 374.791 mo
779.444 374.791 781.18 375.715 782.412 377.507 cv
783.616 379.327 784.232 381.959 784.232 385.375 cv
784.232 388.819 783.616 391.451 782.412 393.243 cv
781.18 395.035 779.444 395.931 777.176 395.931 cv
774.88 395.931 773.116 395.035 771.912 393.243 cv
770.708 391.451 770.12 388.819 770.12 385.375 cv
770.12 381.959 770.708 379.327 771.912 377.507 cv
773.116 375.715 774.88 374.791 777.176 374.791 cv
f
789.552 393.243 mo
794.06 393.243 li
794.06 377.675 li
789.16 378.655 li
789.16 376.135 li
794.032 375.155 li
796.804 375.155 li
796.804 393.243 li
801.312 393.243 li
801.312 395.567 li
789.552 395.567 li
789.552 393.243 li
f
806.912 375.155 mo
817.748 375.155 li
817.748 377.479 li
809.432 377.479 li
809.432 382.491 li
809.824 382.351 810.244 382.239 810.636 382.183 cv
811.028 382.127 811.448 382.071 811.84 382.071 cv
814.108 382.071 815.9 382.715 817.244 383.947 cv
818.588 385.207 819.26 386.887 819.26 389.015 cv
819.26 391.227 818.56 392.935 817.188 394.139 cv
815.816 395.343 813.884 395.931 811.42 395.931 cv
810.552 395.931 809.684 395.847 808.788 395.735 cv
807.892 395.595 806.996 395.399 806.044 395.091 cv
806.044 392.319 li
806.856 392.767 807.696 393.103 808.592 393.327 cv
809.46 393.551 810.384 393.635 811.364 393.635 cv
812.932 393.635 814.192 393.243 815.116 392.403 cv
816.012 391.563 816.488 390.443 816.488 389.015 cv
816.488 387.615 816.012 386.495 815.116 385.655 cv
814.192 384.815 812.932 384.395 811.364 384.395 cv
810.636 384.395 809.88 384.479 809.152 384.647 cv
808.424 384.815 807.668 385.067 806.912 385.403 cv
806.912 375.155 li
f
721.067 385.627 mo
738.595 385.627 li
738.595 387.951 li
721.067 387.951 li
721.067 385.627 li
f
714.099 297 mo
699.099 297 li
f
714.099 297 mo
699.099 297 li
@
750.464 286.135 mo
749.036 286.135 747.972 286.835 747.244 288.235 cv
746.516 289.635 746.18 291.735 746.18 294.535 cv
746.18 297.335 746.516 299.435 747.244 300.835 cv
747.972 302.235 749.036 302.935 750.464 302.935 cv
751.892 302.935 752.956 302.235 753.684 300.835 cv
754.384 299.435 754.748 297.335 754.748 294.535 cv
754.748 291.735 754.384 289.635 753.684 288.235 cv
752.956 286.835 751.892 286.135 750.464 286.135 cv
750.464 283.951 mo
752.732 283.951 754.468 284.875 755.7 286.667 cv
756.904 288.487 757.52 291.119 757.52 294.535 cv
757.52 297.979 756.904 300.611 755.7 302.403 cv
754.468 304.195 752.732 305.091 750.464 305.091 cv
748.168 305.091 746.404 304.195 745.2 302.403 cv
743.996 300.611 743.408 297.979 743.408 294.535 cv
743.408 291.119 743.996 288.487 745.2 286.667 cv
746.404 284.875 748.168 283.951 750.464 283.951 cv
f
762.364 301.255 mo
765.248 301.255 li
765.248 304.727 li
762.364 304.727 li
762.364 301.255 li
f
777.176 286.135 mo
775.748 286.135 774.684 286.835 773.956 288.235 cv
773.228 289.635 772.892 291.735 772.892 294.535 cv
772.892 297.335 773.228 299.435 773.956 300.835 cv
774.684 302.235 775.748 302.935 777.176 302.935 cv
778.604 302.935 779.668 302.235 780.396 300.835 cv
781.096 299.435 781.46 297.335 781.46 294.535 cv
781.46 291.735 781.096 289.635 780.396 288.235 cv
779.668 286.835 778.604 286.135 777.176 286.135 cv
777.176 283.951 mo
779.444 283.951 781.18 284.875 782.412 286.667 cv
783.616 288.487 784.232 291.119 784.232 294.535 cv
784.232 297.979 783.616 300.611 782.412 302.403 cv
781.18 304.195 779.444 305.091 777.176 305.091 cv
774.88 305.091 773.116 304.195 771.912 302.403 cv
770.708 300.611 770.12 297.979 770.12 294.535 cv
770.12 291.119 770.708 288.487 771.912 286.667 cv
773.116 284.875 774.88 283.951 777.176 283.951 cv
f
789.552 302.403 mo
794.06 302.403 li
794.06 286.835 li
789.16 287.815 li
789.16 285.295 li
794.032 284.315 li
796.804 284.315 li
796.804 302.403 li
801.312 302.403 li
801.312 304.727 li
789.552 304.727 li
789.552 302.403 li
f
812.792 286.135 mo
811.364 286.135 810.3 286.835 809.572 288.235 cv
808.844 289.635 808.508 291.735 808.508 294.535 cv
808.508 297.335 808.844 299.435 809.572 300.835 cv
810.3 302.235 811.364 302.935 812.792 302.935 cv
814.22 302.935 815.284 302.235 816.012 300.835 cv
816.712 299.435 817.076 297.335 817.076 294.535 cv
817.076 291.735 816.712 289.635 816.012 288.235 cv
815.284 286.835 814.22 286.135 812.792 286.135 cv
812.792 283.951 mo
815.06 283.951 816.796 284.875 818.028 286.667 cv
819.232 288.487 819.848 291.119 819.848 294.535 cv
819.848 297.979 819.232 300.611 818.028 302.403 cv
816.796 304.195 815.06 305.091 812.792 305.091 cv
810.496 305.091 808.732 304.195 807.528 302.403 cv
806.324 300.611 805.736 297.979 805.736 294.535 cv
805.736 291.119 806.324 288.487 807.528 286.667 cv
808.732 284.875 810.496 283.951 812.792 283.951 cv
f
721.067 294.787 mo
738.595 294.787 li
738.595 297.111 li
721.067 297.111 li
721.067 294.787 li
f
714.099 206.16 mo
699.099 206.16 li
f
714.099 206.16 mo
699.099 206.16 li
@
750.464 195.295 mo
749.036 195.295 747.972 195.995 747.244 197.395 cv
746.516 198.795 746.18 200.895 746.18 203.695 cv
746.18 206.495 746.516 208.595 747.244 209.995 cv
747.972 211.395 749.036 212.095 750.464 212.095 cv
751.892 212.095 752.956 211.395 753.684 209.995 cv
754.384 208.595 754.748 206.495 754.748 203.695 cv
754.748 200.895 754.384 198.795 753.684 197.395 cv
752.956 195.995 751.892 195.295 750.464 195.295 cv
750.464 193.111 mo
752.732 193.111 754.468 194.035 755.7 195.827 cv
756.904 197.647 757.52 200.279 757.52 203.695 cv
757.52 207.139 756.904 209.771 755.7 211.563 cv
754.468 213.355 752.732 214.251 750.464 214.251 cv
748.168 214.251 746.404 213.355 745.2 211.563 cv
743.996 209.771 743.408 207.139 743.408 203.695 cv
743.408 200.279 743.996 197.647 745.2 195.827 cv
746.404 194.035 748.168 193.111 750.464 193.111 cv
f
762.364 210.415 mo
765.248 210.415 li
765.248 213.887 li
762.364 213.887 li
762.364 210.415 li
f
777.176 195.295 mo
775.748 195.295 774.684 195.995 773.956 197.395 cv
773.228 198.795 772.892 200.895 772.892 203.695 cv
772.892 206.495 773.228 208.595 773.956 209.995 cv
774.684 211.395 775.748 212.095 777.176 212.095 cv
778.604 212.095 779.668 211.395 780.396 209.995 cv
781.096 208.595 781.46 206.495 781.46 203.695 cv
781.46 200.895 781.096 198.795 780.396 197.395 cv
779.668 195.995 778.604 195.295 777.176 195.295 cv
777.176 193.111 mo
779.444 193.111 781.18 194.035 782.412 195.827 cv
783.616 197.647 784.232 200.279 784.232 203.695 cv
784.232 207.139 783.616 209.771 782.412 211.563 cv
781.18 213.355 779.444 214.251 777.176 214.251 cv
774.88 214.251 773.116 213.355 771.912 211.563 cv
770.708 209.771 770.12 207.139 770.12 203.695 cv
770.12 200.279 770.708 197.647 771.912 195.827 cv
773.116 194.035 774.88 193.111 777.176 193.111 cv
f
794.984 195.295 mo
793.556 195.295 792.492 195.995 791.764 197.395 cv
791.036 198.795 790.7 200.895 790.7 203.695 cv
790.7 206.495 791.036 208.595 791.764 209.995 cv
792.492 211.395 793.556 212.095 794.984 212.095 cv
796.412 212.095 797.476 211.395 798.204 209.995 cv
798.904 208.595 799.268 206.495 799.268 203.695 cv
799.268 200.895 798.904 198.795 798.204 197.395 cv
797.476 195.995 796.412 195.295 794.984 195.295 cv
794.984 193.111 mo
797.252 193.111 798.988 194.035 800.22 195.827 cv
801.424 197.647 802.04 200.279 802.04 203.695 cv
802.04 207.139 801.424 209.771 800.22 211.563 cv
798.988 213.355 797.252 214.251 794.984 214.251 cv
792.688 214.251 790.924 213.355 789.72 211.563 cv
788.516 209.771 787.928 207.139 787.928 203.695 cv
787.928 200.279 788.516 197.647 789.72 195.827 cv
790.924 194.035 792.688 193.111 794.984 193.111 cv
f
806.912 193.475 mo
817.748 193.475 li
817.748 195.799 li
809.432 195.799 li
809.432 200.811 li
809.824 200.671 810.244 200.559 810.636 200.503 cv
811.028 200.447 811.448 200.391 811.84 200.391 cv
814.108 200.391 815.9 201.035 817.244 202.267 cv
818.588 203.527 819.26 205.207 819.26 207.335 cv
819.26 209.547 818.56 211.255 817.188 212.459 cv
815.816 213.663 813.884 214.251 811.42 214.251 cv
810.552 214.251 809.684 214.167 808.788 214.055 cv
807.892 213.915 806.996 213.719 806.044 213.411 cv
806.044 210.639 li
806.856 211.087 807.696 211.423 808.592 211.647 cv
809.46 211.871 810.384 211.955 811.364 211.955 cv
812.932 211.955 814.192 211.563 815.116 210.723 cv
816.012 209.883 816.488 208.763 816.488 207.335 cv
816.488 205.935 816.012 204.815 815.116 203.975 cv
814.192 203.135 812.932 202.715 811.364 202.715 cv
810.636 202.715 809.88 202.799 809.152 202.967 cv
808.424 203.135 807.668 203.387 806.912 203.723 cv
806.912 193.475 li
f
721.067 203.947 mo
738.595 203.947 li
738.595 206.271 li
721.067 206.271 li
721.067 203.947 li
f
714.099 115.32 mo
699.099 115.32 li
f
714.099 115.32 mo
699.099 115.32 li
@
727.003 104.455 mo
725.575 104.455 724.511 105.155 723.783 106.555 cv
723.055 107.955 722.719 110.055 722.719 112.855 cv
722.719 115.655 723.055 117.755 723.783 119.155 cv
724.511 120.555 725.575 121.255 727.003 121.255 cv
728.431 121.255 729.495 120.555 730.223 119.155 cv
730.923 117.755 731.287 115.655 731.287 112.855 cv
731.287 110.055 730.923 107.955 730.223 106.555 cv
729.495 105.155 728.431 104.455 727.003 104.455 cv
727.003 102.271 mo
729.271 102.271 731.007 103.195 732.239 104.987 cv
733.443 106.807 734.059 109.439 734.059 112.855 cv
734.059 116.299 733.443 118.931 732.239 120.723 cv
731.007 122.515 729.271 123.411 727.003 123.411 cv
724.707 123.411 722.943 122.515 721.739 120.723 cv
720.535 118.931 719.947 116.299 719.947 112.855 cv
719.947 109.439 720.535 106.807 721.739 104.987 cv
722.943 103.195 724.707 102.271 727.003 102.271 cv
f
738.903 119.575 mo
741.787 119.575 li
741.787 123.047 li
738.903 123.047 li
738.903 119.575 li
f
753.715 104.455 mo
752.287 104.455 751.223 105.155 750.495 106.555 cv
749.767 107.955 749.431 110.055 749.431 112.855 cv
749.431 115.655 749.767 117.755 750.495 119.155 cv
751.223 120.555 752.287 121.255 753.715 121.255 cv
755.143 121.255 756.207 120.555 756.935 119.155 cv
757.635 117.755 757.999 115.655 757.999 112.855 cv
757.999 110.055 757.635 107.955 756.935 106.555 cv
756.207 105.155 755.143 104.455 753.715 104.455 cv
753.715 102.271 mo
755.983 102.271 757.719 103.195 758.951 104.987 cv
760.155 106.807 760.771 109.439 760.771 112.855 cv
760.771 116.299 760.155 118.931 758.951 120.723 cv
757.719 122.515 755.983 123.411 753.715 123.411 cv
751.419 123.411 749.655 122.515 748.451 120.723 cv
747.247 118.931 746.659 116.299 746.659 112.855 cv
746.659 109.439 747.247 106.807 748.451 104.987 cv
749.655 103.195 751.419 102.271 753.715 102.271 cv
f
771.523 104.455 mo
770.095 104.455 769.031 105.155 768.303 106.555 cv
767.575 107.955 767.239 110.055 767.239 112.855 cv
767.239 115.655 767.575 117.755 768.303 119.155 cv
769.031 120.555 770.095 121.255 771.523 121.255 cv
772.951 121.255 774.015 120.555 774.743 119.155 cv
775.443 117.755 775.807 115.655 775.807 112.855 cv
775.807 110.055 775.443 107.955 774.743 106.555 cv
774.015 105.155 772.951 104.455 771.523 104.455 cv
771.523 102.271 mo
773.791 102.271 775.527 103.195 776.759 104.987 cv
777.963 106.807 778.579 109.439 778.579 112.855 cv
778.579 116.299 777.963 118.931 776.759 120.723 cv
775.527 122.515 773.791 123.411 771.523 123.411 cv
769.227 123.411 767.463 122.515 766.259 120.723 cv
765.055 118.931 764.467 116.299 764.467 112.855 cv
764.467 109.439 765.055 106.807 766.259 104.987 cv
767.463 103.195 769.227 102.271 771.523 102.271 cv
f
789.331 104.455 mo
787.903 104.455 786.839 105.155 786.111 106.555 cv
785.383 107.955 785.047 110.055 785.047 112.855 cv
785.047 115.655 785.383 117.755 786.111 119.155 cv
786.839 120.555 787.903 121.255 789.331 121.255 cv
790.759 121.255 791.823 120.555 792.551 119.155 cv
793.251 117.755 793.615 115.655 793.615 112.855 cv
793.615 110.055 793.251 107.955 792.551 106.555 cv
791.823 105.155 790.759 104.455 789.331 104.455 cv
789.331 102.271 mo
791.599 102.271 793.335 103.195 794.567 104.987 cv
795.771 106.807 796.387 109.439 796.387 112.855 cv
796.387 116.299 795.771 118.931 794.567 120.723 cv
793.335 122.515 791.599 123.411 789.331 123.411 cv
787.035 123.411 785.271 122.515 784.067 120.723 cv
782.863 118.931 782.275 116.299 782.275 112.855 cv
782.275 109.439 782.863 106.807 784.067 104.987 cv
785.271 103.195 787.035 102.271 789.331 102.271 cv
f
714.099 24.48 mo
699.099 24.48 li
f
714.099 24.48 mo
699.099 24.48 li
@
727.003 13.6145 mo
725.575 13.6145 724.511 14.3145 723.783 15.7145 cv
723.055 17.1145 722.719 19.2145 722.719 22.0145 cv
722.719 24.8145 723.055 26.9145 723.783 28.3145 cv
724.511 29.7145 725.575 30.4145 727.003 30.4145 cv
728.431 30.4145 729.495 29.7145 730.223 28.3145 cv
730.923 26.9145 731.287 24.8145 731.287 22.0145 cv
731.287 19.2145 730.923 17.1145 730.223 15.7145 cv
729.495 14.3145 728.431 13.6145 727.003 13.6145 cv
727.003 11.4305 mo
729.271 11.4305 731.007 12.3545 732.239 14.1465 cv
733.443 15.9665 734.059 18.5985 734.059 22.0145 cv
734.059 25.4585 733.443 28.0905 732.239 29.8825 cv
731.007 31.6745 729.271 32.5705 727.003 32.5705 cv
724.707 32.5705 722.943 31.6745 721.739 29.8825 cv
720.535 28.0905 719.947 25.4585 719.947 22.0145 cv
719.947 18.5985 720.535 15.9665 721.739 14.1465 cv
722.943 12.3545 724.707 11.4305 727.003 11.4305 cv
f
738.903 28.7345 mo
741.787 28.7345 li
741.787 32.2065 li
738.903 32.2065 li
738.903 28.7345 li
f
753.715 13.6145 mo
752.287 13.6145 751.223 14.3145 750.495 15.7145 cv
749.767 17.1145 749.431 19.2145 749.431 22.0145 cv
749.431 24.8145 749.767 26.9145 750.495 28.3145 cv
751.223 29.7145 752.287 30.4145 753.715 30.4145 cv
755.143 30.4145 756.207 29.7145 756.935 28.3145 cv
757.635 26.9145 757.999 24.8145 757.999 22.0145 cv
757.999 19.2145 757.635 17.1145 756.935 15.7145 cv
756.207 14.3145 755.143 13.6145 753.715 13.6145 cv
753.715 11.4305 mo
755.983 11.4305 757.719 12.3545 758.951 14.1465 cv
760.155 15.9665 760.771 18.5985 760.771 22.0145 cv
760.771 25.4585 760.155 28.0905 758.951 29.8825 cv
757.719 31.6745 755.983 32.5705 753.715 32.5705 cv
751.419 32.5705 749.655 31.6745 748.451 29.8825 cv
747.247 28.0905 746.659 25.4585 746.659 22.0145 cv
746.659 18.5985 747.247 15.9665 748.451 14.1465 cv
749.655 12.3545 751.419 11.4305 753.715 11.4305 cv
f
771.523 13.6145 mo
770.095 13.6145 769.031 14.3145 768.303 15.7145 cv
767.575 17.1145 767.239 19.2145 767.239 22.0145 cv
767.239 24.8145 767.575 26.9145 768.303 28.3145 cv
769.031 29.7145 770.095 30.4145 771.523 30.4145 cv
772.951 30.4145 774.015 29.7145 774.743 28.3145 cv
775.443 26.9145 775.807 24.8145 775.807 22.0145 cv
775.807 19.2145 775.443 17.1145 774.743 15.7145 cv
774.015 14.3145 772.951 13.6145 771.523 13.6145 cv
771.523 11.4305 mo
773.791 11.4305 775.527 12.3545 776.759 14.1465 cv
777.963 15.9665 778.579 18.5985 778.579 22.0145 cv
778.579 25.4585 777.963 28.0905 776.759 29.8825 cv
775.527 31.6745 773.791 32.5705 771.523 32.5705 cv
769.227 32.5705 767.463 31.6745 766.259 29.8825 cv
765.055 28.0905 764.467 25.4585 764.467 22.0145 cv
764.467 18.5985 765.055 15.9665 766.259 14.1465 cv
767.463 12.3545 769.227 11.4305 771.523 11.4305 cv
f
783.451 11.7945 mo
794.287 11.7945 li
794.287 14.1185 li
785.971 14.1185 li
785.971 19.1305 li
786.363 18.9905 786.783 18.8785 787.175 18.8225 cv
787.567 18.7665 787.987 18.7105 788.379 18.7105 cv
790.647 18.7105 792.439 19.3545 793.783 20.5865 cv
795.127 21.8465 795.799 23.5265 795.799 25.6545 cv
795.799 27.8665 795.099 29.5745 793.727 30.7785 cv
792.355 31.9825 790.423 32.5705 787.959 32.5705 cv
787.091 32.5705 786.223 32.4865 785.327 32.3745 cv
784.431 32.2345 783.535 32.0385 782.583 31.7305 cv
782.583 28.9585 li
783.395 29.4065 784.235 29.7425 785.131 29.9665 cv
785.999 30.1905 786.923 30.2745 787.903 30.2745 cv
789.471 30.2745 790.731 29.8825 791.655 29.0425 cv
792.551 28.2025 793.027 27.0825 793.027 25.6545 cv
793.027 24.2545 792.551 23.1345 791.655 22.2945 cv
790.731 21.4545 789.471 21.0345 787.903 21.0345 cv
787.175 21.0345 786.419 21.1185 785.691 21.2865 cv
784.963 21.4545 784.207 21.7065 783.451 22.0425 cv
783.451 11.7945 li
f
823.649 486.857 mo
826.721 486.857 li
826.145 488.073 825.729 489.193 825.441 490.249 cv
825.185 491.337 825.025 492.361 825.025 493.321 cv
825.025 495.049 825.377 496.393 826.017 497.321 cv
826.689 498.249 827.649 498.697 828.865 498.697 cv
829.889 498.697 830.689 498.409 831.201 497.769 cv
831.745 497.161 832.161 495.977 832.481 494.249 cv
832.865 492.329 li
833.313 489.993 834.113 488.265 835.233 487.145 cv
836.385 486.025 837.889 485.449 839.777 485.449 cv
842.049 485.449 843.745 486.217 844.897 487.721 cv
846.049 489.257 846.625 491.465 846.625 494.377 cv
846.625 495.497 846.497 496.681 846.273 497.929 cv
846.049 499.177 845.697 500.457 845.185 501.769 cv
841.921 501.769 li
842.657 500.489 843.201 499.241 843.553 498.025 cv
843.937 496.809 844.097 495.593 844.097 494.377 cv
844.097 492.585 843.745 491.209 843.041 490.217 cv
842.337 489.257 841.345 488.745 840.001 488.745 cv
838.849 488.745 837.953 489.097 837.313 489.801 cv
836.673 490.505 836.193 491.657 835.873 493.257 cv
835.489 495.177 li
835.041 497.545 834.305 499.241 833.281 500.297 cv
832.289 501.353 830.913 501.865 829.121 501.865 cv
827.073 501.865 825.441 501.161 824.257 499.689 cv
823.073 498.249 822.465 496.233 822.465 493.673 cv
822.465 492.585 822.561 491.497 822.753 490.345 cv
822.945 489.225 823.265 488.073 823.649 486.857 cv
f
836.737 465.673 mo
838.145 465.673 li
838.145 478.889 li
840.129 478.761 841.665 478.185 842.689 477.097 cv
843.713 476.041 844.225 474.569 844.225 472.649 cv
844.225 471.561 844.097 470.473 843.841 469.449 cv
843.585 468.425 843.169 467.369 842.593 466.345 cv
845.313 466.345 li
845.761 467.369 846.113 468.425 846.305 469.513 cv
846.497 470.601 846.625 471.721 846.625 472.809 cv
846.625 475.625 845.825 477.833 844.225 479.465 cv
842.625 481.097 840.417 481.897 837.633 481.897 cv
834.785 481.897 832.513 481.129 830.817 479.593 cv
829.153 478.057 828.289 475.945 828.289 473.321 cv
828.289 470.953 829.057 469.097 830.561 467.721 cv
832.097 466.377 834.145 465.673 836.737 465.673 cv
835.905 468.553 mo
834.337 468.585 833.089 469.033 832.129 469.865 cv
831.201 470.729 830.721 471.881 830.721 473.289 cv
830.721 474.889 831.201 476.169 832.097 477.129 cv
832.993 478.089 834.273 478.665 835.905 478.793 cv
835.905 468.553 li
f
835.649 446.409 mo
846.209 446.409 li
846.209 449.289 li
835.745 449.289 li
834.081 449.289 832.865 449.641 832.033 450.281 cv
831.201 450.921 830.785 451.881 830.785 453.161 cv
830.785 454.729 831.297 455.945 832.289 456.841 cv
833.281 457.737 834.625 458.185 836.321 458.185 cv
846.209 458.185 li
846.209 461.065 li
828.705 461.065 li
828.705 458.185 li
831.425 458.185 li
830.401 457.513 829.601 456.713 829.089 455.753 cv
828.577 454.825 828.289 453.737 828.289 452.521 cv
828.289 450.537 828.929 449.001 830.177 447.977 cv
831.425 446.953 833.249 446.409 835.649 446.409 cv
f
829.217 429.512 mo
831.937 429.512 li
831.553 430.344 831.233 431.176 831.009 432.04 cv
830.817 432.936 830.689 433.832 830.689 434.76 cv
830.689 436.2 830.913 437.288 831.361 437.992 cv
831.809 438.696 832.449 439.048 833.313 439.048 cv
833.985 439.048 834.497 438.792 834.881 438.28 cv
835.265 437.768 835.649 436.744 835.969 435.208 cv
836.193 434.216 li
836.641 432.168 837.281 430.728 838.049 429.864 cv
838.849 429.032 839.969 428.584 841.377 428.584 cv
843.009 428.584 844.289 429.224 845.217 430.504 cv
846.177 431.784 846.625 433.576 846.625 435.816 cv
846.625 436.776 846.529 437.736 846.369 438.76 cv
846.209 439.784 845.953 440.84 845.569 441.96 cv
842.593 441.96 li
843.169 440.904 843.585 439.848 843.841 438.824 cv
844.129 437.8 844.257 436.776 844.257 435.752 cv
844.257 434.408 844.033 433.352 843.585 432.616 cv
843.137 431.912 842.465 431.528 841.601 431.528 cv
840.833 431.528 840.225 431.816 839.809 432.328 cv
839.393 432.84 838.977 433.992 838.593 435.784 cv
838.369 436.776 li
837.985 438.568 837.409 439.88 836.641 440.648 cv
835.873 441.448 834.817 441.832 833.441 441.832 cv
831.809 441.832 830.529 441.256 829.633 440.104 cv
828.737 438.952 828.289 437.288 828.289 435.112 cv
828.289 434.056 828.385 433.064 828.545 432.104 cv
828.705 431.176 828.929 430.312 829.217 429.512 cv
f
828.705 424.009 mo
828.705 421.129 li
846.209 421.129 li
846.209 424.009 li
828.705 424.009 li
821.889 424.009 mo
821.889 421.129 li
825.537 421.129 li
825.537 424.009 li
821.889 424.009 li
f
823.745 412.265 mo
828.705 412.265 li
828.705 406.345 li
830.945 406.345 li
830.945 412.265 li
840.449 412.265 li
841.889 412.265 842.817 412.073 843.201 411.689 cv
843.617 411.305 843.809 410.505 843.809 409.289 cv
843.809 406.345 li
846.209 406.345 li
846.209 409.289 li
846.209 411.529 845.793 413.065 844.961 413.897 cv
844.129 414.729 842.625 415.145 840.449 415.145 cv
830.945 415.145 li
830.945 417.257 li
828.705 417.257 li
828.705 415.145 li
823.745 415.145 li
823.745 412.265 li
f
828.705 404.617 mo
828.705 401.577 li
843.393 396.105 li
828.705 390.633 li
828.705 387.593 li
846.209 394.153 li
846.209 398.057 li
828.705 404.617 li
f
828.705 383.625 mo
828.705 380.745 li
846.209 380.745 li
846.209 383.625 li
828.705 383.625 li
821.889 383.625 mo
821.889 380.745 li
825.537 380.745 li
825.537 383.625 li
821.889 383.625 li
f
823.745 371.881 mo
828.705 371.881 li
828.705 365.961 li
830.945 365.961 li
830.945 371.881 li
840.449 371.881 li
841.889 371.881 842.817 371.689 843.201 371.305 cv
843.617 370.921 843.809 370.121 843.809 368.905 cv
843.809 365.961 li
846.209 365.961 li
846.209 368.905 li
846.209 371.145 845.793 372.681 844.961 373.513 cv
844.129 374.345 842.625 374.761 840.449 374.761 cv
830.945 374.761 li
830.945 376.873 li
828.705 376.873 li
828.705 374.761 li
823.745 374.761 li
823.745 371.881 li
f
847.809 354.889 mo
849.857 355.721 851.233 356.521 851.873 357.289 cv
852.513 358.057 852.833 359.081 852.833 360.361 cv
852.833 362.665 li
850.433 362.665 li
850.433 360.969 li
850.433 360.201 850.241 359.593 849.857 359.145 cv
849.473 358.697 848.609 358.217 847.201 357.673 cv
845.921 357.161 li
828.705 364.233 li
828.705 361.193 li
842.401 355.721 li
828.705 350.249 li
828.705 347.209 li
847.809 354.889 li
f
821.921 326.153 mo
824.353 327.561 826.721 328.585 829.057 329.257 cv
831.393 329.961 833.761 330.281 836.161 330.281 cv
838.593 330.281 840.961 329.961 843.297 329.257 cv
845.665 328.585 848.001 327.561 850.401 326.153 cv
850.401 328.649 li
847.937 330.217 845.569 331.401 843.201 332.169 cv
840.833 332.937 838.497 333.321 836.161 333.321 cv
833.857 333.321 831.521 332.937 829.153 332.169 cv
826.785 331.401 824.385 330.249 821.921 328.649 cv
821.921 326.153 li
f
831.361 309.065 mo
821.889 309.065 li
821.889 306.185 li
846.209 306.185 li
846.209 309.065 li
843.585 309.065 li
844.641 309.673 845.409 310.441 845.889 311.369 cv
846.369 312.297 846.625 313.385 846.625 314.665 cv
846.625 316.777 845.793 318.505 844.129 319.849 cv
842.465 321.193 840.225 321.833 837.473 321.833 cv
834.721 321.833 832.513 321.193 830.817 319.849 cv
829.153 318.505 828.289 316.777 828.289 314.665 cv
828.289 313.385 828.545 312.297 829.057 311.369 cv
829.569 310.441 830.337 309.673 831.361 309.065 cv
837.473 318.857 mo
839.585 318.857 841.249 318.441 842.465 317.577 cv
843.681 316.713 844.257 315.497 844.257 313.961 cv
844.257 312.457 843.681 311.273 842.465 310.377 cv
841.249 309.513 839.585 309.065 837.473 309.065 cv
835.361 309.065 833.729 309.513 832.513 310.377 cv
831.297 311.273 830.689 312.457 830.689 313.961 cv
830.689 315.497 831.297 316.713 832.513 317.577 cv
833.729 318.441 835.361 318.857 837.473 318.857 cv
f
824.673 282.665 mo
828.001 282.665 li
827.041 283.753 826.305 284.873 825.793 286.089 cv
825.313 287.305 825.057 288.553 825.057 289.897 cv
825.057 292.585 825.889 294.633 827.521 296.041 cv
829.153 297.449 831.489 298.153 834.561 298.153 cv
837.633 298.153 840.001 297.449 841.633 296.041 cv
843.265 294.633 844.065 292.585 844.065 289.897 cv
844.065 288.553 843.841 287.305 843.329 286.089 cv
842.849 284.873 842.113 283.753 841.121 282.665 cv
844.417 282.665 li
845.185 283.785 845.729 284.969 846.081 286.185 cv
846.433 287.401 846.625 288.713 846.625 290.089 cv
846.625 293.609 845.569 296.393 843.425 298.441 cv
841.281 300.489 838.337 301.481 834.561 301.481 cv
830.817 301.481 827.873 300.489 825.697 298.441 cv
823.553 296.393 822.465 293.609 822.465 290.089 cv
822.465 288.681 822.657 287.369 823.009 286.153 cv
823.393 284.937 823.937 283.753 824.673 282.665 cv
f
822.881 272.81 mo
822.881 270.154 li
849.153 278.281 li
849.153 280.938 li
822.881 272.81 li
f
831.361 255.625 mo
821.889 255.625 li
821.889 252.745 li
846.209 252.745 li
846.209 255.625 li
843.585 255.625 li
844.641 256.233 845.409 257.001 845.889 257.929 cv
846.369 258.857 846.625 259.945 846.625 261.225 cv
846.625 263.337 845.793 265.065 844.129 266.409 cv
842.465 267.753 840.225 268.393 837.473 268.393 cv
834.721 268.393 832.513 267.753 830.817 266.409 cv
829.153 265.065 828.289 263.337 828.289 261.225 cv
828.289 259.945 828.545 258.857 829.057 257.929 cv
829.569 257.001 830.337 256.233 831.361 255.625 cv
837.473 265.417 mo
839.585 265.417 841.249 265.001 842.465 264.137 cv
843.681 263.273 844.257 262.057 844.257 260.521 cv
844.257 259.017 843.681 257.833 842.465 256.937 cv
841.249 256.073 839.585 255.625 837.473 255.625 cv
835.361 255.625 833.729 256.073 832.513 256.937 cv
831.297 257.833 830.689 259.017 830.689 260.521 cv
830.689 262.057 831.297 263.273 832.513 264.137 cv
833.729 265.001 835.361 265.417 837.473 265.417 cv
f
822.881 249.897 mo
822.881 230.186 li
825.537 230.186 li
825.537 238.473 li
846.209 238.473 li
846.209 241.641 li
825.537 241.641 li
825.537 249.897 li
822.881 249.897 li
f
821.921 227.722 mo
821.921 225.226 li
824.385 223.69 826.785 222.506 829.153 221.738 cv
831.521 220.97 833.857 220.554 836.161 220.554 cv
838.497 220.554 840.833 220.97 843.201 221.738 cv
845.569 222.506 847.937 223.69 850.401 225.226 cv
850.401 227.722 li
848.001 226.346 845.665 225.322 843.297 224.618 cv
840.961 223.946 838.593 223.594 836.161 223.594 cv
833.761 223.594 831.393 223.946 829.057 224.618 cv
826.721 225.322 824.353 226.346 821.921 227.722 cv
f
822.881 209.674 mo
822.881 207.018 li
849.153 215.146 li
849.153 217.802 li
822.881 209.674 li
f
824.673 186.41 mo
828.001 186.41 li
827.041 187.498 826.305 188.618 825.793 189.834 cv
825.313 191.05 825.057 192.298 825.057 193.642 cv
825.057 196.33 825.889 198.378 827.521 199.786 cv
829.153 201.194 831.489 201.898 834.561 201.898 cv
837.633 201.898 840.001 201.194 841.633 199.786 cv
843.265 198.378 844.065 196.33 844.065 193.642 cv
844.065 192.298 843.841 191.05 843.329 189.834 cv
842.849 188.618 842.113 187.498 841.121 186.41 cv
844.417 186.41 li
845.185 187.53 845.729 188.714 846.081 189.93 cv
846.433 191.146 846.625 192.458 846.625 193.834 cv
846.625 197.354 845.569 200.138 843.425 202.186 cv
841.281 204.234 838.337 205.226 834.561 205.226 cv
830.817 205.226 827.873 204.234 825.697 202.186 cv
823.553 200.138 822.465 197.354 822.465 193.834 cv
822.465 192.426 822.657 191.114 823.009 189.898 cv
823.393 188.682 823.937 187.498 824.673 186.41 cv
f
842.241 180.938 mo
842.241 177.642 li
844.929 177.642 li
849.889 180.202 li
849.889 182.218 li
844.929 180.938 li
842.241 180.938 li
f
821.921 154.41 mo
824.353 155.818 826.721 156.842 829.057 157.514 cv
831.393 158.218 833.761 158.538 836.161 158.538 cv
838.593 158.538 840.961 158.218 843.297 157.514 cv
845.665 156.842 848.001 155.818 850.401 154.41 cv
850.401 156.906 li
847.937 158.474 845.569 159.658 843.201 160.426 cv
840.833 161.194 838.497 161.578 836.161 161.578 cv
833.857 161.578 831.521 161.194 829.153 160.426 cv
826.785 159.658 824.385 158.506 821.921 156.906 cv
821.921 154.41 li
f
843.553 147.882 mo
843.553 142.73 li
825.761 142.73 li
826.881 148.33 li
824.001 148.33 li
822.881 142.762 li
822.881 139.594 li
843.553 139.594 li
843.553 134.442 li
846.209 134.442 li
846.209 147.882 li
843.553 147.882 li
f
822.881 123.37 mo
822.881 120.714 li
849.153 128.842 li
849.153 131.498 li
822.881 123.37 li
f
822.881 117.578 mo
822.881 114.41 li
832.737 114.41 li
822.881 103.946 li
822.881 99.8819 li
833.761 111.466 li
846.209 99.0499 li
846.209 103.21 li
834.977 114.41 li
846.209 114.41 li
846.209 117.578 li
822.881 117.578 li
f
821.921 97.1617 mo
821.921 94.6657 li
824.385 93.1297 826.785 91.9457 829.153 91.1777 cv
831.521 90.4097 833.857 89.9937 836.161 89.9937 cv
838.497 89.9937 840.833 90.4097 843.201 91.1777 cv
845.569 91.9457 847.937 93.1297 850.401 94.6657 cv
850.401 97.1617 li
848.001 95.7857 845.665 94.7617 843.297 94.0577 cv
840.961 93.3857 838.593 93.0337 836.161 93.0337 cv
833.761 93.0337 831.393 93.3857 829.057 94.0577 cv
826.721 94.7617 824.353 95.7857 821.921 97.1617 cv
f
465.942 284.286 mo
465.942 283.502 li
467.801 283.502 468.742 283.278 468.742 282.785 cv
468.742 271.025 li
467.958 271.406 466.972 271.585 465.807 271.585 cv
465.807 270.801 li
467.622 270.801 469.011 270.331 469.951 269.368 cv
470.265 269.368 li
470.422 269.435 li
470.489 269.569 li
470.489 282.785 li
470.489 283.278 471.407 283.502 473.289 283.502 cv
473.289 284.286 li
465.942 284.286 li
.926818 .245335 1 .155612 cmyk
f
465.129 305.241 mo
465.129 306.137 465.286 306.944 465.644 307.616 cv
465.98 308.31 466.473 308.848 467.145 309.228 cv
467.817 309.609 468.601 309.788 469.497 309.788 cv
470.438 309.788 471.334 309.564 472.207 309.072 cv
473.081 308.579 473.82 307.929 474.447 307.123 cv
475.052 306.316 475.478 305.465 475.702 304.569 cv
475.881 304.435 li
476.15 304.435 li
476.284 304.502 li
476.351 304.636 li
476.329 304.704 li
476.06 305.734 475.567 306.72 474.851 307.616 cv
474.111 308.534 473.238 309.251 472.207 309.766 cv
471.177 310.281 470.147 310.55 469.071 310.55 cv
467.907 310.55 466.854 310.281 465.935 309.788 cv
464.995 309.273 464.278 308.556 463.763 307.616 cv
463.247 306.675 463.001 305.622 463.001 304.435 cv
463.001 303.18 463.27 301.948 463.83 300.716 cv
464.39 299.507 465.151 298.409 466.092 297.446 cv
467.033 296.483 468.131 295.721 469.34 295.139 cv
470.55 294.579 471.782 294.288 473.036 294.288 cv
473.529 294.288 473.999 294.377 474.447 294.512 cv
474.895 294.668 475.321 294.892 475.724 295.206 cv
476.105 295.52 476.419 295.856 476.665 296.259 cv
478.435 294.332 li
478.547 294.288 li
478.681 294.288 li
478.815 294.377 li
478.883 294.512 li
477.359 300.56 li
477.359 300.672 477.292 300.716 477.18 300.716 cv
476.777 300.716 li
476.643 300.716 476.598 300.649 476.598 300.47 cv
476.643 300.156 476.687 299.753 476.687 299.283 cv
476.687 298.566 476.553 297.872 476.307 297.222 cv
476.06 296.595 475.679 296.08 475.164 295.676 cv
474.627 295.273 473.999 295.072 473.26 295.072 cv
472.028 295.072 470.908 295.385 469.9 295.99 cv
468.892 296.617 468.041 297.424 467.324 298.409 cv
466.607 299.395 466.07 300.515 465.689 301.724 cv
465.308 302.934 465.129 304.121 465.129 305.241 cv
f
485.747 284.018 mo
484.806 284.018 484.044 283.682 483.507 282.965 cv
482.969 282.271 482.7 281.442 482.7 280.456 cv
482.7 279.515 482.947 278.507 483.44 277.477 cv
483.932 276.447 484.582 275.595 485.433 274.923 cv
486.284 274.251 487.18 273.893 488.166 273.893 cv
488.614 273.893 488.995 274.027 489.353 274.274 cv
489.712 274.52 489.98 274.834 490.182 275.237 cv
491.436 270.242 li
491.481 269.995 491.526 269.794 491.548 269.637 cv
491.548 269.413 491.056 269.279 490.092 269.279 cv
489.936 269.279 489.868 269.189 489.868 268.987 cv
489.913 268.786 li
490.003 268.584 li
490.182 268.495 li
493.206 268.248 li
493.385 268.248 493.475 268.36 493.475 268.539 cv
490.249 281.419 li
490.137 281.688 490.092 282.047 490.092 282.495 cv
490.092 283.144 490.294 283.458 490.742 283.458 cv
491.19 283.458 491.548 283.167 491.795 282.562 cv
492.041 281.979 492.243 281.285 492.422 280.501 cv
492.601 280.367 li
492.87 280.367 li
493.004 280.456 li
493.072 280.591 li
492.803 281.643 492.512 282.472 492.198 283.099 cv
491.884 283.727 491.392 284.018 490.697 284.018 cv
490.182 284.018 489.734 283.861 489.353 283.592 cv
488.972 283.323 488.726 282.92 488.636 282.427 cv
487.673 283.503 486.71 284.018 485.747 284.018 cv
485.769 283.458 mo
486.307 283.458 486.822 283.256 487.337 282.853 cv
487.83 282.45 488.278 281.979 488.636 281.419 cv
488.659 281.33 li
489.891 276.402 li
489.801 275.887 489.6 275.439 489.308 275.058 cv
488.995 274.677 488.614 274.475 488.121 274.475 cv
487.606 274.475 487.136 274.699 486.71 275.103 cv
486.262 275.506 485.904 275.999 485.612 276.559 cv
485.299 277.163 485.03 277.992 484.761 279.023 cv
484.492 280.053 484.38 280.859 484.38 281.442 cv
484.38 281.979 484.492 282.45 484.716 282.853 cv
484.94 283.256 485.276 283.458 485.769 283.458 cv
f
496.768 278.955 mo
496.768 279.851 496.925 280.658 497.283 281.33 cv
497.619 282.024 498.112 282.562 498.784 282.943 cv
499.456 283.323 500.24 283.503 501.136 283.503 cv
502.077 283.503 502.973 283.279 503.846 282.786 cv
504.72 282.293 505.459 281.643 506.086 280.837 cv
506.691 280.031 507.117 279.179 507.341 278.283 cv
507.52 278.149 li
507.789 278.149 li
507.923 278.216 li
507.99 278.351 li
507.968 278.418 li
507.699 279.448 507.206 280.434 506.49 281.33 cv
505.75 282.248 504.877 282.965 503.846 283.48 cv
502.816 283.995 501.786 284.264 500.71 284.264 cv
499.546 284.264 498.493 283.995 497.574 283.503 cv
496.634 282.987 495.917 282.271 495.402 281.33 cv
494.886 280.389 494.64 279.336 494.64 278.149 cv
494.64 276.895 494.909 275.663 495.469 274.431 cv
496.029 273.221 496.79 272.123 497.731 271.16 cv
498.672 270.197 499.77 269.435 500.979 268.853 cv
502.189 268.293 503.421 268.002 504.675 268.002 cv
505.168 268.002 505.638 268.091 506.086 268.226 cv
506.534 268.383 506.96 268.607 507.363 268.92 cv
507.744 269.234 508.058 269.57 508.304 269.973 cv
510.074 268.047 li
510.186 268.002 li
510.32 268.002 li
510.454 268.091 li
510.522 268.226 li
508.998 274.274 li
508.998 274.386 508.931 274.431 508.819 274.431 cv
508.416 274.431 li
508.282 274.431 508.237 274.363 508.237 274.184 cv
508.282 273.871 508.326 273.467 508.326 272.997 cv
508.326 272.28 508.192 271.586 507.946 270.936 cv
507.699 270.309 507.318 269.794 506.803 269.391 cv
506.266 268.987 505.638 268.786 504.899 268.786 cv
503.667 268.786 502.547 269.099 501.539 269.704 cv
500.531 270.331 499.68 271.138 498.963 272.123 cv
498.246 273.109 497.709 274.229 497.328 275.439 cv
496.947 276.648 496.768 277.835 496.768 278.955 cv
f
486.747 310.052 mo
485.806 310.052 485.044 309.716 484.507 308.999 cv
483.969 308.305 483.7 307.476 483.7 306.491 cv
483.7 305.55 483.947 304.542 484.44 303.511 cv
484.932 302.481 485.582 301.63 486.433 300.958 cv
487.284 300.286 488.18 299.927 489.166 299.927 cv
489.614 299.927 489.995 300.062 490.353 300.308 cv
490.712 300.555 490.98 300.868 491.182 301.271 cv
492.436 296.276 li
492.481 296.03 492.526 295.828 492.548 295.671 cv
492.548 295.447 492.056 295.313 491.092 295.313 cv
490.936 295.313 490.868 295.223 490.868 295.022 cv
490.913 294.82 li
491.003 294.619 li
491.182 294.529 li
494.206 294.283 li
494.385 294.283 494.475 294.395 494.475 294.574 cv
491.249 307.454 li
491.137 307.723 491.092 308.081 491.092 308.529 cv
491.092 309.179 491.294 309.492 491.742 309.492 cv
492.19 309.492 492.548 309.201 492.795 308.596 cv
493.041 308.014 493.243 307.319 493.422 306.535 cv
493.601 306.401 li
493.87 306.401 li
494.004 306.491 li
494.072 306.625 li
493.803 307.678 493.512 308.507 493.198 309.134 cv
492.884 309.761 492.392 310.052 491.697 310.052 cv
491.182 310.052 490.734 309.895 490.353 309.627 cv
489.972 309.358 489.726 308.955 489.636 308.462 cv
488.673 309.537 487.71 310.052 486.747 310.052 cv
486.769 309.492 mo
487.307 309.492 487.822 309.291 488.337 308.887 cv
488.83 308.484 489.278 308.014 489.636 307.454 cv
489.659 307.364 li
490.891 302.436 li
490.801 301.921 490.6 301.473 490.308 301.092 cv
489.995 300.711 489.614 300.51 489.121 300.51 cv
488.606 300.51 488.136 300.734 487.71 301.137 cv
487.262 301.54 486.904 302.033 486.612 302.593 cv
486.299 303.198 486.03 304.027 485.761 305.057 cv
485.492 306.087 485.38 306.894 485.38 307.476 cv
485.38 308.014 485.492 308.484 485.716 308.887 cv
485.94 309.291 486.276 309.492 486.769 309.492 cv
f
495.528 309.537 mo
495.573 309.335 li
495.662 309.134 li
495.842 309.044 li
497.118 309.044 497.97 309.022 498.395 308.932 cv
498.798 308.843 499.022 308.619 499.112 308.283 cv
502.181 295.985 li
502.226 295.806 502.27 295.649 502.27 295.492 cv
502.27 295.38 502.002 295.313 501.486 295.313 cv
500.187 295.313 li
499.179 295.313 498.395 295.47 497.858 295.783 cv
497.32 296.097 496.917 296.5 496.67 296.993 cv
496.402 297.486 496.088 298.315 495.685 299.457 cv
495.64 299.591 495.55 299.659 495.461 299.659 cv
495.259 299.659 li
495.102 299.659 495.035 299.569 495.035 299.367 cv
496.626 294.731 li
496.648 294.596 496.715 294.529 496.85 294.529 cv
510.088 294.529 li
510.222 294.529 510.312 294.641 510.312 294.82 cv
509.573 299.457 li
509.483 299.591 li
509.349 299.659 li
509.147 299.659 li
508.99 299.659 508.923 299.569 508.923 299.367 cv
509.08 298.315 509.17 297.575 509.17 297.127 cv
509.17 296.612 509.058 296.209 508.834 295.94 cv
508.61 295.671 508.318 295.515 507.982 295.425 cv
507.624 295.358 507.176 295.313 506.616 295.313 cv
505.294 295.313 li
504.891 295.313 504.622 295.358 504.488 295.425 cv
504.354 295.515 504.219 295.716 504.13 296.075 cv
501.061 308.372 li
501.038 308.462 li
501.016 308.574 li
501.016 308.775 501.128 308.887 501.352 308.932 cv
501.733 309.022 502.562 309.044 503.838 309.044 cv
503.973 309.044 504.062 309.156 504.062 309.335 cv
503.995 309.559 503.95 309.694 503.928 309.739 cv
503.883 309.806 503.816 309.828 503.682 309.828 cv
495.752 309.828 li
495.595 309.828 495.528 309.739 495.528 309.537 cv
f
461.859 292.286 mo
477.849 292.286 li
477.849 290.286 li
461.859 290.286 li
cp
f
481.849 292.286 mo
509.488 292.286 li
509.488 290.286 li
481.849 290.286 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
