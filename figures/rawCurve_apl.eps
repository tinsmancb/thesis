%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: rawCurve.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: luli
%%CreationDate: 6/4/16, 1:21 PM
%%BoundingBox: 0 0 864 1296
%%HiResBoundingBox: 0 0 864 1296
%%CropBox: 0 0 864 1296
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-04-19T17:02:54-04:00"
   xmp:CreatorTool="matplotlib 1.4.3, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -1296 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1296 li
864 1296 li
864 0 li
cp
clp
gsave
0 1296 mo
864 1296 li
864 0 li
0 0 li
cp
clp
0 1296 mo
864 1296 li
864 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
159.608 603.225 mo
732.556 603.225 li
732.556 43.4707 li
159.608 43.4707 li
cp
f
gsave
159.608 603.225 mo
732.556 603.225 li
732.556 43.4707 li
159.608 43.4707 li
cp
clp
2 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
159.608 222.525 mo
161.327 223.842 li
163.045 224.843 li
164.764 225.553 li
166.483 225.998 li
168.202 226.203 li
169.921 226.195 li
171.64 225.998 li
174.504 225.414 li
175.077 225.113 li
178.515 222.439 li
179.088 222.229 li
179.661 222.214 li
180.807 222.477 li
181.953 222.844 li
182.526 222.833 li
184.244 222.146 li
185.39 221.982 li
186.536 222.217 li
188.255 222.999 li
189.401 223.749 li
193.412 226.787 li
194.558 227.226 li
195.13 227.265 li
196.276 227.003 li
197.995 226.408 li
199.141 226.283 li
200.86 226.411 li
201.433 226.272 li
203.725 225.283 li
204.298 225.319 li
204.871 225.56 li
206.589 226.676 li
208.881 227.14 li
209.454 227.439 li
210.6 228.527 li
211.746 229.552 li
216.33 233 li
217.475 234.349 li
218.621 235.927 li
219.194 236.487 li
219.767 236.769 li
220.34 236.771 li
220.913 236.594 li
222.059 235.882 li
223.778 234.652 li
224.924 234.208 li
226.643 233.782 li
227.216 233.463 li
229.507 231.525 li
230.08 231.305 li
230.653 231.349 li
231.226 231.6 li
233.518 233.058 li
234.091 233.122 li
234.664 233.005 li
235.81 232.469 li
238.675 231.638 li
240.393 230.652 li
240.966 230.551 li
242.112 230.716 li
243.258 231.161 li
244.404 231.835 li
245.55 232.68 li
246.696 233.217 li
248.415 233.566 li
248.988 233.929 li
250.134 235.116 li
252.425 237.827 li
252.998 238.293 li
253.571 238.598 li
254.717 238.837 li
255.29 238.926 li
255.863 239.153 li
256.436 239.669 li
257.582 241.278 li
258.728 243.08 li
259.301 243.807 li
259.874 244.295 li
260.447 244.618 li
261.02 244.802 li
261.592 244.827 li
262.738 244.317 li
265.603 242.692 li
266.176 242.591 li
266.749 242.622 li
267.895 243.014 li
269.041 243.702 li
270.187 244.125 li
273.051 244.745 li
274.197 244.954 li
278.208 245.019 li
278.781 244.999 li
279.927 244.646 li
281.073 243.944 li
282.219 243.097 li
283.365 242.556 li
285.656 242.188 li
286.802 241.591 li
287.948 240.838 li
288.521 240.573 li
289.667 240.358 li
290.813 240.344 li
291.386 240.499 li
292.532 241.128 li
293.678 242.03 li
298.261 246.323 li
300.553 247.786 li
303.418 249.25 li
304.564 250.411 li
306.283 252.359 li
307.428 253.214 li
309.72 254.299 li
310.866 254.759 li
313.158 255.341 li
314.304 256.005 li
317.169 258.045 li
321.179 260.679 li
322.898 261.582 li
325.763 262.641 li
327.482 263.277 li
332.065 265.431 li
333.211 265.715 li
334.357 265.856 li
336.076 265.862 li
337.795 266.038 li
339.513 266.247 li
340.086 266.455 li
340.659 266.84 li
342.951 268.971 li
344.097 269.614 li
346.389 270.308 li
347.535 270.893 li
349.254 272.112 li
350.4 273.213 li
351.545 274.561 li
357.275 283.13 li
358.421 284.958 li
360.713 287.903 li
363.577 291.38 li
366.442 294.955 li
369.307 298.519 li
373.317 302.969 li
376.182 307.179 li
377.901 309.459 li
380.193 312.586 li
383.058 316.836 li
385.349 320.826 li
386.495 322.277 li
388.214 323.996 li
389.933 326.148 li
392.798 329.669 li
393.944 331.119 li
394.517 332.013 li
395.662 334.458 li
396.808 337.486 li
398.527 342.308 li
401.965 350.809 li
403.684 354.403 li
405.403 358.014 li
407.121 362.458 li
408.84 367.494 li
411.705 377.158 li
413.997 384.742 li
416.862 393.839 li
418.58 399.981 li
420.299 406.903 li
422.591 417.057 li
424.883 427.924 li
426.029 432.368 li
430.039 445.748 li
431.185 450.499 li
432.904 458.745 li
434.05 465.247 li
435.196 473.65 li
439.779 510.254 li
440.925 516.635 li
441.498 518.963 li
442.071 520.711 li
442.644 521.85 li
443.217 522.401 li
443.79 522.33 li
444.363 521.631 li
444.936 520.203 li
445.509 518.055 li
446.082 515.144 li
446.655 511.423 li
447.801 501.636 li
448.947 489.046 li
450.093 473.865 li
451.238 456.097 li
452.957 424.652 li
455.822 365.145 li
458.114 318.317 li
460.979 267.238 li
462.124 249.085 li
463.843 226.893 li
464.989 214.221 li
466.708 198.135 li
468.427 184.134 li
470.146 172.08 li
471.865 161.993 li
473.01 156.115 li
474.156 151.138 li
475.302 147.191 li
476.448 144.175 li
478.167 140.643 li
479.313 138.677 li
480.459 137.196 li
481.605 136.218 li
482.178 135.904 li
483.324 135.665 li
484.469 135.624 li
485.615 135.912 li
486.188 136.156 li
486.761 136.22 li
487.334 135.976 li
488.48 134.615 li
489.626 133.192 li
490.199 132.81 li
490.772 132.71 li
492.491 132.858 li
493.637 132.566 li
494.783 131.959 li
497.647 129.919 li
498.793 129.508 li
499.939 129.406 li
501.085 129.583 li
502.804 130.045 li
503.95 130.097 li
505.096 129.909 li
507.387 129.262 li
509.679 129.014 li
510.825 129.013 li
512.544 129.318 li
513.69 129.553 li
515.982 129.807 li
517.128 130.286 li
518.273 131.263 li
519.419 132.194 li
520.565 132.746 li
522.857 133.346 li
524.003 133.399 li
525.149 133.308 li
526.295 133.574 li
528.014 134.192 li
528.586 134.27 li
529.159 134.231 li
531.451 133.629 li
532.597 133.681 li
534.316 134.19 li
537.181 135.241 li
538.327 135.569 li
540.045 135.897 li
542.91 137.855 li
543.483 137.793 li
544.629 137.214 li
545.775 136.94 li
546.921 137.022 li
548.067 137.1 li
549.213 137.019 li
549.786 136.855 li
550.931 136.192 li
553.223 134.628 li
553.796 134.378 li
556.088 133.814 li
557.807 133.325 li
558.38 133.319 li
558.953 133.589 li
559.526 134.064 li
560.672 135.451 li
562.39 137.767 li
564.682 140.269 li
565.828 142.166 li
567.547 145.385 li
568.693 147.375 li
569.266 147.994 li
569.839 148.298 li
570.412 148.364 li
570.985 148.31 li
572.131 148.014 li
572.703 148.118 li
575.568 149.859 li
576.714 150.187 li
577.86 150.255 li
579.579 149.847 li
582.444 148.812 li
584.162 148.562 li
585.308 148.685 li
587.027 148.947 li
588.746 149.418 li
590.465 149.677 li
591.611 149.908 li
593.33 150.377 li
593.903 150.413 li
594.476 150.232 li
596.767 148.966 li
597.34 148.768 li
597.913 148.689 li
599.059 148.853 li
602.497 149.801 li
603.643 150.296 li
605.935 151.381 li
608.799 152.421 li
610.518 152.993 li
612.237 153.591 li
613.383 154.062 li
616.248 154.933 li
617.966 155.885 li
619.112 156.28 li
620.258 156.438 li
621.404 156.597 li
623.696 157.201 li
624.842 157.614 li
627.134 158.083 li
628.852 158.036 li
629.998 157.993 li
631.144 158.154 li
632.29 158.617 li
635.155 160.034 li
635.728 160.159 li
636.301 160.166 li
637.447 159.882 li
639.166 159.205 li
640.311 159.246 li
640.884 159.417 li
642.03 160.153 li
643.176 160.966 li
644.322 161.47 li
645.468 161.551 li
647.187 161.091 li
651.197 159.734 li
652.916 159.076 li
654.062 158.715 li
655.208 158.417 li
655.781 158.358 li
656.354 158.445 li
656.927 158.708 li
658.073 159.707 li
659.219 160.565 li
659.792 160.799 li
660.365 160.825 li
660.938 160.643 li
663.229 159.37 li
665.521 157.882 li
667.24 157.188 li
667.813 157.095 li
668.959 157.264 li
669.532 157.548 li
672.969 160.243 li
677.553 162.792 li
680.418 165.245 li
681.564 166.429 li
682.71 168.05 li
685.001 171.478 li
685.574 172.012 li
686.147 172.286 li
686.72 172.256 li
687.866 171.418 li
689.585 169.83 li
690.731 169.344 li
694.169 168.427 li
695.887 168.163 li
696.46 168.25 li
697.606 168.752 li
699.325 170.016 li
700.471 170.482 li
702.19 170.843 li
706.201 171.652 li
707.919 172.72 li
709.638 173.718 li
710.784 174.059 li
711.93 174.171 li
713.649 174.019 li
715.941 173.654 li
716.514 173.637 li
717.086 173.746 li
718.805 174.393 li
727.4 175.615 li
731.983 176.052 li
732.556 176.089 li
/1 
[/DeviceCMYK] /CSA add_res
.930816 .793027 0 0 cmyk
@
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
159.608 43.4707 mo
732.556 43.4707 li
1 /0 /CSD get_res sepcs
1 sep
@
732.556 603.225 mo
732.556 43.4707 li
@
159.608 603.225 mo
732.556 603.225 li
@
159.608 603.225 mo
159.608 43.4707 li
@
211.171 603.225 mo
211.171 588.225 li
f
2 lw
0 lc
1 lj
211.171 603.225 mo
211.171 588.225 li
@
211.171 43.4707 mo
211.171 58.4707 li
f
211.171 43.4707 mo
211.171 58.4707 li
@
269.899 603.225 mo
269.899 588.225 li
f
269.899 603.225 mo
269.899 588.225 li
@
269.899 43.4707 mo
269.899 58.4707 li
f
269.899 43.4707 mo
269.899 58.4707 li
@
328.627 603.225 mo
328.627 588.225 li
f
328.627 603.225 mo
328.627 588.225 li
@
328.627 43.4707 mo
328.627 58.4707 li
f
328.627 43.4707 mo
328.627 58.4707 li
@
387.354 603.225 mo
387.354 588.225 li
f
387.354 603.225 mo
387.354 588.225 li
@
387.354 43.4707 mo
387.354 58.4707 li
f
387.354 43.4707 mo
387.354 58.4707 li
@
446.082 603.225 mo
446.082 588.225 li
f
446.082 603.225 mo
446.082 588.225 li
@
446.082 43.4707 mo
446.082 58.4707 li
f
446.082 43.4707 mo
446.082 58.4707 li
@
504.81 603.225 mo
504.81 588.225 li
f
504.81 603.225 mo
504.81 588.225 li
@
504.81 43.4707 mo
504.81 58.4707 li
f
504.81 43.4707 mo
504.81 58.4707 li
@
563.537 603.225 mo
563.537 588.225 li
f
563.537 603.225 mo
563.537 588.225 li
@
563.537 43.4707 mo
563.537 58.4707 li
f
563.537 43.4707 mo
563.537 58.4707 li
@
622.265 603.225 mo
622.265 588.225 li
f
622.265 603.225 mo
622.265 588.225 li
@
622.265 43.4707 mo
622.265 58.4707 li
f
622.265 43.4707 mo
622.265 58.4707 li
@
680.993 603.225 mo
680.993 588.225 li
f
680.993 603.225 mo
680.993 588.225 li
@
680.993 43.4707 mo
680.993 58.4707 li
f
680.993 43.4707 mo
680.993 58.4707 li
@
159.608 561.762 mo
174.608 561.762 li
f
159.608 561.762 mo
174.608 561.762 li
@
732.556 561.762 mo
717.556 561.762 li
f
732.556 561.762 mo
717.556 561.762 li
@
78.4087 549.342 mo
76.7767 549.342 75.5607 550.142 74.7287 551.742 cv
73.8967 553.342 73.5127 555.742 73.5127 558.942 cv
73.5127 562.142 73.8967 564.542 74.7287 566.142 cv
75.5607 567.742 76.7767 568.542 78.4087 568.542 cv
80.0407 568.542 81.2567 567.742 82.0887 566.142 cv
82.8887 564.542 83.3047 562.142 83.3047 558.942 cv
83.3047 555.742 82.8887 553.342 82.0887 551.742 cv
81.2567 550.142 80.0407 549.342 78.4087 549.342 cv
78.4087 546.846 mo
81.0007 546.846 82.9847 547.902 84.3927 549.95 cv
85.7687 552.03 86.4727 555.038 86.4727 558.942 cv
86.4727 562.878 85.7687 565.886 84.3927 567.934 cv
82.9847 569.982 81.0007 571.006 78.4087 571.006 cv
75.7847 571.006 73.7687 569.982 72.3927 567.934 cv
71.0167 565.886 70.3447 562.878 70.3447 558.942 cv
70.3447 555.038 71.0167 552.03 72.3927 549.95 cv
73.7687 547.902 75.7847 546.846 78.4087 546.846 cv
f
92.0087 566.622 mo
95.3047 566.622 li
95.3047 570.59 li
92.0087 570.59 li
92.0087 566.622 li
f
102.729 567.934 mo
107.881 567.934 li
107.881 550.142 li
102.281 551.262 li
102.281 548.382 li
107.849 547.262 li
111.017 547.262 li
111.017 567.934 li
116.169 567.934 li
116.169 570.59 li
102.729 570.59 li
102.729 567.934 li
f
129.289 559.518 mo
127.785 559.518 126.601 559.934 125.737 560.734 cv
124.873 561.534 124.457 562.622 124.457 564.03 cv
124.457 565.438 124.873 566.558 125.737 567.358 cv
126.601 568.158 127.785 568.542 129.289 568.542 cv
130.761 568.542 131.945 568.158 132.809 567.326 cv
133.673 566.526 134.121 565.438 134.121 564.03 cv
134.121 562.622 133.673 561.534 132.841 560.734 cv
131.977 559.934 130.793 559.518 129.289 559.518 cv
126.121 558.174 mo
124.777 557.854 123.721 557.214 122.953 556.286 cv
122.185 555.358 121.833 554.238 121.833 552.894 cv
121.833 551.038 122.473 549.566 123.817 548.478 cv
125.129 547.39 126.953 546.846 129.289 546.846 cv
131.593 546.846 133.417 547.39 134.761 548.478 cv
136.073 549.566 136.745 551.038 136.745 552.894 cv
136.745 554.238 136.361 555.358 135.593 556.286 cv
134.825 557.214 133.801 557.854 132.457 558.174 cv
133.961 558.526 135.145 559.23 136.009 560.254 cv
136.841 561.278 137.289 562.558 137.289 564.03 cv
137.289 566.302 136.585 568.03 135.209 569.214 cv
133.801 570.43 131.849 571.006 129.289 571.006 cv
126.697 571.006 124.713 570.43 123.337 569.214 cv
121.961 568.03 121.289 566.302 121.289 564.03 cv
121.289 562.558 121.705 561.278 122.569 560.254 cv
123.401 559.23 124.585 558.526 126.121 558.174 cv
124.969 553.182 mo
124.969 554.398 125.321 555.358 126.089 556.03 cv
126.857 556.702 127.913 557.022 129.289 557.022 cv
130.633 557.022 131.689 556.702 132.457 556.03 cv
133.225 555.358 133.609 554.398 133.609 553.182 cv
133.609 551.966 133.225 551.038 132.457 550.366 cv
131.689 549.694 130.633 549.342 129.289 549.342 cv
127.913 549.342 126.857 549.694 126.089 550.366 cv
125.321 551.038 124.969 551.966 124.969 553.182 cv
f
149.641 549.342 mo
148.009 549.342 146.793 550.142 145.961 551.742 cv
145.129 553.342 144.745 555.742 144.745 558.942 cv
144.745 562.142 145.129 564.542 145.961 566.142 cv
146.793 567.742 148.009 568.542 149.641 568.542 cv
151.273 568.542 152.489 567.742 153.321 566.142 cv
154.121 564.542 154.537 562.142 154.537 558.942 cv
154.537 555.742 154.121 553.342 153.321 551.742 cv
152.489 550.142 151.273 549.342 149.641 549.342 cv
149.641 546.846 mo
152.233 546.846 154.217 547.902 155.625 549.95 cv
157.001 552.03 157.705 555.038 157.705 558.942 cv
157.705 562.878 157.001 565.886 155.625 567.934 cv
154.217 569.982 152.233 571.006 149.641 571.006 cv
147.017 571.006 145.001 569.982 143.625 567.934 cv
142.249 565.886 141.577 562.878 141.577 558.942 cv
141.577 555.038 142.249 552.03 143.625 549.95 cv
145.001 547.902 147.017 546.846 149.641 546.846 cv
f
159.608 458.104 mo
174.608 458.104 li
f
159.608 458.104 mo
174.608 458.104 li
@
732.556 458.104 mo
717.556 458.104 li
f
732.556 458.104 mo
717.556 458.104 li
@
79.0806 445.684 mo
77.4486 445.684 76.2326 446.484 75.4006 448.084 cv
74.5686 449.684 74.1846 452.084 74.1846 455.284 cv
74.1846 458.484 74.5686 460.884 75.4006 462.484 cv
76.2326 464.084 77.4486 464.884 79.0806 464.884 cv
80.7126 464.884 81.9286 464.084 82.7606 462.484 cv
83.5606 460.884 83.9766 458.484 83.9766 455.284 cv
83.9766 452.084 83.5606 449.684 82.7606 448.084 cv
81.9286 446.484 80.7126 445.684 79.0806 445.684 cv
79.0806 443.188 mo
81.6726 443.188 83.6566 444.244 85.0646 446.292 cv
86.4406 448.372 87.1446 451.38 87.1446 455.284 cv
87.1446 459.22 86.4406 462.228 85.0646 464.276 cv
83.6566 466.324 81.6726 467.348 79.0806 467.348 cv
76.4566 467.348 74.4406 466.324 73.0646 464.276 cv
71.6886 462.228 71.0166 459.22 71.0166 455.284 cv
71.0166 451.38 71.6886 448.372 73.0646 446.292 cv
74.4406 444.244 76.4566 443.188 79.0806 443.188 cv
f
92.6806 462.964 mo
95.9766 462.964 li
95.9766 466.932 li
92.6806 466.932 li
92.6806 462.964 li
f
103.4 464.276 mo
108.552 464.276 li
108.552 446.484 li
102.952 447.604 li
102.952 444.724 li
108.52 443.604 li
111.688 443.604 li
111.688 464.276 li
116.84 464.276 li
116.84 466.932 li
103.4 466.932 li
103.4 464.276 li
f
129.96 455.86 mo
128.456 455.86 127.272 456.276 126.408 457.076 cv
125.544 457.876 125.128 458.964 125.128 460.372 cv
125.128 461.78 125.544 462.9 126.408 463.7 cv
127.272 464.5 128.456 464.884 129.96 464.884 cv
131.432 464.884 132.616 464.5 133.48 463.668 cv
134.344 462.868 134.792 461.78 134.792 460.372 cv
134.792 458.964 134.344 457.876 133.512 457.076 cv
132.648 456.276 131.464 455.86 129.96 455.86 cv
126.792 454.516 mo
125.448 454.196 124.392 453.556 123.624 452.628 cv
122.856 451.7 122.504 450.58 122.504 449.236 cv
122.504 447.38 123.144 445.908 124.488 444.82 cv
125.8 443.732 127.624 443.188 129.96 443.188 cv
132.264 443.188 134.088 443.732 135.432 444.82 cv
136.744 445.908 137.416 447.38 137.416 449.236 cv
137.416 450.58 137.032 451.7 136.264 452.628 cv
135.496 453.556 134.472 454.196 133.128 454.516 cv
134.632 454.868 135.816 455.572 136.68 456.596 cv
137.512 457.62 137.96 458.9 137.96 460.372 cv
137.96 462.644 137.256 464.372 135.88 465.556 cv
134.472 466.772 132.52 467.348 129.96 467.348 cv
127.368 467.348 125.384 466.772 124.008 465.556 cv
122.632 464.372 121.96 462.644 121.96 460.372 cv
121.96 458.9 122.376 457.62 123.24 456.596 cv
124.072 455.572 125.256 454.868 126.792 454.516 cv
125.64 449.524 mo
125.64 450.74 125.992 451.7 126.76 452.372 cv
127.528 453.044 128.584 453.364 129.96 453.364 cv
131.304 453.364 132.36 453.044 133.128 452.372 cv
133.896 451.7 134.28 450.74 134.28 449.524 cv
134.28 448.308 133.896 447.38 133.128 446.708 cv
132.36 446.036 131.304 445.684 129.96 445.684 cv
128.584 445.684 127.528 446.036 126.76 446.708 cv
125.992 447.38 125.64 448.308 125.64 449.524 cv
f
143.592 443.604 mo
155.977 443.604 li
155.977 446.26 li
146.473 446.26 li
146.473 451.988 li
146.921 451.828 147.401 451.7 147.849 451.636 cv
148.297 451.572 148.777 451.508 149.225 451.508 cv
151.816 451.508 153.865 452.244 155.401 453.652 cv
156.937 455.092 157.704 457.012 157.704 459.444 cv
157.704 461.972 156.905 463.924 155.337 465.3 cv
153.769 466.676 151.561 467.348 148.745 467.348 cv
147.753 467.348 146.76 467.252 145.737 467.124 cv
144.713 466.964 143.689 466.74 142.601 466.388 cv
142.601 463.22 li
143.529 463.732 144.489 464.116 145.513 464.372 cv
146.505 464.628 147.561 464.724 148.681 464.724 cv
150.473 464.724 151.913 464.276 152.969 463.316 cv
153.993 462.356 154.536 461.076 154.536 459.444 cv
154.536 457.844 153.993 456.564 152.969 455.604 cv
151.913 454.644 150.473 454.164 148.681 454.164 cv
147.849 454.164 146.985 454.26 146.153 454.452 cv
145.321 454.644 144.457 454.932 143.592 455.316 cv
143.592 443.604 li
f
159.608 354.445 mo
174.608 354.445 li
f
159.608 354.445 mo
174.608 354.445 li
@
732.556 354.445 mo
717.556 354.445 li
f
732.556 354.445 mo
717.556 354.445 li
@
78.4087 342.025 mo
76.7767 342.025 75.5607 342.825 74.7287 344.425 cv
73.8967 346.025 73.5127 348.425 73.5127 351.625 cv
73.5127 354.825 73.8967 357.225 74.7287 358.825 cv
75.5607 360.425 76.7767 361.225 78.4087 361.225 cv
80.0407 361.225 81.2567 360.425 82.0887 358.825 cv
82.8887 357.225 83.3047 354.825 83.3047 351.625 cv
83.3047 348.425 82.8887 346.025 82.0887 344.425 cv
81.2567 342.825 80.0407 342.025 78.4087 342.025 cv
78.4087 339.529 mo
81.0007 339.529 82.9847 340.585 84.3927 342.633 cv
85.7687 344.713 86.4727 347.721 86.4727 351.625 cv
86.4727 355.561 85.7687 358.569 84.3927 360.617 cv
82.9847 362.665 81.0007 363.689 78.4087 363.689 cv
75.7847 363.689 73.7687 362.665 72.3927 360.617 cv
71.0167 358.569 70.3447 355.561 70.3447 351.625 cv
70.3447 347.721 71.0167 344.713 72.3927 342.633 cv
73.7687 340.585 75.7847 339.529 78.4087 339.529 cv
f
92.0087 359.305 mo
95.3047 359.305 li
95.3047 363.273 li
92.0087 363.273 li
92.0087 359.305 li
f
102.729 360.617 mo
107.881 360.617 li
107.881 342.825 li
102.281 343.945 li
102.281 341.065 li
107.849 339.945 li
111.017 339.945 li
111.017 360.617 li
116.169 360.617 li
116.169 363.273 li
102.729 363.273 li
102.729 360.617 li
f
122.633 362.793 mo
122.633 359.913 li
123.401 360.297 124.201 360.585 125.033 360.777 cv
125.833 360.969 126.633 361.065 127.433 361.065 cv
129.481 361.065 131.081 360.393 132.169 358.985 cv
133.257 357.577 133.897 355.465 134.089 352.585 cv
133.449 353.481 132.681 354.185 131.785 354.665 cv
130.857 355.145 129.833 355.369 128.713 355.369 cv
126.345 355.369 124.489 354.665 123.145 353.257 cv
121.801 351.849 121.129 349.929 121.129 347.465 cv
121.129 345.097 121.833 343.177 123.241 341.705 cv
124.649 340.265 126.537 339.529 128.905 339.529 cv
131.593 339.529 133.673 340.585 135.081 342.633 cv
136.489 344.713 137.225 347.721 137.225 351.625 cv
137.225 355.337 136.329 358.249 134.601 360.425 cv
132.841 362.601 130.505 363.689 127.561 363.689 cv
126.761 363.689 125.961 363.593 125.161 363.465 cv
124.329 363.337 123.497 363.113 122.633 362.793 cv
128.905 352.905 mo
130.313 352.905 131.433 352.425 132.265 351.465 cv
133.097 350.505 133.513 349.161 133.513 347.465 cv
133.513 345.801 133.097 344.457 132.265 343.497 cv
131.433 342.537 130.313 342.025 128.905 342.025 cv
127.497 342.025 126.377 342.537 125.545 343.497 cv
124.713 344.457 124.297 345.801 124.297 347.465 cv
124.297 349.161 124.713 350.505 125.545 351.465 cv
126.377 352.425 127.497 352.905 128.905 352.905 cv
f
149.641 342.025 mo
148.009 342.025 146.793 342.825 145.961 344.425 cv
145.129 346.025 144.745 348.425 144.745 351.625 cv
144.745 354.825 145.129 357.225 145.961 358.825 cv
146.793 360.425 148.009 361.225 149.641 361.225 cv
151.273 361.225 152.489 360.425 153.321 358.825 cv
154.121 357.225 154.537 354.825 154.537 351.625 cv
154.537 348.425 154.121 346.025 153.321 344.425 cv
152.489 342.825 151.273 342.025 149.641 342.025 cv
149.641 339.529 mo
152.233 339.529 154.217 340.585 155.625 342.633 cv
157.001 344.713 157.705 347.721 157.705 351.625 cv
157.705 355.561 157.001 358.569 155.625 360.617 cv
154.217 362.665 152.233 363.689 149.641 363.689 cv
147.017 363.689 145.001 362.665 143.625 360.617 cv
142.249 358.569 141.577 355.561 141.577 351.625 cv
141.577 347.721 142.249 344.713 143.625 342.633 cv
145.001 340.585 147.017 339.529 149.641 339.529 cv
f
159.608 250.787 mo
174.608 250.787 li
f
159.608 250.787 mo
174.608 250.787 li
@
732.556 250.787 mo
717.556 250.787 li
f
732.556 250.787 mo
717.556 250.787 li
@
79.0806 238.367 mo
77.4486 238.367 76.2326 239.167 75.4006 240.767 cv
74.5686 242.367 74.1846 244.767 74.1846 247.967 cv
74.1846 251.167 74.5686 253.567 75.4006 255.167 cv
76.2326 256.767 77.4486 257.567 79.0806 257.567 cv
80.7126 257.567 81.9286 256.767 82.7606 255.167 cv
83.5606 253.567 83.9766 251.167 83.9766 247.967 cv
83.9766 244.767 83.5606 242.367 82.7606 240.767 cv
81.9286 239.167 80.7126 238.367 79.0806 238.367 cv
79.0806 235.871 mo
81.6726 235.871 83.6566 236.927 85.0646 238.975 cv
86.4406 241.055 87.1446 244.063 87.1446 247.967 cv
87.1446 251.903 86.4406 254.911 85.0646 256.959 cv
83.6566 259.007 81.6726 260.031 79.0806 260.031 cv
76.4566 260.031 74.4406 259.007 73.0646 256.959 cv
71.6886 254.911 71.0166 251.903 71.0166 247.967 cv
71.0166 244.063 71.6886 241.055 73.0646 238.975 cv
74.4406 236.927 76.4566 235.871 79.0806 235.871 cv
f
92.6806 255.647 mo
95.9766 255.647 li
95.9766 259.615 li
92.6806 259.615 li
92.6806 255.647 li
f
103.4 256.959 mo
108.552 256.959 li
108.552 239.167 li
102.952 240.287 li
102.952 237.407 li
108.52 236.287 li
111.688 236.287 li
111.688 256.959 li
116.84 256.959 li
116.84 259.615 li
103.4 259.615 li
103.4 256.959 li
f
123.304 259.135 mo
123.304 256.255 li
124.072 256.639 124.872 256.927 125.704 257.119 cv
126.504 257.311 127.304 257.407 128.104 257.407 cv
130.152 257.407 131.752 256.735 132.84 255.327 cv
133.928 253.919 134.568 251.807 134.76 248.927 cv
134.12 249.823 133.352 250.527 132.456 251.007 cv
131.528 251.487 130.504 251.711 129.384 251.711 cv
127.016 251.711 125.16 251.007 123.816 249.599 cv
122.472 248.191 121.8 246.271 121.8 243.807 cv
121.8 241.439 122.504 239.519 123.912 238.047 cv
125.32 236.607 127.208 235.871 129.576 235.871 cv
132.264 235.871 134.344 236.927 135.752 238.975 cv
137.16 241.055 137.896 244.063 137.896 247.967 cv
137.896 251.679 137 254.591 135.272 256.767 cv
133.512 258.943 131.176 260.031 128.232 260.031 cv
127.432 260.031 126.632 259.935 125.832 259.807 cv
125 259.679 124.168 259.455 123.304 259.135 cv
129.576 249.247 mo
130.984 249.247 132.104 248.767 132.936 247.807 cv
133.768 246.847 134.184 245.503 134.184 243.807 cv
134.184 242.143 133.768 240.799 132.936 239.839 cv
132.104 238.879 130.984 238.367 129.576 238.367 cv
128.168 238.367 127.048 238.879 126.216 239.839 cv
125.384 240.799 124.968 242.143 124.968 243.807 cv
124.968 245.503 125.384 246.847 126.216 247.807 cv
127.048 248.767 128.168 249.247 129.576 249.247 cv
f
143.592 236.287 mo
155.977 236.287 li
155.977 238.943 li
146.473 238.943 li
146.473 244.671 li
146.921 244.511 147.401 244.383 147.849 244.319 cv
148.297 244.255 148.777 244.191 149.225 244.191 cv
151.816 244.191 153.865 244.927 155.401 246.335 cv
156.937 247.775 157.704 249.695 157.704 252.127 cv
157.704 254.655 156.905 256.607 155.337 257.983 cv
153.769 259.359 151.561 260.031 148.745 260.031 cv
147.753 260.031 146.76 259.935 145.737 259.807 cv
144.713 259.647 143.689 259.423 142.601 259.071 cv
142.601 255.903 li
143.529 256.415 144.489 256.799 145.513 257.055 cv
146.505 257.311 147.561 257.407 148.681 257.407 cv
150.473 257.407 151.913 256.959 152.969 255.999 cv
153.993 255.039 154.536 253.759 154.536 252.127 cv
154.536 250.527 153.993 249.247 152.969 248.287 cv
151.913 247.327 150.473 246.847 148.681 246.847 cv
147.849 246.847 146.985 246.943 146.153 247.135 cv
145.321 247.327 144.457 247.615 143.592 247.999 cv
143.592 236.287 li
f
159.608 147.129 mo
174.608 147.129 li
f
159.608 147.129 mo
174.608 147.129 li
@
732.556 147.129 mo
717.556 147.129 li
f
732.556 147.129 mo
717.556 147.129 li
@
78.4087 134.709 mo
76.7767 134.709 75.5607 135.509 74.7287 137.109 cv
73.8967 138.709 73.5127 141.109 73.5127 144.309 cv
73.5127 147.509 73.8967 149.909 74.7287 151.509 cv
75.5607 153.109 76.7767 153.909 78.4087 153.909 cv
80.0407 153.909 81.2567 153.109 82.0887 151.509 cv
82.8887 149.909 83.3047 147.509 83.3047 144.309 cv
83.3047 141.109 82.8887 138.709 82.0887 137.109 cv
81.2567 135.509 80.0407 134.709 78.4087 134.709 cv
78.4087 132.213 mo
81.0007 132.213 82.9847 133.269 84.3927 135.317 cv
85.7687 137.397 86.4727 140.405 86.4727 144.309 cv
86.4727 148.245 85.7687 151.253 84.3927 153.301 cv
82.9847 155.349 81.0007 156.373 78.4087 156.373 cv
75.7847 156.373 73.7687 155.349 72.3927 153.301 cv
71.0167 151.253 70.3447 148.245 70.3447 144.309 cv
70.3447 140.405 71.0167 137.397 72.3927 135.317 cv
73.7687 133.269 75.7847 132.213 78.4087 132.213 cv
f
92.0087 151.989 mo
95.3047 151.989 li
95.3047 155.957 li
92.0087 155.957 li
92.0087 151.989 li
f
104.905 153.301 mo
115.913 153.301 li
115.913 155.957 li
101.097 155.957 li
101.097 153.301 li
102.281 152.085 103.913 150.421 105.993 148.309 cv
108.041 146.229 109.353 144.885 109.897 144.277 cv
110.921 143.157 111.625 142.197 112.009 141.397 cv
112.393 140.629 112.617 139.829 112.617 139.061 cv
112.617 137.845 112.169 136.821 111.305 136.053 cv
110.441 135.285 109.321 134.869 107.913 134.869 cv
106.921 134.869 105.865 135.061 104.777 135.381 cv
103.689 135.733 102.505 136.245 101.257 136.949 cv
101.257 133.749 li
102.537 133.237 103.721 132.853 104.809 132.597 cv
105.897 132.341 106.921 132.213 107.849 132.213 cv
110.249 132.213 112.169 132.821 113.609 134.037 cv
115.049 135.253 115.785 136.853 115.785 138.869 cv
115.785 139.829 115.593 140.757 115.241 141.589 cv
114.889 142.453 114.249 143.477 113.289 144.629 cv
113.033 144.949 112.201 145.813 110.793 147.253 cv
109.385 148.693 107.433 150.709 104.905 153.301 cv
f
129.289 134.709 mo
127.657 134.709 126.441 135.509 125.609 137.109 cv
124.777 138.709 124.393 141.109 124.393 144.309 cv
124.393 147.509 124.777 149.909 125.609 151.509 cv
126.441 153.109 127.657 153.909 129.289 153.909 cv
130.921 153.909 132.137 153.109 132.969 151.509 cv
133.769 149.909 134.185 147.509 134.185 144.309 cv
134.185 141.109 133.769 138.709 132.969 137.109 cv
132.137 135.509 130.921 134.709 129.289 134.709 cv
129.289 132.213 mo
131.881 132.213 133.865 133.269 135.273 135.317 cv
136.649 137.397 137.353 140.405 137.353 144.309 cv
137.353 148.245 136.649 151.253 135.273 153.301 cv
133.865 155.349 131.881 156.373 129.289 156.373 cv
126.665 156.373 124.649 155.349 123.273 153.301 cv
121.897 151.253 121.225 148.245 121.225 144.309 cv
121.225 140.405 121.897 137.397 123.273 135.317 cv
124.649 133.269 126.665 132.213 129.289 132.213 cv
f
149.641 134.709 mo
148.009 134.709 146.793 135.509 145.961 137.109 cv
145.129 138.709 144.745 141.109 144.745 144.309 cv
144.745 147.509 145.129 149.909 145.961 151.509 cv
146.793 153.109 148.009 153.909 149.641 153.909 cv
151.273 153.909 152.489 153.109 153.321 151.509 cv
154.121 149.909 154.537 147.509 154.537 144.309 cv
154.537 141.109 154.121 138.709 153.321 137.109 cv
152.489 135.509 151.273 134.709 149.641 134.709 cv
149.641 132.213 mo
152.233 132.213 154.217 133.269 155.625 135.317 cv
157.001 137.397 157.705 140.405 157.705 144.309 cv
157.705 148.245 157.001 151.253 155.625 153.301 cv
154.217 155.349 152.233 156.373 149.641 156.373 cv
147.017 156.373 145.001 155.349 143.625 153.301 cv
142.249 151.253 141.577 148.245 141.577 144.309 cv
141.577 140.405 142.249 137.397 143.625 135.317 cv
145.001 133.269 147.017 132.213 149.641 132.213 cv
f
79.0806 31.0508 mo
77.4486 31.0508 76.2326 31.8508 75.4006 33.4508 cv
74.5686 35.0508 74.1846 37.4508 74.1846 40.6508 cv
74.1846 43.8508 74.5686 46.2508 75.4006 47.8508 cv
76.2326 49.4508 77.4486 50.2508 79.0806 50.2508 cv
80.7126 50.2508 81.9286 49.4508 82.7606 47.8508 cv
83.5606 46.2508 83.9766 43.8508 83.9766 40.6508 cv
83.9766 37.4508 83.5606 35.0508 82.7606 33.4508 cv
81.9286 31.8508 80.7126 31.0508 79.0806 31.0508 cv
79.0806 28.5548 mo
81.6726 28.5548 83.6566 29.6108 85.0646 31.6588 cv
86.4406 33.7388 87.1446 36.7468 87.1446 40.6508 cv
87.1446 44.5868 86.4406 47.5948 85.0646 49.6428 cv
83.6566 51.6908 81.6726 52.7148 79.0806 52.7148 cv
76.4566 52.7148 74.4406 51.6908 73.0646 49.6428 cv
71.6886 47.5948 71.0166 44.5868 71.0166 40.6508 cv
71.0166 36.7468 71.6886 33.7388 73.0646 31.6588 cv
74.4406 29.6108 76.4566 28.5548 79.0806 28.5548 cv
f
92.6806 48.3308 mo
95.9766 48.3308 li
95.9766 52.2988 li
92.6806 52.2988 li
92.6806 48.3308 li
f
105.576 49.6428 mo
116.584 49.6428 li
116.584 52.2988 li
101.768 52.2988 li
101.768 49.6428 li
102.952 48.4268 104.584 46.7628 106.664 44.6508 cv
108.712 42.5708 110.024 41.2268 110.568 40.6188 cv
111.592 39.4988 112.296 38.5388 112.68 37.7388 cv
113.064 36.9708 113.288 36.1708 113.288 35.4028 cv
113.288 34.1868 112.84 33.1628 111.976 32.3948 cv
111.112 31.6268 109.992 31.2108 108.584 31.2108 cv
107.592 31.2108 106.536 31.4028 105.448 31.7228 cv
104.36 32.0748 103.176 32.5868 101.928 33.2908 cv
101.928 30.0908 li
103.208 29.5788 104.392 29.1948 105.48 28.9388 cv
106.568 28.6828 107.592 28.5548 108.52 28.5548 cv
110.92 28.5548 112.84 29.1628 114.28 30.3788 cv
115.72 31.5948 116.456 33.1948 116.456 35.2108 cv
116.456 36.1708 116.264 37.0988 115.912 37.9308 cv
115.56 38.7948 114.92 39.8188 113.96 40.9708 cv
113.704 41.2908 112.872 42.1548 111.464 43.5948 cv
110.056 45.0348 108.104 47.0508 105.576 49.6428 cv
f
129.96 31.0508 mo
128.328 31.0508 127.112 31.8508 126.28 33.4508 cv
125.448 35.0508 125.064 37.4508 125.064 40.6508 cv
125.064 43.8508 125.448 46.2508 126.28 47.8508 cv
127.112 49.4508 128.328 50.2508 129.96 50.2508 cv
131.592 50.2508 132.808 49.4508 133.64 47.8508 cv
134.44 46.2508 134.856 43.8508 134.856 40.6508 cv
134.856 37.4508 134.44 35.0508 133.64 33.4508 cv
132.808 31.8508 131.592 31.0508 129.96 31.0508 cv
129.96 28.5548 mo
132.552 28.5548 134.536 29.6108 135.944 31.6588 cv
137.32 33.7388 138.024 36.7468 138.024 40.6508 cv
138.024 44.5868 137.32 47.5948 135.944 49.6428 cv
134.536 51.6908 132.552 52.7148 129.96 52.7148 cv
127.336 52.7148 125.32 51.6908 123.944 49.6428 cv
122.568 47.5948 121.896 44.5868 121.896 40.6508 cv
121.896 36.7468 122.568 33.7388 123.944 31.6588 cv
125.32 29.6108 127.336 28.5548 129.96 28.5548 cv
f
143.592 28.9708 mo
155.977 28.9708 li
155.977 31.6268 li
146.473 31.6268 li
146.473 37.3548 li
146.921 37.1948 147.401 37.0668 147.849 37.0028 cv
148.297 36.9388 148.777 36.8748 149.225 36.8748 cv
151.816 36.8748 153.865 37.6108 155.401 39.0188 cv
156.937 40.4588 157.704 42.3788 157.704 44.8108 cv
157.704 47.3388 156.905 49.2908 155.337 50.6668 cv
153.769 52.0428 151.561 52.7148 148.745 52.7148 cv
147.753 52.7148 146.76 52.6188 145.737 52.4908 cv
144.713 52.3308 143.689 52.1068 142.601 51.7548 cv
142.601 48.5868 li
143.529 49.0988 144.489 49.4828 145.513 49.7388 cv
146.505 49.9948 147.561 50.0908 148.681 50.0908 cv
150.473 50.0908 151.913 49.6428 152.969 48.6828 cv
153.993 47.7228 154.536 46.4428 154.536 44.8108 cv
154.536 43.2108 153.993 41.9308 152.969 40.9708 cv
151.913 40.0108 150.473 39.5308 148.681 39.5308 cv
147.849 39.5308 146.985 39.6268 146.153 39.8188 cv
145.321 40.0108 144.457 40.2988 143.592 40.6828 cv
143.592 28.9708 li
f
26.2172 585.412 mo
26.2172 565.7 li
28.8732 565.7 li
28.8732 573.988 li
49.5452 573.988 li
49.5452 577.156 li
28.8732 577.156 li
28.8732 585.412 li
26.2172 585.412 li
f
40.0732 547.817 mo
41.4812 547.817 li
41.4812 561.033 li
43.4652 560.905 45.0012 560.329 46.0252 559.241 cv
47.0492 558.185 47.5612 556.713 47.5612 554.793 cv
47.5612 553.705 47.4332 552.617 47.1772 551.593 cv
46.9212 550.569 46.5052 549.513 45.9292 548.489 cv
48.6492 548.489 li
49.0972 549.513 49.4492 550.569 49.6412 551.657 cv
49.8332 552.745 49.9612 553.865 49.9612 554.953 cv
49.9612 557.769 49.1612 559.977 47.5612 561.609 cv
45.9612 563.241 43.7532 564.041 40.9692 564.041 cv
38.1212 564.041 35.8492 563.273 34.1532 561.737 cv
32.4892 560.201 31.6252 558.089 31.6252 555.465 cv
31.6252 553.097 32.3932 551.241 33.8972 549.865 cv
35.4332 548.521 37.4812 547.817 40.0732 547.817 cv
39.2412 550.697 mo
37.6732 550.729 36.4252 551.177 35.4652 552.009 cv
34.5372 552.873 34.0572 554.025 34.0572 555.433 cv
34.0572 557.033 34.5372 558.313 35.4332 559.273 cv
36.3292 560.233 37.6092 560.809 39.2412 560.937 cv
39.2412 550.697 li
f
35.4012 529.473 mo
34.1212 528.769 33.1932 527.905 32.5532 526.913 cv
31.9452 525.921 31.6252 524.737 31.6252 523.361 cv
31.6252 521.569 32.2652 520.161 33.5452 519.169 cv
34.8252 518.177 36.6492 517.665 38.9852 517.665 cv
49.5452 517.665 li
49.5452 520.545 li
39.0812 520.545 li
37.4172 520.545 36.1692 520.865 35.3372 521.441 cv
34.5372 522.049 34.1212 522.945 34.1212 524.161 cv
34.1212 525.665 34.6332 526.849 35.6252 527.713 cv
36.6172 528.577 37.9612 528.993 39.6572 528.993 cv
49.5452 528.993 li
49.5452 531.873 li
39.0812 531.873 li
37.4172 531.873 36.1692 532.193 35.3372 532.769 cv
34.5372 533.377 34.1212 534.305 34.1212 535.521 cv
34.1212 536.993 34.6332 538.177 35.6252 539.041 cv
36.6172 539.905 37.9612 540.321 39.6572 540.321 cv
49.5452 540.321 li
49.5452 543.201 li
32.0412 543.201 li
32.0412 540.321 li
34.7612 540.321 li
33.7052 539.681 32.9052 538.881 32.3932 537.953 cv
31.8812 537.057 31.6252 535.969 31.6252 534.689 cv
31.6252 533.409 31.9452 532.353 32.5852 531.457 cv
33.2252 530.561 34.1852 529.921 35.4012 529.473 cv
f
46.9212 509.15 mo
56.1692 509.15 li
56.1692 512.03 li
32.0412 512.03 li
32.0412 509.15 li
34.6972 509.15 li
33.6732 508.574 32.9052 507.806 32.3932 506.878 cv
31.8812 505.95 31.6252 504.83 31.6252 503.55 cv
31.6252 501.438 32.4892 499.71 34.1532 498.366 cv
35.8492 497.054 38.0572 496.382 40.8092 496.382 cv
43.5612 496.382 45.8012 497.054 47.4652 498.366 cv
49.1292 499.71 49.9612 501.438 49.9612 503.55 cv
49.9612 504.83 49.7052 505.95 49.2252 506.878 cv
48.7452 507.806 47.9772 508.574 46.9212 509.15 cv
40.8092 499.358 mo
38.6972 499.358 37.0652 499.806 35.8492 500.67 cv
34.6332 501.566 34.0252 502.75 34.0252 504.254 cv
34.0252 505.79 34.6332 506.974 35.8492 507.838 cv
37.0652 508.734 38.6972 509.15 40.8092 509.15 cv
42.9212 509.15 44.5852 508.734 45.8012 507.838 cv
47.0172 506.974 47.5932 505.79 47.5932 504.254 cv
47.5932 502.75 47.0172 501.566 45.8012 500.67 cv
44.5852 499.806 42.9212 499.358 40.8092 499.358 cv
f
40.0732 476.645 mo
41.4812 476.645 li
41.4812 489.861 li
43.4652 489.733 45.0012 489.157 46.0252 488.069 cv
47.0492 487.013 47.5612 485.541 47.5612 483.621 cv
47.5612 482.533 47.4332 481.445 47.1772 480.421 cv
46.9212 479.397 46.5052 478.341 45.9292 477.317 cv
48.6492 477.317 li
49.0972 478.341 49.4492 479.397 49.6412 480.485 cv
49.8332 481.573 49.9612 482.693 49.9612 483.781 cv
49.9612 486.597 49.1612 488.805 47.5612 490.437 cv
45.9612 492.069 43.7532 492.869 40.9692 492.869 cv
38.1212 492.869 35.8492 492.101 34.1532 490.565 cv
32.4892 489.029 31.6252 486.917 31.6252 484.293 cv
31.6252 481.925 32.3932 480.069 33.8972 478.693 cv
35.4332 477.349 37.4812 476.645 40.0732 476.645 cv
39.2412 479.525 mo
37.6732 479.557 36.4252 480.005 35.4652 480.837 cv
34.5372 481.701 34.0572 482.853 34.0572 484.261 cv
34.0572 485.861 34.5372 487.141 35.4332 488.101 cv
36.3292 489.061 37.6092 489.637 39.2412 489.765 cv
39.2412 479.525 li
f
34.7292 461.79 mo
34.5372 462.11 34.4092 462.462 34.3132 462.846 cv
34.2492 463.23 34.1852 463.646 34.1852 464.094 cv
34.1852 465.726 34.7292 466.974 35.7852 467.838 cv
36.8412 468.734 38.3452 469.15 40.3292 469.15 cv
49.5452 469.15 li
49.5452 472.03 li
32.0412 472.03 li
32.0412 469.15 li
34.7612 469.15 li
33.7052 468.574 32.9052 467.774 32.3932 466.814 cv
31.8812 465.854 31.6252 464.67 31.6252 463.262 cv
31.6252 463.07 31.6572 462.846 31.6572 462.59 cv
31.6892 462.366 31.7212 462.11 31.7852 461.79 cv
34.7292 461.79 li
f
40.7452 450.809 mo
40.7452 453.145 41.0332 454.745 41.5452 455.641 cv
42.0892 456.537 42.9852 456.985 44.2652 456.985 cv
45.2892 456.985 46.1212 456.665 46.6972 455.993 cv
47.3052 455.321 47.5932 454.393 47.5932 453.241 cv
47.5932 451.641 47.0492 450.361 45.8972 449.401 cv
44.7772 448.441 43.2732 447.961 41.3852 447.961 cv
40.7452 447.961 li
40.7452 450.809 li
39.5612 445.081 mo
49.5452 445.081 li
49.5452 447.961 li
46.8892 447.961 li
47.9772 448.633 48.7452 449.465 49.2252 450.425 cv
49.7052 451.385 49.9612 452.601 49.9612 454.009 cv
49.9612 455.801 49.4812 457.241 48.4892 458.297 cv
47.4972 459.353 46.1532 459.865 44.4572 459.865 cv
42.5052 459.865 41.0332 459.225 40.0092 457.881 cv
39.0172 456.569 38.5052 454.617 38.5052 451.993 cv
38.5052 447.961 li
38.2172 447.961 li
36.9052 447.961 35.8812 448.409 35.1452 449.273 cv
34.4412 450.137 34.0572 451.353 34.0572 452.921 cv
34.0572 453.945 34.1852 454.905 34.4412 455.865 cv
34.6972 456.825 35.0492 457.721 35.4972 458.585 cv
32.8412 458.585 li
32.4572 457.561 32.1372 456.537 31.9452 455.545 cv
31.7532 454.553 31.6252 453.593 31.6252 452.633 cv
31.6252 450.105 32.2972 448.217 33.6092 446.969 cv
34.9212 445.721 36.9052 445.081 39.5612 445.081 cv
f
27.0812 436.32 mo
32.0412 436.32 li
32.0412 430.4 li
34.2812 430.4 li
34.2812 436.32 li
43.7852 436.32 li
45.2252 436.32 46.1532 436.128 46.5372 435.744 cv
46.9532 435.36 47.1452 434.56 47.1452 433.344 cv
47.1452 430.4 li
49.5452 430.4 li
49.5452 433.344 li
49.5452 435.584 49.1292 437.12 48.2972 437.952 cv
47.4652 438.784 45.9612 439.2 43.7852 439.2 cv
34.2812 439.2 li
34.2812 441.312 li
32.0412 441.312 li
32.0412 439.2 li
27.0812 439.2 li
27.0812 436.32 li
f
42.6332 426.909 mo
32.0412 426.909 li
32.0412 424.029 li
42.5372 424.029 li
44.2012 424.029 45.4172 423.709 46.2492 423.069 cv
47.0812 422.429 47.4972 421.469 47.4972 420.157 cv
47.4972 418.621 47.0172 417.373 46.0252 416.477 cv
45.0332 415.581 43.6892 415.133 41.9612 415.133 cv
32.0412 415.133 li
32.0412 412.253 li
49.5452 412.253 li
49.5452 415.133 li
46.8572 415.133 li
47.9452 415.837 48.7132 416.669 49.2252 417.565 cv
49.7052 418.493 49.9612 419.549 49.9612 420.765 cv
49.9612 422.781 49.3532 424.317 48.1052 425.341 cv
46.8892 426.397 45.0652 426.909 42.6332 426.909 cv
f
34.7292 396.196 mo
34.5372 396.516 34.4092 396.868 34.3132 397.252 cv
34.2492 397.636 34.1852 398.052 34.1852 398.5 cv
34.1852 400.132 34.7292 401.38 35.7852 402.244 cv
36.8412 403.14 38.3452 403.556 40.3292 403.556 cv
49.5452 403.556 li
49.5452 406.436 li
32.0412 406.436 li
32.0412 403.556 li
34.7612 403.556 li
33.7052 402.98 32.9052 402.18 32.3932 401.22 cv
31.8812 400.26 31.6252 399.076 31.6252 397.668 cv
31.6252 397.476 31.6572 397.252 31.6572 396.996 cv
31.6892 396.772 31.7212 396.516 31.7852 396.196 cv
34.7292 396.196 li
f
40.0732 378.208 mo
41.4812 378.208 li
41.4812 391.424 li
43.4652 391.296 45.0012 390.72 46.0252 389.632 cv
47.0492 388.576 47.5612 387.104 47.5612 385.184 cv
47.5612 384.096 47.4332 383.008 47.1772 381.984 cv
46.9212 380.96 46.5052 379.904 45.9292 378.88 cv
48.6492 378.88 li
49.0972 379.904 49.4492 380.96 49.6412 382.048 cv
49.8332 383.136 49.9612 384.256 49.9612 385.344 cv
49.9612 388.16 49.1612 390.368 47.5612 392 cv
45.9612 393.632 43.7532 394.432 40.9692 394.432 cv
38.1212 394.432 35.8492 393.664 34.1532 392.128 cv
32.4892 390.592 31.6252 388.48 31.6252 385.856 cv
31.6252 383.488 32.3932 381.632 33.8972 380.256 cv
35.4332 378.912 37.4812 378.208 40.0732 378.208 cv
39.2412 381.088 mo
37.6732 381.12 36.4252 381.568 35.4652 382.4 cv
34.5372 383.264 34.0572 384.416 34.0572 385.824 cv
34.0572 387.424 34.5372 388.704 35.4332 389.664 cv
36.3292 390.624 37.6092 391.2 39.2412 391.328 cv
39.2412 381.088 li
f
28.8092 360.028 mo
46.9532 360.028 li
46.9532 356.22 li
46.9532 353.02 46.2492 350.652 44.7772 349.148 cv
43.3052 347.676 41.0012 346.908 37.8652 346.908 cv
34.7292 346.908 32.4572 347.676 30.9852 349.148 cv
29.5452 350.652 28.8092 353.02 28.8092 356.22 cv
28.8092 360.028 li
26.2172 363.196 mo
26.2172 356.7 li
26.2172 352.188 27.1772 348.86 29.0332 346.748 cv
30.9212 344.636 33.8652 343.58 37.8652 343.58 cv
41.8972 343.58 44.8412 344.668 46.7292 346.78 cv
48.6172 348.892 49.5452 352.22 49.5452 356.7 cv
49.5452 363.196 li
26.2172 363.196 li
f
32.0412 338.684 mo
32.0412 335.804 li
49.5452 335.804 li
49.5452 338.684 li
32.0412 338.684 li
25.2252 338.684 mo
25.2252 335.804 li
28.8732 335.804 li
28.8732 338.684 li
25.2252 338.684 li
f
25.2252 320.929 mo
27.6252 320.929 li
27.6252 323.681 li
27.6252 324.705 27.8492 325.441 28.2652 325.825 cv
28.6812 326.241 29.4172 326.433 30.5052 326.433 cv
32.0412 326.433 li
32.0412 321.697 li
34.2812 321.697 li
34.2812 326.433 li
49.5452 326.433 li
49.5452 329.313 li
34.2812 329.313 li
34.2812 332.065 li
32.0412 332.065 li
32.0412 329.313 li
30.8252 329.313 li
28.9052 329.313 27.4652 328.865 26.5692 327.969 cv
25.6732 327.073 25.2252 325.633 25.2252 323.649 cv
25.2252 320.929 li
f
25.2252 309.663 mo
27.6252 309.663 li
27.6252 312.415 li
27.6252 313.439 27.8492 314.175 28.2652 314.559 cv
28.6812 314.975 29.4172 315.167 30.5052 315.167 cv
32.0412 315.167 li
32.0412 310.431 li
34.2812 310.431 li
34.2812 315.167 li
49.5452 315.167 li
49.5452 318.047 li
34.2812 318.047 li
34.2812 320.799 li
32.0412 320.799 li
32.0412 318.047 li
30.8252 318.047 li
28.9052 318.047 27.4652 317.599 26.5692 316.703 cv
25.6732 315.807 25.2252 314.367 25.2252 312.383 cv
25.2252 309.663 li
f
40.0732 292.286 mo
41.4812 292.286 li
41.4812 305.502 li
43.4652 305.374 45.0012 304.798 46.0252 303.71 cv
47.0492 302.654 47.5612 301.182 47.5612 299.262 cv
47.5612 298.174 47.4332 297.086 47.1772 296.062 cv
46.9212 295.038 46.5052 293.982 45.9292 292.958 cv
48.6492 292.958 li
49.0972 293.982 49.4492 295.038 49.6412 296.126 cv
49.8332 297.214 49.9612 298.334 49.9612 299.422 cv
49.9612 302.238 49.1612 304.446 47.5612 306.078 cv
45.9612 307.71 43.7532 308.51 40.9692 308.51 cv
38.1212 308.51 35.8492 307.742 34.1532 306.206 cv
32.4892 304.67 31.6252 302.558 31.6252 299.934 cv
31.6252 297.566 32.3932 295.71 33.8972 294.334 cv
35.4332 292.99 37.4812 292.286 40.0732 292.286 cv
39.2412 295.166 mo
37.6732 295.198 36.4252 295.646 35.4652 296.478 cv
34.5372 297.342 34.0572 298.494 34.0572 299.902 cv
34.0572 301.502 34.5372 302.782 35.4332 303.742 cv
36.3292 304.702 37.6092 305.278 39.2412 305.406 cv
39.2412 295.166 li
f
34.7292 277.43 mo
34.5372 277.75 34.4092 278.102 34.3132 278.486 cv
34.2492 278.87 34.1852 279.286 34.1852 279.734 cv
34.1852 281.366 34.7292 282.614 35.7852 283.478 cv
36.8412 284.374 38.3452 284.79 40.3292 284.79 cv
49.5452 284.79 li
49.5452 287.67 li
32.0412 287.67 li
32.0412 284.79 li
34.7612 284.79 li
33.7052 284.214 32.9052 283.414 32.3932 282.454 cv
31.8812 281.494 31.6252 280.31 31.6252 278.902 cv
31.6252 278.71 31.6572 278.486 31.6572 278.23 cv
31.6892 278.006 31.7212 277.75 31.7852 277.43 cv
34.7292 277.43 li
f
40.0732 259.442 mo
41.4812 259.442 li
41.4812 272.658 li
43.4652 272.53 45.0012 271.954 46.0252 270.866 cv
47.0492 269.81 47.5612 268.338 47.5612 266.418 cv
47.5612 265.33 47.4332 264.242 47.1772 263.218 cv
46.9212 262.194 46.5052 261.138 45.9292 260.114 cv
48.6492 260.114 li
49.0972 261.138 49.4492 262.194 49.6412 263.282 cv
49.8332 264.37 49.9612 265.49 49.9612 266.578 cv
49.9612 269.394 49.1612 271.602 47.5612 273.234 cv
45.9612 274.866 43.7532 275.666 40.9692 275.666 cv
38.1212 275.666 35.8492 274.898 34.1532 273.362 cv
32.4892 271.826 31.6252 269.714 31.6252 267.09 cv
31.6252 264.722 32.3932 262.866 33.8972 261.49 cv
35.4332 260.146 37.4812 259.442 40.0732 259.442 cv
39.2412 262.322 mo
37.6732 262.354 36.4252 262.802 35.4652 263.634 cv
34.5372 264.498 34.0572 265.65 34.0572 267.058 cv
34.0572 268.658 34.5372 269.938 35.4332 270.898 cv
36.3292 271.858 37.6092 272.434 39.2412 272.562 cv
39.2412 262.322 li
f
38.9852 240.17 mo
49.5452 240.17 li
49.5452 243.05 li
39.0812 243.05 li
37.4172 243.05 36.2012 243.402 35.3692 244.042 cv
34.5372 244.682 34.1212 245.642 34.1212 246.922 cv
34.1212 248.49 34.6332 249.706 35.6252 250.602 cv
36.6172 251.498 37.9612 251.946 39.6572 251.946 cv
49.5452 251.946 li
49.5452 254.826 li
32.0412 254.826 li
32.0412 251.946 li
34.7612 251.946 li
33.7372 251.274 32.9372 250.474 32.4252 249.514 cv
31.9132 248.586 31.6252 247.498 31.6252 246.282 cv
31.6252 244.298 32.2652 242.762 33.5132 241.738 cv
34.7612 240.714 36.5852 240.17 38.9852 240.17 cv
f
32.7132 221.841 mo
35.4012 221.841 li
34.9532 222.673 34.6332 223.473 34.4092 224.305 cv
34.1852 225.137 34.0572 225.937 34.0572 226.769 cv
34.0572 228.625 34.6652 230.097 35.8492 231.121 cv
37.0332 232.145 38.6972 232.657 40.8092 232.657 cv
42.9532 232.657 44.6172 232.145 45.8012 231.121 cv
46.9852 230.097 47.5612 228.625 47.5612 226.769 cv
47.5612 225.937 47.4652 225.137 47.2412 224.305 cv
47.0172 223.473 46.6652 222.673 46.2172 221.841 cv
48.8732 221.841 li
49.2572 222.673 49.5452 223.505 49.7052 224.337 cv
49.8652 225.201 49.9612 226.129 49.9612 227.089 cv
49.9612 229.713 49.1612 231.825 47.4972 233.361 cv
45.8652 234.929 43.6252 235.697 40.8092 235.697 cv
37.9612 235.697 35.7212 234.929 34.0892 233.361 cv
32.4572 231.793 31.6252 229.649 31.6252 226.897 cv
31.6252 226.001 31.7212 225.137 31.9132 224.305 cv
32.1052 223.473 32.3612 222.641 32.7132 221.841 cv
f
40.0732 201.879 mo
41.4812 201.879 li
41.4812 215.095 li
43.4652 214.967 45.0012 214.391 46.0252 213.303 cv
47.0492 212.247 47.5612 210.775 47.5612 208.855 cv
47.5612 207.767 47.4332 206.679 47.1772 205.655 cv
46.9212 204.631 46.5052 203.575 45.9292 202.551 cv
48.6492 202.551 li
49.0972 203.575 49.4492 204.631 49.6412 205.719 cv
49.8332 206.807 49.9612 207.927 49.9612 209.015 cv
49.9612 211.831 49.1612 214.039 47.5612 215.671 cv
45.9612 217.303 43.7532 218.103 40.9692 218.103 cv
38.1212 218.103 35.8492 217.335 34.1532 215.799 cv
32.4892 214.263 31.6252 212.151 31.6252 209.527 cv
31.6252 207.159 32.3932 205.303 33.8972 203.927 cv
35.4332 202.583 37.4812 201.879 40.0732 201.879 cv
39.2412 204.759 mo
37.6732 204.791 36.4252 205.239 35.4652 206.071 cv
34.5372 206.935 34.0572 208.087 34.0572 209.495 cv
34.0572 211.095 34.5372 212.375 35.4332 213.335 cv
36.3292 214.295 37.6092 214.871 39.2412 214.999 cv
39.2412 204.759 li
f
49.5452 188.276 mo
49.5452 188.468 49.4812 188.532 49.2892 188.532 cv
49.2572 188.532 li
49.1932 188.5 li
26.9852 177.492 li
26.7612 177.396 26.6332 177.204 26.6332 176.916 cv
26.6332 176.468 li
26.6332 176.18 26.7612 175.988 26.9852 175.892 cv
49.1932 164.884 li
49.2572 164.852 li
49.2892 164.852 li
49.4812 164.852 49.5452 164.948 49.5452 165.108 cv
49.5452 188.276 li
46.9852 186.164 mo
46.9852 169.3 li
29.9932 177.716 li
46.9852 186.164 li
f
26.2172 163.412 mo
26.2172 143.7 li
28.8732 143.7 li
28.8732 151.988 li
49.5452 151.988 li
49.5452 155.156 li
28.8732 155.156 li
28.8732 163.412 li
26.2172 163.412 li
f
60.889 141.919 mo
61.4266 141.606 61.6954 141.068 61.6954 140.284 cv
61.6954 139.567 61.449 138.963 60.9562 138.447 cv
60.4634 137.932 59.8586 137.507 59.1642 137.193 cv
58.4474 136.879 57.7306 136.633 57.0138 136.454 cv
57.641 137.126 57.9322 137.843 57.9322 138.604 cv
57.9322 139.209 57.8202 139.724 57.641 140.127 cv
57.4618 140.531 57.1482 140.867 56.745 141.091 cv
56.3418 141.315 55.849 141.427 55.2666 141.427 cv
54.7738 141.427 54.281 141.359 53.7658 141.225 cv
53.273 141.091 52.6906 140.911 52.0634 140.687 cv
51.4362 140.463 50.8762 140.239 50.4058 140.06 cv
49.8682 139.881 49.4202 139.769 49.0618 139.769 cv
48.6138 139.769 48.3898 139.948 48.3898 140.262 cv
48.3898 140.844 48.7034 141.337 49.3082 141.718 cv
49.9354 142.121 50.6074 142.39 51.3466 142.569 cv
51.481 142.748 li
51.481 143.017 li
51.481 143.151 51.4138 143.196 51.2794 143.196 cv
51.2122 143.196 li
50.3162 142.972 49.5322 142.591 48.8378 142.099 cv
48.1658 141.606 47.8074 140.979 47.8074 140.217 cv
47.8074 139.679 47.9866 139.231 48.345 138.873 cv
48.7034 138.515 49.129 138.313 49.6666 138.313 cv
49.9578 138.313 50.249 138.38 50.5402 138.492 cv
50.7194 138.582 51.1226 138.739 51.7274 138.963 cv
52.3546 139.187 52.8474 139.366 53.2506 139.478 cv
53.6538 139.612 54.057 139.702 54.4378 139.791 cv
54.841 139.881 55.2218 139.903 55.6026 139.903 cv
56.0954 139.903 56.521 139.814 56.857 139.59 cv
57.2154 139.388 57.3722 139.052 57.3722 138.582 cv
57.3722 137.663 56.8122 136.835 55.6698 136.095 cv
48.7706 134.393 li
48.5914 134.348 48.4122 134.236 48.2778 134.057 cv
48.1434 133.878 48.0538 133.676 48.0538 133.452 cv
48.0538 133.273 48.121 133.116 48.233 132.982 cv
48.345 132.847 48.5018 132.78 48.681 132.78 cv
48.8602 132.803 li
57.753 135.02 li
58.5146 135.222 59.2314 135.58 59.9482 136.095 cv
60.6426 136.633 61.2026 137.26 61.6282 137.999 cv
62.0538 138.761 62.2778 139.523 62.2778 140.307 cv
62.2778 140.71 62.1882 141.091 62.0538 141.471 cv
61.897 141.852 61.673 142.166 61.3818 142.39 cv
61.0682 142.614 60.7322 142.726 60.329 142.726 cv
59.9258 142.726 59.5674 142.614 59.2762 142.367 cv
58.9626 142.143 58.8282 141.807 58.8282 141.404 cv
58.8282 141.18 58.8954 140.979 59.0522 140.799 cv
59.1866 140.643 59.3882 140.553 59.6346 140.553 cv
59.9706 140.553 60.2618 140.687 60.5306 140.934 cv
60.777 141.203 60.9114 141.494 60.9114 141.83 cv
60.889 141.875 li
60.889 141.919 li
f
45.5772 124.369 mo
45.5772 121.073 li
48.2652 121.073 li
53.2252 123.633 li
53.2252 125.649 li
48.2652 124.369 li
45.5772 124.369 li
f
25.2572 97.8497 mo
27.6892 99.2577 30.0572 100.282 32.3932 100.954 cv
34.7292 101.658 37.0972 101.978 39.4972 101.978 cv
41.9292 101.978 44.2972 101.658 46.6332 100.954 cv
49.0012 100.282 51.3372 99.2577 53.7372 97.8497 cv
53.7372 100.346 li
51.2732 101.914 48.9052 103.098 46.5372 103.866 cv
44.1692 104.634 41.8332 105.018 39.4972 105.018 cv
37.1932 105.018 34.8572 104.634 32.4892 103.866 cv
30.1212 103.098 27.7212 101.946 25.2572 100.346 cv
25.2572 97.8497 li
f
26.2172 92.1493 mo
26.2172 88.9813 li
36.0732 88.9813 li
26.2172 78.5173 li
26.2172 74.4533 li
37.0972 86.0373 li
49.5452 73.6213 li
49.5452 77.7813 li
38.3132 88.9813 li
49.5452 88.9813 li
49.5452 92.1493 li
26.2172 92.1493 li
f
25.2572 71.741 mo
25.2572 69.245 li
27.7212 67.709 30.1212 66.525 32.4892 65.757 cv
34.8572 64.989 37.1932 64.573 39.4972 64.573 cv
41.8332 64.573 44.1692 64.989 46.5372 65.757 cv
48.9052 66.525 51.2732 67.709 53.7372 69.245 cv
53.7372 71.741 li
51.3372 70.365 49.0012 69.341 46.6332 68.637 cv
44.2972 67.965 41.9292 67.613 39.4972 67.613 cv
37.0972 67.613 34.7292 67.965 32.3932 68.637 cv
30.0572 69.341 27.6892 70.365 25.2572 71.741 cv
f
697.014 63.682 mo
695.782 65.81 694.886 67.882 694.298 69.926 cv
693.682 71.97 693.402 74.042 693.402 76.142 cv
693.402 78.27 693.682 80.342 694.298 82.386 cv
694.886 84.458 695.782 86.502 697.014 88.602 cv
694.83 88.602 li
693.458 86.446 692.422 84.374 691.75 82.302 cv
691.078 80.23 690.742 78.186 690.742 76.142 cv
690.742 74.126 691.078 72.082 691.75 70.01 cv
692.422 67.938 693.43 65.838 694.83 63.682 cv
697.014 63.682 li
f
708.858 77.234 mo
706.814 77.234 705.414 77.486 704.63 77.934 cv
703.846 78.41 703.454 79.194 703.454 80.314 cv
703.454 81.21 703.734 81.938 704.322 82.442 cv
704.91 82.974 705.722 83.226 706.73 83.226 cv
708.13 83.226 709.25 82.75 710.09 81.742 cv
710.93 80.762 711.35 79.446 711.35 77.794 cv
711.35 77.234 li
708.858 77.234 li
713.87 76.198 mo
713.87 84.934 li
711.35 84.934 li
711.35 82.61 li
710.762 83.562 710.034 84.234 709.194 84.654 cv
708.354 85.074 707.29 85.298 706.058 85.298 cv
704.49 85.298 703.23 84.878 702.306 84.01 cv
701.382 83.142 700.934 81.966 700.934 80.482 cv
700.934 78.774 701.494 77.486 702.67 76.59 cv
703.818 75.722 705.526 75.274 707.822 75.274 cv
711.35 75.274 li
711.35 75.022 li
711.35 73.874 710.958 72.978 710.202 72.334 cv
709.446 71.718 708.382 71.382 707.01 71.382 cv
706.114 71.382 705.274 71.494 704.434 71.718 cv
703.594 71.942 702.81 72.25 702.054 72.642 cv
702.054 70.318 li
702.95 69.982 703.846 69.702 704.714 69.534 cv
705.582 69.366 706.422 69.254 707.262 69.254 cv
709.474 69.254 711.126 69.842 712.218 70.99 cv
713.31 72.138 713.87 73.874 713.87 76.198 cv
f
718.658 63.682 mo
720.842 63.682 li
722.186 65.838 723.222 67.938 723.894 70.01 cv
724.566 72.082 724.93 74.126 724.93 76.142 cv
724.93 78.186 724.566 80.23 723.894 82.302 cv
723.222 84.374 722.186 86.446 720.842 88.602 cv
718.658 88.602 li
719.862 86.502 720.758 84.458 721.374 82.386 cv
721.962 80.342 722.27 78.27 722.27 76.142 cv
722.27 74.042 721.962 71.97 721.374 69.926 cv
720.758 67.882 719.862 65.81 718.658 63.682 cv
f
330.715 102.752 mo
333.091 102.752 li
333.091 113.384 li
333.091 115.256 333.427 116.624 334.099 117.44 cv
334.771 118.256 335.875 118.664 337.411 118.664 cv
338.923 118.664 340.027 118.256 340.699 117.44 cv
341.371 116.624 341.731 115.256 341.731 113.384 cv
341.731 102.752 li
344.107 102.752 li
344.107 113.672 li
344.107 115.976 343.531 117.68 342.403 118.832 cv
341.275 119.984 339.619 120.56 337.411 120.56 cv
335.203 120.56 333.523 119.984 332.395 118.832 cv
331.267 117.68 330.715 115.976 330.715 113.672 cv
330.715 102.752 li
f
359.37 112.328 mo
359.37 120.248 li
357.21 120.248 li
357.21 112.4 li
357.21 111.152 356.946 110.24 356.466 109.616 cv
355.986 108.992 355.266 108.68 354.306 108.68 cv
353.13 108.68 352.218 109.064 351.546 109.808 cv
350.874 110.552 350.538 111.56 350.538 112.832 cv
350.538 120.248 li
348.378 120.248 li
348.378 107.12 li
350.538 107.12 li
350.538 109.16 li
351.042 108.392 351.642 107.792 352.362 107.408 cv
353.058 107.024 353.874 106.808 354.786 106.808 cv
356.274 106.808 357.426 107.288 358.194 108.224 cv
358.962 109.16 359.37 110.528 359.37 112.328 cv
f
372.042 107.504 mo
372.042 109.544 li
371.418 109.256 370.794 109.016 370.146 108.848 cv
369.474 108.704 368.802 108.608 368.106 108.608 cv
367.026 108.608 366.21 108.776 365.682 109.112 cv
365.154 109.448 364.89 109.928 364.89 110.576 cv
364.89 111.08 365.082 111.464 365.466 111.752 cv
365.85 112.04 366.618 112.328 367.77 112.568 cv
368.514 112.736 li
370.05 113.072 371.13 113.552 371.778 114.128 cv
372.402 114.728 372.738 115.568 372.738 116.624 cv
372.738 117.848 372.258 118.808 371.298 119.504 cv
370.338 120.224 368.994 120.56 367.314 120.56 cv
366.594 120.56 365.874 120.488 365.106 120.368 cv
364.338 120.248 363.546 120.056 362.706 119.768 cv
362.706 117.536 li
363.498 117.968 364.29 118.28 365.058 118.472 cv
365.826 118.688 366.594 118.784 367.362 118.784 cv
368.37 118.784 369.162 118.616 369.714 118.28 cv
370.242 117.944 370.53 117.44 370.53 116.792 cv
370.53 116.216 370.314 115.76 369.93 115.448 cv
369.546 115.136 368.682 114.824 367.338 114.536 cv
366.594 114.368 li
365.25 114.08 364.266 113.648 363.69 113.072 cv
363.09 112.496 362.802 111.704 362.802 110.672 cv
362.802 109.448 363.234 108.488 364.098 107.816 cv
364.962 107.144 366.21 106.808 367.842 106.808 cv
368.634 106.808 369.378 106.88 370.098 107 cv
370.794 107.12 371.442 107.288 372.042 107.504 cv
f
381.642 121.448 mo
381.018 122.984 380.418 124.016 379.842 124.496 cv
379.266 124.976 378.498 125.216 377.538 125.216 cv
375.81 125.216 li
375.81 123.416 li
377.082 123.416 li
377.658 123.416 378.114 123.272 378.45 122.984 cv
378.786 122.696 379.146 122.048 379.554 120.992 cv
379.938 120.032 li
374.634 107.12 li
376.914 107.12 li
381.018 117.392 li
385.122 107.12 li
387.402 107.12 li
381.642 121.448 li
f
400.602 109.64 mo
401.13 108.68 401.778 107.984 402.522 107.504 cv
403.266 107.048 404.154 106.808 405.186 106.808 cv
406.53 106.808 407.586 107.288 408.33 108.248 cv
409.074 109.208 409.458 110.576 409.458 112.328 cv
409.458 120.248 li
407.298 120.248 li
407.298 112.4 li
407.298 111.152 407.058 110.216 406.626 109.592 cv
406.17 108.992 405.498 108.68 404.586 108.68 cv
403.458 108.68 402.57 109.064 401.922 109.808 cv
401.274 110.552 400.962 111.56 400.962 112.832 cv
400.962 120.248 li
398.802 120.248 li
398.802 112.4 li
398.802 111.152 398.562 110.216 398.13 109.592 cv
397.674 108.992 396.978 108.68 396.066 108.68 cv
394.962 108.68 394.074 109.064 393.426 109.808 cv
392.778 110.552 392.466 111.56 392.466 112.832 cv
392.466 120.248 li
390.306 120.248 li
390.306 107.12 li
392.466 107.12 li
392.466 109.16 li
392.946 108.368 393.546 107.768 394.242 107.384 cv
394.914 107 395.73 106.808 396.69 106.808 cv
397.65 106.808 398.442 107.048 399.114 107.528 cv
399.786 108.008 400.266 108.728 400.602 109.64 cv
f
423.978 109.64 mo
424.506 108.68 425.154 107.984 425.898 107.504 cv
426.642 107.048 427.53 106.808 428.562 106.808 cv
429.906 106.808 430.962 107.288 431.706 108.248 cv
432.45 109.208 432.834 110.576 432.834 112.328 cv
432.834 120.248 li
430.674 120.248 li
430.674 112.4 li
430.674 111.152 430.434 110.216 430.002 109.592 cv
429.546 108.992 428.874 108.68 427.962 108.68 cv
426.834 108.68 425.946 109.064 425.298 109.808 cv
424.65 110.552 424.338 111.56 424.338 112.832 cv
424.338 120.248 li
422.178 120.248 li
422.178 112.4 li
422.178 111.152 421.938 110.216 421.506 109.592 cv
421.05 108.992 420.354 108.68 419.442 108.68 cv
418.338 108.68 417.45 109.064 416.802 109.808 cv
416.154 110.552 415.842 111.56 415.842 112.832 cv
415.842 120.248 li
413.682 120.248 li
413.682 107.12 li
415.842 107.12 li
415.842 109.16 li
416.322 108.368 416.922 107.768 417.618 107.384 cv
418.29 107 419.106 106.808 420.066 106.808 cv
421.026 106.808 421.818 107.048 422.49 107.528 cv
423.162 108.008 423.642 108.728 423.978 109.64 cv
f
448.362 113.144 mo
448.362 114.2 li
438.45 114.2 li
438.546 115.688 438.978 116.84 439.794 117.608 cv
440.586 118.376 441.69 118.76 443.13 118.76 cv
443.946 118.76 444.762 118.664 445.53 118.472 cv
446.298 118.28 447.09 117.968 447.858 117.536 cv
447.858 119.576 li
447.09 119.912 446.298 120.176 445.482 120.32 cv
444.666 120.464 443.826 120.56 443.01 120.56 cv
440.898 120.56 439.242 119.96 438.018 118.76 cv
436.794 117.56 436.194 115.904 436.194 113.816 cv
436.194 111.68 436.77 109.976 437.922 108.704 cv
439.074 107.456 440.658 106.808 442.626 106.808 cv
444.402 106.808 445.794 107.384 446.826 108.512 cv
447.834 109.664 448.362 111.2 448.362 113.144 cv
446.202 112.52 mo
446.178 111.344 445.842 110.408 445.218 109.688 cv
444.57 108.992 443.706 108.632 442.65 108.632 cv
441.45 108.632 440.49 108.992 439.77 109.664 cv
439.05 110.336 438.618 111.296 438.522 112.52 cv
446.202 112.52 li
f
454.026 103.4 mo
454.026 107.12 li
458.466 107.12 li
458.466 108.8 li
454.026 108.8 li
454.026 115.928 li
454.026 117.008 454.17 117.704 454.458 117.992 cv
454.746 118.304 455.346 118.448 456.258 118.448 cv
458.466 118.448 li
458.466 120.248 li
456.258 120.248 li
454.578 120.248 453.426 119.936 452.802 119.312 cv
452.178 118.688 451.866 117.56 451.866 115.928 cv
451.866 108.8 li
450.282 108.8 li
450.282 107.12 li
451.866 107.12 li
451.866 103.4 li
454.026 103.4 li
f
468.906 109.136 mo
468.666 108.992 468.402 108.896 468.114 108.824 cv
467.826 108.776 467.514 108.728 467.178 108.728 cv
465.954 108.728 465.018 109.136 464.37 109.928 cv
463.698 110.72 463.386 111.848 463.386 113.336 cv
463.386 120.248 li
461.226 120.248 li
461.226 107.12 li
463.386 107.12 li
463.386 109.16 li
463.818 108.368 464.418 107.768 465.138 107.384 cv
465.858 107 466.746 106.808 467.802 106.808 cv
467.946 106.808 468.114 106.832 468.306 106.832 cv
468.474 106.856 468.666 106.88 468.906 106.928 cv
468.906 109.136 li
f
471.162 107.12 mo
473.322 107.12 li
473.322 120.248 li
471.162 120.248 li
471.162 107.12 li
471.162 102.008 mo
473.322 102.008 li
473.322 104.744 li
471.162 104.744 li
471.162 102.008 li
f
476.898 107.12 mo
487.146 107.12 li
487.146 109.088 li
479.034 118.52 li
487.146 118.52 li
487.146 120.248 li
476.61 120.248 li
476.61 118.28 li
484.722 108.848 li
476.898 108.848 li
476.898 107.12 li
f
501.666 113.144 mo
501.666 114.2 li
491.754 114.2 li
491.85 115.688 492.282 116.84 493.098 117.608 cv
493.89 118.376 494.994 118.76 496.434 118.76 cv
497.25 118.76 498.066 118.664 498.834 118.472 cv
499.602 118.28 500.394 117.968 501.162 117.536 cv
501.162 119.576 li
500.394 119.912 499.602 120.176 498.786 120.32 cv
497.97 120.464 497.13 120.56 496.314 120.56 cv
494.202 120.56 492.546 119.96 491.322 118.76 cv
490.098 117.56 489.498 115.904 489.498 113.816 cv
489.498 111.68 490.074 109.976 491.226 108.704 cv
492.378 107.456 493.962 106.808 495.93 106.808 cv
497.706 106.808 499.098 107.384 500.13 108.512 cv
501.138 109.664 501.666 111.2 501.666 113.144 cv
499.506 112.52 mo
499.482 111.344 499.146 110.408 498.522 109.688 cv
497.874 108.992 497.01 108.632 495.954 108.632 cv
494.754 108.632 493.794 108.992 493.074 109.664 cv
492.354 110.336 491.922 111.296 491.826 112.52 cv
499.506 112.52 li
f
513.834 109.112 mo
513.834 102.008 li
515.994 102.008 li
515.994 120.248 li
513.834 120.248 li
513.834 118.28 li
513.378 119.072 512.802 119.648 512.106 120.008 cv
511.41 120.368 510.594 120.56 509.634 120.56 cv
508.05 120.56 506.754 119.936 505.746 118.688 cv
504.738 117.44 504.258 115.76 504.258 113.696 cv
504.258 111.632 504.738 109.976 505.746 108.704 cv
506.754 107.456 508.05 106.808 509.634 106.808 cv
510.594 106.808 511.41 107 512.106 107.384 cv
512.802 107.768 513.378 108.344 513.834 109.112 cv
506.49 113.696 mo
506.49 115.28 506.802 116.528 507.45 117.44 cv
508.098 118.352 509.01 118.784 510.162 118.784 cv
511.29 118.784 512.178 118.352 512.85 117.44 cv
513.498 116.528 513.834 115.28 513.834 113.696 cv
513.834 112.112 513.498 110.888 512.85 109.976 cv
512.178 109.064 511.29 108.608 510.162 108.608 cv
509.01 108.608 508.098 109.064 507.45 109.976 cv
506.802 110.888 506.49 112.112 506.49 113.696 cv
f
328.579 129.633 mo
343.363 129.633 li
343.363 131.625 li
337.147 131.625 li
337.147 147.129 li
334.771 147.129 li
334.771 131.625 li
328.579 131.625 li
328.579 129.633 li
f
353.466 136.233 mo
368.49 136.233 li
368.49 138.201 li
353.466 138.201 li
353.466 136.233 li
353.466 141.009 mo
368.49 141.009 li
368.49 143.001 li
353.466 143.001 li
353.466 141.009 li
f
381.642 145.137 mo
385.506 145.137 li
385.506 131.793 li
381.306 132.633 li
381.306 130.473 li
385.482 129.633 li
387.858 129.633 li
387.858 145.137 li
391.722 145.137 li
391.722 147.129 li
381.642 147.129 li
381.642 145.137 li
f
403.674 137.697 mo
404.802 137.937 405.69 138.441 406.314 139.209 cv
406.938 139.977 407.274 140.937 407.274 142.041 cv
407.274 143.769 406.674 145.113 405.498 146.049 cv
404.298 146.985 402.618 147.441 400.434 147.441 cv
399.69 147.441 398.922 147.369 398.154 147.225 cv
397.386 147.105 396.57 146.889 395.754 146.601 cv
395.754 144.321 li
396.402 144.705 397.122 144.993 397.914 145.185 cv
398.682 145.377 399.498 145.473 400.362 145.473 cv
401.85 145.473 402.978 145.185 403.746 144.609 cv
404.514 144.033 404.922 143.169 404.922 142.041 cv
404.922 141.033 404.562 140.217 403.842 139.641 cv
403.122 139.065 402.114 138.753 400.818 138.753 cv
398.778 138.753 li
398.778 136.809 li
400.914 136.809 li
402.066 136.809 402.954 136.593 403.578 136.113 cv
404.202 135.657 404.514 134.985 404.514 134.097 cv
404.514 133.209 404.178 132.513 403.554 132.033 cv
402.906 131.553 401.994 131.313 400.818 131.313 cv
400.17 131.313 399.474 131.385 398.73 131.529 cv
397.986 131.673 397.17 131.889 396.282 132.177 cv
396.282 130.065 li
397.17 129.825 398.01 129.633 398.802 129.513 cv
399.57 129.393 400.314 129.321 401.034 129.321 cv
402.81 129.321 404.226 129.729 405.282 130.545 cv
406.338 131.361 406.866 132.465 406.866 133.857 cv
406.866 134.817 406.578 135.633 406.026 136.305 cv
405.474 136.977 404.682 137.457 403.674 137.697 cv
f
416.826 131.193 mo
415.602 131.193 414.69 131.793 414.066 132.993 cv
413.442 134.193 413.154 135.993 413.154 138.393 cv
413.154 140.793 413.442 142.593 414.066 143.793 cv
414.69 144.993 415.602 145.593 416.826 145.593 cv
418.05 145.593 418.962 144.993 419.586 143.793 cv
420.186 142.593 420.498 140.793 420.498 138.393 cv
420.498 135.993 420.186 134.193 419.586 132.993 cv
418.962 131.793 418.05 131.193 416.826 131.193 cv
416.826 129.321 mo
418.77 129.321 420.258 130.113 421.314 131.649 cv
422.346 133.209 422.874 135.465 422.874 138.393 cv
422.874 141.345 422.346 143.601 421.314 145.137 cv
420.258 146.673 418.77 147.441 416.826 147.441 cv
414.858 147.441 413.346 146.673 412.314 145.137 cv
411.282 143.601 410.778 141.345 410.778 138.393 cv
410.778 135.465 411.282 133.209 412.314 131.649 cv
413.346 130.113 414.858 129.321 416.826 129.321 cv
f
434.442 129.633 mo
436.818 129.633 li
436.818 137.025 li
444.666 129.633 li
447.714 129.633 li
439.026 137.793 li
448.338 147.129 li
445.218 147.129 li
436.818 138.705 li
436.818 147.129 li
434.442 147.129 li
434.442 129.633 li
f
159.608 1219.5 mo
732.556 1219.5 li
732.556 659.746 li
159.608 659.746 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
159.608 1219.5 mo
732.556 1219.5 li
732.556 659.746 li
159.608 659.746 li
cp
clp
2 lc
159.608 1009.37 mo
161.327 1010.87 li
163.045 1012.08 li
164.764 1013.01 li
166.483 1013.7 li
168.202 1014.15 li
169.921 1014.4 li
171.64 1014.47 li
173.931 1014.3 li
174.504 1014.56 li
175.077 1014.49 li
175.65 1014.14 li
178.515 1011.43 li
179.088 1011.14 li
179.661 1011.07 li
180.807 1011.35 li
182.526 1012.16 li
183.672 1012.31 li
184.817 1012.74 li
186.536 1013.9 li
189.401 1015.98 li
191.693 1018.36 li
193.412 1020.5 li
194.558 1021.87 li
195.13 1022.22 li
195.703 1022.34 li
196.276 1022.26 li
197.422 1021.67 li
198.568 1021.12 li
199.714 1020.87 li
200.86 1020.59 li
201.433 1020.27 li
202.579 1019.17 li
203.725 1017.66 li
204.298 1017.13 li
204.871 1016.88 li
205.444 1016.92 li
206.589 1017.92 li
207.735 1019.41 li
208.881 1021.57 li
210.027 1024.21 li
211.173 1026.9 li
213.465 1030.87 li
215.184 1033.58 li
216.903 1036.17 li
219.194 1040.33 li
219.767 1040.99 li
220.34 1041.45 li
221.486 1041.88 li
222.059 1042.02 li
222.632 1042.04 li
223.778 1041.64 li
224.924 1041.13 li
226.07 1040.4 li
226.643 1039.97 li
227.216 1039.31 li
230.08 1035.16 li
230.653 1034.89 li
231.226 1034.84 li
231.799 1035.05 li
232.372 1035.52 li
234.091 1037.39 li
234.664 1037.86 li
235.81 1038.02 li
236.956 1037.77 li
238.675 1036.73 li
240.393 1034.99 li
241.539 1034.47 li
242.112 1034.35 li
243.258 1034.48 li
244.404 1034.8 li
245.55 1035.32 li
247.269 1035.68 li
247.842 1035.83 li
248.415 1036.23 li
248.988 1036.92 li
250.134 1039 li
251.279 1041.24 li
252.425 1042.83 li
252.998 1043.28 li
253.571 1043.41 li
255.29 1043.05 li
255.863 1043.18 li
256.436 1043.72 li
257.009 1044.61 li
259.874 1050.13 li
260.447 1050.73 li
261.02 1051.13 li
261.592 1051.27 li
262.165 1051.12 li
263.311 1050.39 li
265.03 1049.27 li
265.603 1049.08 li
266.176 1049.12 li
267.322 1049.58 li
267.895 1050 li
269.041 1051.22 li
269.614 1051.64 li
271.333 1052.37 li
272.479 1052.74 li
274.77 1053.97 li
277.062 1055.2 li
278.781 1055.59 li
279.927 1055.71 li
280.5 1055.64 li
281.646 1055.14 li
282.219 1054.87 li
282.792 1054.75 li
283.365 1054.75 li
285.656 1055.26 li
287.948 1054.87 li
288.521 1054.9 li
290.813 1055.51 li
291.386 1055.83 li
292.532 1056.83 li
295.396 1059.57 li
296.542 1060.24 li
298.261 1060.75 li
299.407 1061.7 li
301.126 1063.25 li
302.845 1064.27 li
303.991 1065.51 li
306.283 1068.74 li
307.428 1069.81 li
308.574 1070.39 li
309.72 1070.7 li
310.866 1070.82 li
313.158 1070.53 li
314.304 1070.97 li
315.45 1071.95 li
316.596 1073.09 li
318.314 1075.32 li
319.46 1076.9 li
320.033 1077.42 li
321.752 1078.14 li
322.325 1078.54 li
322.898 1079.11 li
323.471 1079.99 li
328.055 1089.89 li
330.919 1094.81 li
332.065 1096.93 li
332.638 1097.75 li
333.211 1098.36 li
333.784 1098.73 li
334.357 1098.78 li
337.795 1098 li
338.368 1097.92 li
340.659 1097.26 li
341.805 1097.59 li
342.951 1098.18 li
344.097 1098.76 li
345.243 1099.17 li
346.962 1099.81 li
348.108 1100.07 li
348.681 1100.17 li
349.254 1100.57 li
349.827 1101.34 li
350.972 1103.45 li
352.691 1107.22 li
356.129 1113.21 li
359.567 1119.81 li
360.713 1121.36 li
363.577 1124.31 li
365.296 1127.05 li
367.015 1129.78 li
369.88 1133.45 li
372.172 1136.65 li
373.317 1138.93 li
375.036 1143.18 li
376.182 1145.35 li
380.193 1151.61 li
385.349 1159.96 li
385.922 1160.63 li
388.214 1162.51 li
389.36 1164.01 li
392.225 1168.38 li
393.371 1169.73 li
394.517 1171.02 li
395.662 1172.85 li
396.808 1175.01 li
400.246 1183.1 li
401.965 1187.54 li
402.538 1188.47 li
403.684 1189.39 li
404.257 1189.82 li
404.83 1190.4 li
405.403 1191.48 li
406.548 1194.82 li
410.559 1207.21 li
412.278 1211.69 li
413.424 1213.84 li
414.57 1215.31 li
415.716 1216.54 li
416.289 1216.99 li
416.862 1217.29 li
417.434 1217.42 li
418.007 1217.38 li
418.58 1217.12 li
419.726 1216.15 li
420.872 1214.67 li
422.018 1212.76 li
423.164 1210.38 li
424.31 1207.02 li
425.456 1202.2 li
426.602 1195.59 li
427.748 1187.14 li
428.893 1176.91 li
430.039 1165.38 li
431.758 1144.02 li
442.644 1002.77 li
453.53 868.982 li
462.124 756.925 li
463.843 740.064 li
464.989 730.726 li
466.135 723.149 li
467.281 717.491 li
468.427 713.458 li
469.573 710.652 li
470.719 708.547 li
471.865 706.822 li
473.01 705.623 li
473.583 705.181 li
474.156 704.925 li
474.729 704.886 li
475.302 705.018 li
475.875 705.311 li
476.448 705.759 li
478.167 707.664 li
478.74 708.46 li
479.886 710.618 li
481.032 713.496 li
482.751 718.542 li
485.042 725.685 li
486.761 730.828 li
487.334 731.902 li
488.48 732.911 li
489.626 733.834 li
490.199 734.768 li
491.345 737.659 li
493.064 742.035 li
495.928 748.428 li
497.074 750.414 li
498.22 751.956 li
499.939 753.928 li
501.658 756.435 li
503.377 759.113 li
504.523 760.37 li
506.241 761.671 li
507.387 763.186 li
513.69 773.464 li
517.128 779.125 li
519.992 785.658 li
522.284 788.857 li
526.295 794.311 li
528.586 797.999 li
529.732 799.264 li
531.451 800.944 li
532.597 802.492 li
534.316 805.471 li
536.035 809.094 li
537.754 812.211 li
539.472 815.082 li
542.337 820.96 li
542.91 821.731 li
543.483 822.132 li
545.775 822.655 li
549.213 824.125 li
550.359 824.711 li
551.504 825.044 li
552.077 825.013 li
554.369 824.308 li
556.088 824.025 li
557.807 823.523 li
558.38 823.573 li
558.953 823.944 li
559.526 824.558 li
560.099 825.378 li
565.255 834.568 li
568.693 842.316 li
569.266 843.195 li
569.839 843.768 li
570.985 844.46 li
572.131 844.884 li
572.703 845.404 li
575.568 849.209 li
577.287 850.911 li
577.86 851.335 li
579.006 851.778 li
579.579 851.852 li
580.152 851.788 li
581.298 851.487 li
582.444 851.608 li
583.59 851.919 li
584.735 852.49 li
585.881 853.563 li
587.027 855.09 li
588.173 856.792 li
589.319 858.036 li
590.465 858.753 li
591.038 859.051 li
592.184 860.044 li
593.33 861.119 li
593.903 861.553 li
595.049 861.92 li
595.621 862.06 li
596.767 862.732 li
597.913 863.647 li
600.205 866.011 li
601.351 866.797 li
603.643 867.403 li
604.789 867.37 li
606.507 867.047 li
607.08 867.046 li
609.372 867.551 li
609.945 867.43 li
611.664 866.669 li
612.81 866.626 li
615.102 867.1 li
616.248 867.654 li
619.112 869.284 li
620.258 869.785 li
621.404 870.148 li
622.55 870.66 li
623.123 871.082 li
624.842 872.726 li
625.988 873.179 li
626.561 873.221 li
627.134 873.031 li
628.852 871.915 li
629.998 871.187 li
630.571 871.03 li
631.144 871.171 li
631.717 871.571 li
632.29 872.179 li
632.863 872.988 li
634.009 875.289 li
635.155 877.691 li
635.728 878.584 li
636.301 879.127 li
636.874 879.252 li
638.593 878.899 li
639.166 879.022 li
639.738 879.476 li
640.311 880.17 li
641.457 882.141 li
642.603 884.422 li
643.176 885.383 li
643.749 886.073 li
644.322 886.473 li
647.187 887.224 li
648.333 887.694 li
649.479 887.935 li
650.052 887.951 li
650.625 887.839 li
651.77 887.312 li
652.916 886.16 li
653.489 885.573 li
655.208 884.536 li
656.354 884.281 li
657.5 884.446 li
658.646 885.485 li
660.365 887.256 li
660.938 887.465 li
661.51 887.416 li
662.083 887.146 li
662.656 886.594 li
663.802 884.844 li
664.948 882.998 li
665.521 882.333 li
667.24 881.169 li
668.959 880.412 li
669.532 880.269 li
670.105 880.287 li
671.251 880.592 li
671.824 880.859 li
672.397 881.315 li
672.969 881.975 li
674.115 883.975 li
675.834 887.083 li
678.699 891.436 li
680.991 895.402 li
682.137 898.091 li
683.283 900.733 li
684.428 902.898 li
685.574 904.385 li
686.72 905.389 li
687.293 905.426 li
687.866 905.178 li
688.439 904.641 li
690.158 902.511 li
690.731 902.034 li
691.304 901.711 li
692.45 901.436 li
693.596 901.179 li
694.742 900.632 li
695.887 900.049 li
696.46 899.962 li
697.033 900.079 li
697.606 900.429 li
698.752 901.807 li
699.898 903.268 li
701.617 905.181 li
703.336 906.851 li
707.346 909.559 li
708.492 909.994 li
710.211 910.345 li
711.93 911.149 li
712.503 911.234 li
713.076 911.165 li
713.649 910.87 li
715.368 909.263 li
716.514 908.162 li
717.086 907.809 li
717.659 907.74 li
718.232 908.001 li
720.524 907.836 li
722.243 907.901 li
723.962 908.151 li
725.681 908.608 li
727.4 909.293 li
729.118 910.228 li
730.837 911.433 li
732.556 912.93 li
.930816 .793027 0 0 cmyk
@
grestore
1 lw
2 lc
0 lj
159.608 659.746 mo
732.556 659.746 li
1 /0 /CSD get_res sepcs
1 sep
@
732.556 1219.5 mo
732.556 659.746 li
@
159.608 1219.5 mo
732.556 1219.5 li
@
159.608 1219.5 mo
159.608 659.746 li
@
211.171 1219.5 mo
211.171 1204.5 li
f
2 lw
0 lc
1 lj
211.171 1219.5 mo
211.171 1204.5 li
@
211.171 659.746 mo
211.171 674.746 li
f
211.171 659.746 mo
211.171 674.746 li
@
225.333 1235.09 mo
224.017 1235.09 222.981 1235.46 222.225 1236.16 cv
221.469 1236.86 221.105 1237.81 221.105 1239.04 cv
221.105 1240.27 221.469 1241.25 222.225 1241.95 cv
222.981 1242.65 224.017 1242.99 225.333 1242.99 cv
226.621 1242.99 227.657 1242.65 228.413 1241.93 cv
229.169 1241.23 229.561 1240.27 229.561 1239.04 cv
229.561 1237.81 229.169 1236.86 228.441 1236.16 cv
227.685 1235.46 226.649 1235.09 225.333 1235.09 cv
222.561 1233.92 mo
221.385 1233.64 220.461 1233.08 219.789 1232.27 cv
219.117 1231.45 218.809 1230.47 218.809 1229.3 cv
218.809 1227.67 219.369 1226.39 220.545 1225.43 cv
221.693 1224.48 223.289 1224.01 225.333 1224.01 cv
227.349 1224.01 228.945 1224.48 230.121 1225.43 cv
231.269 1226.39 231.857 1227.67 231.857 1229.3 cv
231.857 1230.47 231.521 1231.45 230.849 1232.27 cv
230.177 1233.08 229.281 1233.64 228.105 1233.92 cv
229.421 1234.23 230.457 1234.84 231.213 1235.74 cv
231.941 1236.63 232.333 1237.75 232.333 1239.04 cv
232.333 1241.03 231.717 1242.54 230.513 1243.58 cv
229.281 1244.64 227.573 1245.15 225.333 1245.15 cv
223.065 1245.15 221.329 1244.64 220.125 1243.58 cv
218.921 1242.54 218.333 1241.03 218.333 1239.04 cv
218.333 1237.75 218.697 1236.63 219.453 1235.74 cv
220.181 1234.84 221.217 1234.23 222.561 1233.92 cv
221.553 1229.55 mo
221.553 1230.61 221.861 1231.45 222.533 1232.04 cv
223.205 1232.63 224.129 1232.91 225.333 1232.91 cv
226.509 1232.91 227.433 1232.63 228.105 1232.04 cv
228.777 1231.45 229.113 1230.61 229.113 1229.55 cv
229.113 1228.49 228.777 1227.67 228.105 1227.09 cv
227.433 1226.5 226.509 1226.19 225.333 1226.19 cv
224.129 1226.19 223.205 1226.5 222.533 1227.09 cv
221.861 1227.67 221.553 1228.49 221.553 1229.55 cv
f
195.936 1234.84 mo
213.464 1234.84 li
213.464 1237.17 li
195.936 1237.17 li
195.936 1234.84 li
f
269.899 1219.5 mo
269.899 1204.5 li
f
269.899 1219.5 mo
269.899 1204.5 li
@
269.899 659.746 mo
269.899 674.746 li
f
269.899 659.746 mo
269.899 674.746 li
@
284.326 1233.47 mo
283.094 1233.47 282.114 1233.92 281.386 1234.76 cv
280.658 1235.6 280.294 1236.77 280.294 1238.23 cv
280.294 1239.71 280.658 1240.89 281.386 1241.73 cv
282.114 1242.57 283.094 1242.99 284.326 1242.99 cv
285.558 1242.99 286.538 1242.57 287.266 1241.73 cv
287.994 1240.89 288.358 1239.71 288.358 1238.23 cv
288.358 1236.77 287.994 1235.6 287.266 1234.76 cv
286.538 1233.92 285.558 1233.47 284.326 1233.47 cv
289.814 1224.82 mo
289.814 1227.34 li
289.114 1227 288.414 1226.75 287.714 1226.58 cv
286.986 1226.41 286.286 1226.33 285.614 1226.33 cv
283.766 1226.33 282.366 1226.95 281.414 1228.18 cv
280.462 1229.41 279.902 1231.29 279.79 1233.75 cv
280.322 1232.97 280.994 1232.35 281.806 1231.93 cv
282.618 1231.51 283.514 1231.29 284.494 1231.29 cv
286.538 1231.29 288.162 1231.93 289.338 1233.16 cv
290.514 1234.39 291.13 1236.1 291.13 1238.23 cv
291.13 1240.33 290.486 1242.01 289.254 1243.27 cv
288.022 1244.53 286.37 1245.15 284.326 1245.15 cv
281.974 1245.15 280.154 1244.25 278.922 1242.46 cv
277.662 1240.67 277.046 1238.03 277.046 1234.59 cv
277.046 1231.37 277.802 1228.79 279.342 1226.89 cv
280.854 1224.99 282.926 1224.01 285.502 1224.01 cv
286.174 1224.01 286.874 1224.09 287.602 1224.2 cv
288.302 1224.34 289.03 1224.54 289.814 1224.82 cv
f
254.593 1234.84 mo
272.121 1234.84 li
272.121 1237.17 li
254.593 1237.17 li
254.593 1234.84 li
f
328.627 1219.5 mo
328.627 1204.5 li
f
328.627 1219.5 mo
328.627 1204.5 li
@
328.627 659.746 mo
328.627 674.746 li
f
328.627 659.746 mo
328.627 674.746 li
@
344.296 1226.78 mo
337.324 1237.67 li
344.296 1237.67 li
344.296 1226.78 li
343.568 1224.37 mo
347.04 1224.37 li
347.04 1237.67 li
349.952 1237.67 li
349.952 1239.97 li
347.04 1239.97 li
347.04 1244.78 li
344.296 1244.78 li
344.296 1239.97 li
335.084 1239.97 li
335.084 1237.31 li
343.568 1224.37 li
f
313.22 1234.84 mo
330.748 1234.84 li
330.748 1237.17 li
313.22 1237.17 li
313.22 1234.84 li
f
387.354 1219.5 mo
387.354 1204.5 li
f
387.354 1219.5 mo
387.354 1204.5 li
@
387.354 659.746 mo
387.354 674.746 li
f
387.354 659.746 mo
387.354 674.746 li
@
398.433 1242.46 mo
408.065 1242.46 li
408.065 1244.78 li
395.101 1244.78 li
395.101 1242.46 li
396.137 1241.39 397.565 1239.94 399.385 1238.09 cv
401.177 1236.27 402.325 1235.09 402.801 1234.56 cv
403.697 1233.58 404.313 1232.74 404.649 1232.04 cv
404.985 1231.37 405.181 1230.67 405.181 1230 cv
405.181 1228.93 404.789 1228.04 404.033 1227.37 cv
403.277 1226.69 402.297 1226.33 401.065 1226.33 cv
400.197 1226.33 399.273 1226.5 398.321 1226.78 cv
397.369 1227.09 396.333 1227.53 395.241 1228.15 cv
395.241 1225.35 li
396.361 1224.9 397.397 1224.57 398.349 1224.34 cv
399.301 1224.12 400.197 1224.01 401.009 1224.01 cv
403.109 1224.01 404.789 1224.54 406.049 1225.6 cv
407.309 1226.67 407.953 1228.07 407.953 1229.83 cv
407.953 1230.67 407.785 1231.48 407.477 1232.21 cv
407.169 1232.97 406.609 1233.86 405.769 1234.87 cv
405.545 1235.15 404.817 1235.91 403.585 1237.17 cv
402.353 1238.43 400.645 1240.19 398.433 1242.46 cv
f
372.564 1234.84 mo
390.092 1234.84 li
390.092 1237.17 li
372.564 1237.17 li
372.564 1234.84 li
f
446.082 1219.5 mo
446.082 1204.5 li
f
446.082 1219.5 mo
446.082 1204.5 li
@
446.082 659.746 mo
446.082 674.746 li
f
446.082 659.746 mo
446.082 674.746 li
@
447.931 1226.19 mo
446.503 1226.19 445.439 1226.89 444.711 1228.29 cv
443.983 1229.69 443.647 1231.79 443.647 1234.59 cv
443.647 1237.39 443.983 1239.49 444.711 1240.89 cv
445.439 1242.29 446.503 1242.99 447.931 1242.99 cv
449.359 1242.99 450.423 1242.29 451.151 1240.89 cv
451.851 1239.49 452.215 1237.39 452.215 1234.59 cv
452.215 1231.79 451.851 1229.69 451.151 1228.29 cv
450.423 1226.89 449.359 1226.19 447.931 1226.19 cv
447.931 1224.01 mo
450.199 1224.01 451.935 1224.93 453.167 1226.72 cv
454.371 1228.54 454.987 1231.17 454.987 1234.59 cv
454.987 1238.03 454.371 1240.67 453.167 1242.46 cv
451.935 1244.25 450.199 1245.15 447.931 1245.15 cv
445.635 1245.15 443.871 1244.25 442.667 1242.46 cv
441.463 1240.67 440.875 1238.03 440.875 1234.59 cv
440.875 1231.17 441.463 1228.54 442.667 1226.72 cv
443.871 1224.93 445.635 1224.01 447.931 1224.01 cv
f
504.81 1219.5 mo
504.81 1204.5 li
f
504.81 1219.5 mo
504.81 1204.5 li
@
504.81 659.746 mo
504.81 674.746 li
f
504.81 659.746 mo
504.81 674.746 li
@
503.701 1242.46 mo
513.333 1242.46 li
513.333 1244.78 li
500.369 1244.78 li
500.369 1242.46 li
501.405 1241.39 502.833 1239.94 504.653 1238.09 cv
506.445 1236.27 507.593 1235.09 508.069 1234.56 cv
508.965 1233.58 509.581 1232.74 509.917 1232.04 cv
510.253 1231.37 510.449 1230.67 510.449 1230 cv
510.449 1228.93 510.057 1228.04 509.301 1227.37 cv
508.545 1226.69 507.565 1226.33 506.333 1226.33 cv
505.465 1226.33 504.541 1226.5 503.589 1226.78 cv
502.637 1227.09 501.601 1227.53 500.509 1228.15 cv
500.509 1225.35 li
501.629 1224.9 502.665 1224.57 503.617 1224.34 cv
504.569 1224.12 505.465 1224.01 506.277 1224.01 cv
508.377 1224.01 510.057 1224.54 511.317 1225.6 cv
512.577 1226.67 513.221 1228.07 513.221 1229.83 cv
513.221 1230.67 513.053 1231.48 512.745 1232.21 cv
512.437 1232.97 511.877 1233.86 511.037 1234.87 cv
510.813 1235.15 510.085 1235.91 508.853 1237.17 cv
507.621 1238.43 505.913 1240.19 503.701 1242.46 cv
f
563.537 1219.5 mo
563.537 1204.5 li
f
563.537 1219.5 mo
563.537 1204.5 li
@
563.537 659.746 mo
563.537 674.746 li
f
563.537 659.746 mo
563.537 674.746 li
@
566.684 1226.78 mo
559.712 1237.67 li
566.684 1237.67 li
566.684 1226.78 li
565.956 1224.37 mo
569.428 1224.37 li
569.428 1237.67 li
572.34 1237.67 li
572.34 1239.97 li
569.428 1239.97 li
569.428 1244.78 li
566.684 1244.78 li
566.684 1239.97 li
557.472 1239.97 li
557.472 1237.31 li
565.956 1224.37 li
f
622.265 1219.5 mo
622.265 1204.5 li
f
622.265 1219.5 mo
622.265 1204.5 li
@
622.265 659.746 mo
622.265 674.746 li
f
622.265 659.746 mo
622.265 674.746 li
@
624.458 1233.47 mo
623.226 1233.47 622.246 1233.92 621.518 1234.76 cv
620.79 1235.6 620.426 1236.77 620.426 1238.23 cv
620.426 1239.71 620.79 1240.89 621.518 1241.73 cv
622.246 1242.57 623.226 1242.99 624.458 1242.99 cv
625.69 1242.99 626.67 1242.57 627.398 1241.73 cv
628.126 1240.89 628.49 1239.71 628.49 1238.23 cv
628.49 1236.77 628.126 1235.6 627.398 1234.76 cv
626.67 1233.92 625.69 1233.47 624.458 1233.47 cv
629.946 1224.82 mo
629.946 1227.34 li
629.246 1227 628.546 1226.75 627.846 1226.58 cv
627.118 1226.41 626.418 1226.33 625.746 1226.33 cv
623.898 1226.33 622.498 1226.95 621.546 1228.18 cv
620.594 1229.41 620.034 1231.29 619.922 1233.75 cv
620.454 1232.97 621.126 1232.35 621.938 1231.93 cv
622.75 1231.51 623.646 1231.29 624.626 1231.29 cv
626.67 1231.29 628.294 1231.93 629.47 1233.16 cv
630.646 1234.39 631.262 1236.1 631.262 1238.23 cv
631.262 1240.33 630.618 1242.01 629.386 1243.27 cv
628.154 1244.53 626.502 1245.15 624.458 1245.15 cv
622.106 1245.15 620.286 1244.25 619.054 1242.46 cv
617.794 1240.67 617.178 1238.03 617.178 1234.59 cv
617.178 1231.37 617.934 1228.79 619.474 1226.89 cv
620.986 1224.99 623.058 1224.01 625.634 1224.01 cv
626.306 1224.01 627.006 1224.09 627.734 1224.2 cv
628.434 1224.34 629.162 1224.54 629.946 1224.82 cv
f
680.993 1219.5 mo
680.993 1204.5 li
f
680.993 1219.5 mo
680.993 1204.5 li
@
680.993 659.746 mo
680.993 674.746 li
f
680.993 659.746 mo
680.993 674.746 li
@
682.897 1235.09 mo
681.581 1235.09 680.545 1235.46 679.789 1236.16 cv
679.033 1236.86 678.669 1237.81 678.669 1239.04 cv
678.669 1240.27 679.033 1241.25 679.789 1241.95 cv
680.545 1242.65 681.581 1242.99 682.897 1242.99 cv
684.185 1242.99 685.221 1242.65 685.977 1241.93 cv
686.733 1241.23 687.125 1240.27 687.125 1239.04 cv
687.125 1237.81 686.733 1236.86 686.005 1236.16 cv
685.249 1235.46 684.213 1235.09 682.897 1235.09 cv
680.125 1233.92 mo
678.949 1233.64 678.025 1233.08 677.353 1232.27 cv
676.681 1231.45 676.373 1230.47 676.373 1229.3 cv
676.373 1227.67 676.933 1226.39 678.109 1225.43 cv
679.257 1224.48 680.853 1224.01 682.897 1224.01 cv
684.913 1224.01 686.509 1224.48 687.685 1225.43 cv
688.833 1226.39 689.421 1227.67 689.421 1229.3 cv
689.421 1230.47 689.085 1231.45 688.413 1232.27 cv
687.741 1233.08 686.845 1233.64 685.669 1233.92 cv
686.985 1234.23 688.021 1234.84 688.777 1235.74 cv
689.505 1236.63 689.897 1237.75 689.897 1239.04 cv
689.897 1241.03 689.281 1242.54 688.077 1243.58 cv
686.845 1244.64 685.137 1245.15 682.897 1245.15 cv
680.629 1245.15 678.893 1244.64 677.689 1243.58 cv
676.485 1242.54 675.897 1241.03 675.897 1239.04 cv
675.897 1237.75 676.261 1236.63 677.017 1235.74 cv
677.745 1234.84 678.781 1234.23 680.125 1233.92 cv
679.117 1229.55 mo
679.117 1230.61 679.425 1231.45 680.097 1232.04 cv
680.769 1232.63 681.693 1232.91 682.897 1232.91 cv
684.073 1232.91 684.997 1232.63 685.669 1232.04 cv
686.341 1231.45 686.677 1230.61 686.677 1229.55 cv
686.677 1228.49 686.341 1227.67 685.669 1227.09 cv
684.997 1226.5 684.073 1226.19 682.897 1226.19 cv
681.693 1226.19 680.769 1226.5 680.097 1227.09 cv
679.425 1227.67 679.117 1228.49 679.117 1229.55 cv
f
286.843 1256.59 mo
291.547 1256.59 li
297.499 1272.47 li
303.483 1256.59 li
308.187 1256.59 li
308.187 1279.92 li
305.115 1279.92 li
305.115 1259.44 li
299.099 1275.44 li
295.931 1275.44 li
289.915 1259.44 li
289.915 1279.92 li
286.843 1279.92 li
286.843 1256.59 li
f
322.299 1271.12 mo
319.963 1271.12 318.363 1271.41 317.467 1271.92 cv
316.571 1272.47 316.123 1273.36 316.123 1274.64 cv
316.123 1275.67 316.443 1276.5 317.115 1277.07 cv
317.787 1277.68 318.715 1277.97 319.867 1277.97 cv
321.467 1277.97 322.747 1277.43 323.707 1276.27 cv
324.667 1275.15 325.147 1273.65 325.147 1271.76 cv
325.147 1271.12 li
322.299 1271.12 li
328.027 1269.94 mo
328.027 1279.92 li
325.147 1279.92 li
325.147 1277.27 li
324.475 1278.35 323.643 1279.12 322.683 1279.6 cv
321.723 1280.08 320.507 1280.34 319.099 1280.34 cv
317.307 1280.34 315.867 1279.86 314.811 1278.87 cv
313.755 1277.87 313.243 1276.53 313.243 1274.83 cv
313.243 1272.88 313.883 1271.41 315.227 1270.39 cv
316.539 1269.39 318.491 1268.88 321.115 1268.88 cv
325.147 1268.88 li
325.147 1268.59 li
325.147 1267.28 324.699 1266.26 323.835 1265.52 cv
322.971 1264.82 321.755 1264.43 320.187 1264.43 cv
319.163 1264.43 318.203 1264.56 317.243 1264.82 cv
316.283 1265.07 315.387 1265.43 314.523 1265.87 cv
314.523 1263.22 li
315.547 1262.83 316.571 1262.51 317.563 1262.32 cv
318.555 1262.13 319.515 1262 320.475 1262 cv
323.003 1262 324.891 1262.67 326.139 1263.99 cv
327.387 1265.3 328.027 1267.28 328.027 1269.94 cv
f
345.467 1270.96 mo
345.467 1268.91 345.019 1267.28 344.187 1266.13 cv
343.323 1264.98 342.107 1264.4 340.571 1264.4 cv
339.035 1264.4 337.819 1264.98 336.955 1266.13 cv
336.091 1267.28 335.675 1268.91 335.675 1270.96 cv
335.675 1273.04 336.091 1274.64 336.955 1275.79 cv
337.819 1276.95 339.035 1277.52 340.571 1277.52 cv
342.107 1277.52 343.323 1276.95 344.187 1275.79 cv
345.019 1274.64 345.467 1273.04 345.467 1270.96 cv
348.347 1277.75 mo
348.347 1280.69 347.675 1282.9 346.363 1284.37 cv
345.019 1285.81 343.003 1286.55 340.283 1286.55 cv
339.259 1286.55 338.331 1286.45 337.435 1286.32 cv
336.539 1286.16 335.643 1285.94 334.811 1285.62 cv
334.811 1282.83 li
335.643 1283.28 336.475 1283.6 337.307 1283.83 cv
338.139 1284.05 338.971 1284.18 339.835 1284.18 cv
341.691 1284.18 343.099 1283.67 344.059 1282.71 cv
344.987 1281.71 345.467 1280.24 345.467 1278.26 cv
345.467 1276.85 li
344.859 1277.87 344.091 1278.64 343.163 1279.15 cv
342.235 1279.67 341.147 1279.92 339.867 1279.92 cv
337.691 1279.92 335.963 1279.12 334.651 1277.49 cv
333.339 1275.86 332.699 1273.68 332.699 1270.96 cv
332.699 1268.27 333.339 1266.1 334.651 1264.47 cv
335.963 1262.83 337.691 1262 339.867 1262 cv
341.147 1262 342.235 1262.26 343.163 1262.77 cv
344.091 1263.28 344.859 1264.05 345.467 1265.07 cv
345.467 1262.42 li
348.347 1262.42 li
348.347 1277.75 li
f
368.827 1269.36 mo
368.827 1279.92 li
365.947 1279.92 li
365.947 1269.46 li
365.947 1267.79 365.595 1266.58 364.955 1265.75 cv
364.315 1264.91 363.355 1264.5 362.075 1264.5 cv
360.507 1264.5 359.291 1265.01 358.395 1266 cv
357.499 1266.99 357.051 1268.34 357.051 1270.03 cv
357.051 1279.92 li
354.171 1279.92 li
354.171 1262.42 li
357.051 1262.42 li
357.051 1265.14 li
357.723 1264.11 358.523 1263.31 359.483 1262.8 cv
360.411 1262.29 361.499 1262 362.715 1262 cv
364.699 1262 366.235 1262.64 367.259 1263.89 cv
368.283 1265.14 368.827 1266.96 368.827 1269.36 cv
f
389.531 1270.45 mo
389.531 1271.86 li
376.315 1271.86 li
376.443 1273.84 377.019 1275.38 378.107 1276.4 cv
379.163 1277.43 380.635 1277.94 382.555 1277.94 cv
383.643 1277.94 384.731 1277.81 385.755 1277.55 cv
386.779 1277.3 387.835 1276.88 388.859 1276.31 cv
388.859 1279.03 li
387.835 1279.47 386.779 1279.83 385.691 1280.02 cv
384.603 1280.21 383.483 1280.34 382.395 1280.34 cv
379.579 1280.34 377.371 1279.54 375.739 1277.94 cv
374.107 1276.34 373.307 1274.13 373.307 1271.35 cv
373.307 1268.5 374.075 1266.23 375.611 1264.53 cv
377.147 1262.87 379.259 1262 381.883 1262 cv
384.251 1262 386.107 1262.77 387.483 1264.27 cv
388.827 1265.81 389.531 1267.86 389.531 1270.45 cv
386.651 1269.62 mo
386.619 1268.05 386.171 1266.8 385.339 1265.84 cv
384.475 1264.91 383.323 1264.43 381.915 1264.43 cv
380.315 1264.43 379.035 1264.91 378.075 1265.81 cv
377.115 1266.71 376.539 1267.99 376.411 1269.62 cv
386.651 1269.62 li
f
397.083 1257.46 mo
397.083 1262.42 li
403.003 1262.42 li
403.003 1264.66 li
397.083 1264.66 li
397.083 1274.16 li
397.083 1275.6 397.275 1276.53 397.659 1276.91 cv
398.043 1277.33 398.843 1277.52 400.059 1277.52 cv
403.003 1277.52 li
403.003 1279.92 li
400.059 1279.92 li
397.819 1279.92 396.283 1279.51 395.451 1278.67 cv
394.619 1277.84 394.203 1276.34 394.203 1274.16 cv
394.203 1264.66 li
392.091 1264.66 li
392.091 1262.42 li
394.203 1262.42 li
394.203 1257.46 li
397.083 1257.46 li
f
406.779 1262.42 mo
409.659 1262.42 li
409.659 1279.92 li
406.779 1279.92 li
406.779 1262.42 li
406.779 1255.6 mo
409.659 1255.6 li
409.659 1259.25 li
406.779 1259.25 li
406.779 1255.6 li
f
428.283 1263.09 mo
428.283 1265.78 li
427.451 1265.33 426.651 1265.01 425.819 1264.79 cv
424.987 1264.56 424.187 1264.43 423.355 1264.43 cv
421.499 1264.43 420.027 1265.04 419.003 1266.23 cv
417.979 1267.41 417.467 1269.07 417.467 1271.19 cv
417.467 1273.33 417.979 1274.99 419.003 1276.18 cv
420.027 1277.36 421.499 1277.94 423.355 1277.94 cv
424.187 1277.94 424.987 1277.84 425.819 1277.62 cv
426.651 1277.39 427.451 1277.04 428.283 1276.59 cv
428.283 1279.25 li
427.451 1279.63 426.619 1279.92 425.787 1280.08 cv
424.923 1280.24 423.995 1280.34 423.035 1280.34 cv
420.411 1280.34 418.299 1279.54 416.763 1277.87 cv
415.195 1276.24 414.427 1274 414.427 1271.19 cv
414.427 1268.34 415.195 1266.1 416.763 1264.47 cv
418.331 1262.83 420.475 1262 423.227 1262 cv
424.123 1262 424.987 1262.1 425.819 1262.29 cv
426.651 1262.48 427.483 1262.74 428.283 1263.09 cv
f
443.579 1256.59 mo
456.987 1256.59 li
456.987 1259.25 li
446.747 1259.25 li
446.747 1266.13 li
455.995 1266.13 li
455.995 1268.79 li
446.747 1268.79 li
446.747 1279.92 li
443.579 1279.92 li
443.579 1256.59 li
f
461.851 1262.42 mo
464.731 1262.42 li
464.731 1279.92 li
461.851 1279.92 li
461.851 1262.42 li
461.851 1255.6 mo
464.731 1255.6 li
464.731 1259.25 li
461.851 1259.25 li
461.851 1255.6 li
f
485.723 1270.45 mo
485.723 1271.86 li
472.507 1271.86 li
472.635 1273.84 473.211 1275.38 474.299 1276.4 cv
475.355 1277.43 476.827 1277.94 478.747 1277.94 cv
479.835 1277.94 480.923 1277.81 481.947 1277.55 cv
482.971 1277.3 484.027 1276.88 485.051 1276.31 cv
485.051 1279.03 li
484.027 1279.47 482.971 1279.83 481.883 1280.02 cv
480.795 1280.21 479.675 1280.34 478.587 1280.34 cv
475.771 1280.34 473.563 1279.54 471.931 1277.94 cv
470.299 1276.34 469.499 1274.13 469.499 1271.35 cv
469.499 1268.5 470.267 1266.23 471.803 1264.53 cv
473.339 1262.87 475.451 1262 478.075 1262 cv
480.443 1262 482.299 1262.77 483.675 1264.27 cv
485.019 1265.81 485.723 1267.86 485.723 1270.45 cv
482.843 1269.62 mo
482.811 1268.05 482.363 1266.8 481.531 1265.84 cv
480.667 1264.91 479.515 1264.43 478.107 1264.43 cv
476.507 1264.43 475.227 1264.91 474.267 1265.81 cv
473.307 1266.71 472.731 1267.99 472.603 1269.62 cv
482.843 1269.62 li
f
490.427 1255.6 mo
493.307 1255.6 li
493.307 1279.92 li
490.427 1279.92 li
490.427 1255.6 li
f
510.843 1265.07 mo
510.843 1255.6 li
513.723 1255.6 li
513.723 1279.92 li
510.843 1279.92 li
510.843 1277.3 li
510.235 1278.35 509.467 1279.12 508.539 1279.6 cv
507.611 1280.08 506.523 1280.34 505.243 1280.34 cv
503.131 1280.34 501.403 1279.51 500.059 1277.84 cv
498.715 1276.18 498.075 1273.94 498.075 1271.19 cv
498.075 1268.43 498.715 1266.23 500.059 1264.53 cv
501.403 1262.87 503.131 1262 505.243 1262 cv
506.523 1262 507.611 1262.26 508.539 1262.77 cv
509.467 1263.28 510.235 1264.05 510.843 1265.07 cv
501.051 1271.19 mo
501.051 1273.3 501.467 1274.96 502.331 1276.18 cv
503.195 1277.39 504.411 1277.97 505.947 1277.97 cv
507.451 1277.97 508.635 1277.39 509.531 1276.18 cv
510.395 1274.96 510.843 1273.3 510.843 1271.19 cv
510.843 1269.07 510.395 1267.44 509.531 1266.23 cv
508.635 1265.01 507.451 1264.4 505.947 1264.4 cv
504.411 1264.4 503.195 1265.01 502.331 1266.23 cv
501.467 1267.44 501.051 1269.07 501.051 1271.19 cv
f
533.115 1268.79 mo
533.115 1277.33 li
538.171 1277.33 li
539.867 1277.33 541.115 1276.98 541.947 1276.27 cv
542.747 1275.57 543.163 1274.51 543.163 1273.04 cv
543.163 1271.6 542.747 1270.55 541.947 1269.84 cv
541.115 1269.14 539.867 1268.79 538.171 1268.79 cv
533.115 1268.79 li
533.115 1259.19 mo
533.115 1266.23 li
537.787 1266.23 li
539.323 1266.23 540.443 1265.94 541.211 1265.36 cv
541.979 1264.79 542.363 1263.92 542.363 1262.71 cv
542.363 1261.55 541.979 1260.66 541.211 1260.08 cv
540.443 1259.51 539.323 1259.19 537.787 1259.19 cv
533.115 1259.19 li
529.947 1256.59 mo
538.011 1256.59 li
540.411 1256.59 542.267 1257.11 543.579 1258.1 cv
544.859 1259.12 545.531 1260.53 545.531 1262.35 cv
545.531 1263.79 545.179 1264.95 544.507 1265.78 cv
543.835 1266.61 542.875 1267.15 541.595 1267.35 cv
543.131 1267.7 544.347 1268.4 545.211 1269.46 cv
546.043 1270.51 546.491 1271.83 546.491 1273.39 cv
546.491 1275.51 545.755 1277.11 544.347 1278.23 cv
542.939 1279.38 540.923 1279.92 538.331 1279.92 cv
529.947 1279.92 li
529.947 1256.59 li
f
552.507 1275.95 mo
555.803 1275.95 li
555.803 1278.64 li
553.243 1283.6 li
551.227 1283.6 li
552.507 1278.64 li
552.507 1275.95 li
f
579.035 1255.63 mo
577.627 1258.07 576.603 1260.43 575.931 1262.77 cv
575.227 1265.11 574.907 1267.47 574.907 1269.87 cv
574.907 1272.31 575.227 1274.67 575.931 1277.01 cv
576.603 1279.38 577.627 1281.71 579.035 1284.11 cv
576.539 1284.11 li
574.971 1281.65 573.787 1279.28 573.019 1276.91 cv
572.251 1274.55 571.867 1272.21 571.867 1269.87 cv
571.867 1267.57 572.251 1265.23 573.019 1262.87 cv
573.787 1260.5 574.939 1258.1 576.539 1255.63 cv
579.035 1255.63 li
f
581.531 1256.59 mo
601.243 1256.59 li
601.243 1259.25 li
592.955 1259.25 li
592.955 1279.92 li
589.787 1279.92 li
589.787 1259.25 li
581.531 1259.25 li
581.531 1256.59 li
f
603.706 1255.63 mo
606.202 1255.63 li
607.738 1258.1 608.922 1260.5 609.69 1262.87 cv
610.458 1265.23 610.874 1267.57 610.874 1269.87 cv
610.874 1272.21 610.458 1274.55 609.69 1276.91 cv
608.922 1279.28 607.738 1281.65 606.202 1284.11 cv
603.706 1284.11 li
605.082 1281.71 606.106 1279.38 606.81 1277.01 cv
607.482 1274.67 607.834 1272.31 607.834 1269.87 cv
607.834 1267.47 607.482 1265.11 606.81 1262.77 cv
606.106 1260.43 605.082 1258.07 603.706 1255.63 cv
f
159.608 1219.5 mo
174.608 1219.5 li
f
159.608 1219.5 mo
174.608 1219.5 li
@
89.082 1208.63 mo
87.654 1208.63 86.59 1209.33 85.862 1210.73 cv
85.134 1212.13 84.798 1214.23 84.798 1217.03 cv
84.798 1219.83 85.134 1221.93 85.862 1223.33 cv
86.59 1224.73 87.654 1225.43 89.082 1225.43 cv
90.51 1225.43 91.574 1224.73 92.302 1223.33 cv
93.002 1221.93 93.366 1219.83 93.366 1217.03 cv
93.366 1214.23 93.002 1212.13 92.302 1210.73 cv
91.574 1209.33 90.51 1208.63 89.082 1208.63 cv
89.082 1206.45 mo
91.35 1206.45 93.086 1207.37 94.318 1209.17 cv
95.522 1210.99 96.138 1213.62 96.138 1217.03 cv
96.138 1220.48 95.522 1223.11 94.318 1224.9 cv
93.086 1226.69 91.35 1227.59 89.082 1227.59 cv
86.786 1227.59 85.022 1226.69 83.818 1224.9 cv
82.614 1223.11 82.026 1220.48 82.026 1217.03 cv
82.026 1213.62 82.614 1210.99 83.818 1209.17 cv
85.022 1207.37 86.786 1206.45 89.082 1206.45 cv
f
100.982 1223.75 mo
103.866 1223.75 li
103.866 1227.23 li
100.982 1227.23 li
100.982 1223.75 li
f
115.794 1208.63 mo
114.366 1208.63 113.302 1209.33 112.574 1210.73 cv
111.846 1212.13 111.51 1214.23 111.51 1217.03 cv
111.51 1219.83 111.846 1221.93 112.574 1223.33 cv
113.302 1224.73 114.366 1225.43 115.794 1225.43 cv
117.222 1225.43 118.286 1224.73 119.014 1223.33 cv
119.714 1221.93 120.078 1219.83 120.078 1217.03 cv
120.078 1214.23 119.714 1212.13 119.014 1210.73 cv
118.286 1209.33 117.222 1208.63 115.794 1208.63 cv
115.794 1206.45 mo
118.062 1206.45 119.798 1207.37 121.03 1209.17 cv
122.234 1210.99 122.85 1213.62 122.85 1217.03 cv
122.85 1220.48 122.234 1223.11 121.03 1224.9 cv
119.798 1226.69 118.062 1227.59 115.794 1227.59 cv
113.498 1227.59 111.734 1226.69 110.53 1224.9 cv
109.326 1223.11 108.738 1220.48 108.738 1217.03 cv
108.738 1213.62 109.326 1210.99 110.53 1209.17 cv
111.734 1207.37 113.498 1206.45 115.794 1206.45 cv
f
133.602 1208.63 mo
132.174 1208.63 131.11 1209.33 130.382 1210.73 cv
129.654 1212.13 129.318 1214.23 129.318 1217.03 cv
129.318 1219.83 129.654 1221.93 130.382 1223.33 cv
131.11 1224.73 132.174 1225.43 133.602 1225.43 cv
135.03 1225.43 136.094 1224.73 136.822 1223.33 cv
137.522 1221.93 137.886 1219.83 137.886 1217.03 cv
137.886 1214.23 137.522 1212.13 136.822 1210.73 cv
136.094 1209.33 135.03 1208.63 133.602 1208.63 cv
133.602 1206.45 mo
135.87 1206.45 137.606 1207.37 138.838 1209.17 cv
140.042 1210.99 140.658 1213.62 140.658 1217.03 cv
140.658 1220.48 140.042 1223.11 138.838 1224.9 cv
137.606 1226.69 135.87 1227.59 133.602 1227.59 cv
131.306 1227.59 129.542 1226.69 128.338 1224.9 cv
127.134 1223.11 126.546 1220.48 126.546 1217.03 cv
126.546 1213.62 127.134 1210.99 128.338 1209.17 cv
129.542 1207.37 131.306 1206.45 133.602 1206.45 cv
f
151.746 1215.91 mo
150.514 1215.91 149.534 1216.36 148.806 1217.2 cv
148.078 1218.04 147.714 1219.22 147.714 1220.67 cv
147.714 1222.16 148.078 1223.33 148.806 1224.17 cv
149.534 1225.01 150.514 1225.43 151.746 1225.43 cv
152.978 1225.43 153.958 1225.01 154.686 1224.17 cv
155.414 1223.33 155.778 1222.16 155.778 1220.67 cv
155.778 1219.22 155.414 1218.04 154.686 1217.2 cv
153.958 1216.36 152.978 1215.91 151.746 1215.91 cv
157.234 1207.26 mo
157.234 1209.78 li
156.534 1209.45 155.834 1209.19 155.134 1209.03 cv
154.406 1208.86 153.706 1208.77 153.034 1208.77 cv
151.186 1208.77 149.786 1209.39 148.834 1210.62 cv
147.882 1211.85 147.322 1213.73 147.21 1216.19 cv
147.742 1215.41 148.414 1214.79 149.226 1214.37 cv
150.038 1213.95 150.934 1213.73 151.914 1213.73 cv
153.958 1213.73 155.582 1214.37 156.758 1215.61 cv
157.934 1216.84 158.55 1218.55 158.55 1220.67 cv
158.55 1222.77 157.906 1224.45 156.674 1225.71 cv
155.442 1226.97 153.79 1227.59 151.746 1227.59 cv
149.394 1227.59 147.574 1226.69 146.342 1224.9 cv
145.082 1223.11 144.466 1220.48 144.466 1217.03 cv
144.466 1213.81 145.222 1211.24 146.762 1209.33 cv
148.274 1207.43 150.346 1206.45 152.922 1206.45 cv
153.594 1206.45 154.294 1206.53 155.022 1206.65 cv
155.722 1206.79 156.45 1206.98 157.234 1207.26 cv
f
59.6851 1217.29 mo
77.2131 1217.29 li
77.2131 1219.61 li
59.6851 1219.61 li
59.6851 1217.29 li
f
159.608 1133.38 mo
174.608 1133.38 li
f
159.608 1133.38 mo
174.608 1133.38 li
@
88.8789 1122.52 mo
87.4509 1122.52 86.3869 1123.22 85.6589 1124.62 cv
84.9309 1126.02 84.5949 1128.12 84.5949 1130.92 cv
84.5949 1133.72 84.9309 1135.82 85.6589 1137.22 cv
86.3869 1138.62 87.4509 1139.32 88.8789 1139.32 cv
90.3069 1139.32 91.3709 1138.62 92.0989 1137.22 cv
92.7989 1135.82 93.1629 1133.72 93.1629 1130.92 cv
93.1629 1128.12 92.7989 1126.02 92.0989 1124.62 cv
91.3709 1123.22 90.3069 1122.52 88.8789 1122.52 cv
88.8789 1120.33 mo
91.1469 1120.33 92.8829 1121.26 94.1149 1123.05 cv
95.3189 1124.87 95.9349 1127.5 95.9349 1130.92 cv
95.9349 1134.36 95.3189 1136.99 94.1149 1138.79 cv
92.8829 1140.58 91.1469 1141.47 88.8789 1141.47 cv
86.5829 1141.47 84.8189 1140.58 83.6149 1138.79 cv
82.4109 1136.99 81.8229 1134.36 81.8229 1130.92 cv
81.8229 1127.5 82.4109 1124.87 83.6149 1123.05 cv
84.8189 1121.26 86.5829 1120.33 88.8789 1120.33 cv
f
100.779 1137.64 mo
103.663 1137.64 li
103.663 1141.11 li
100.779 1141.11 li
100.779 1137.64 li
f
115.591 1122.52 mo
114.163 1122.52 113.099 1123.22 112.371 1124.62 cv
111.643 1126.02 111.307 1128.12 111.307 1130.92 cv
111.307 1133.72 111.643 1135.82 112.371 1137.22 cv
113.099 1138.62 114.163 1139.32 115.591 1139.32 cv
117.019 1139.32 118.083 1138.62 118.811 1137.22 cv
119.511 1135.82 119.875 1133.72 119.875 1130.92 cv
119.875 1128.12 119.511 1126.02 118.811 1124.62 cv
118.083 1123.22 117.019 1122.52 115.591 1122.52 cv
115.591 1120.33 mo
117.859 1120.33 119.595 1121.26 120.827 1123.05 cv
122.031 1124.87 122.647 1127.5 122.647 1130.92 cv
122.647 1134.36 122.031 1136.99 120.827 1138.79 cv
119.595 1140.58 117.859 1141.47 115.591 1141.47 cv
113.295 1141.47 111.531 1140.58 110.327 1138.79 cv
109.123 1136.99 108.535 1134.36 108.535 1130.92 cv
108.535 1127.5 109.123 1124.87 110.327 1123.05 cv
111.531 1121.26 113.295 1120.33 115.591 1120.33 cv
f
133.399 1122.52 mo
131.971 1122.52 130.907 1123.22 130.179 1124.62 cv
129.451 1126.02 129.115 1128.12 129.115 1130.92 cv
129.115 1133.72 129.451 1135.82 130.179 1137.22 cv
130.907 1138.62 131.971 1139.32 133.399 1139.32 cv
134.827 1139.32 135.891 1138.62 136.619 1137.22 cv
137.319 1135.82 137.683 1133.72 137.683 1130.92 cv
137.683 1128.12 137.319 1126.02 136.619 1124.62 cv
135.891 1123.22 134.827 1122.52 133.399 1122.52 cv
133.399 1120.33 mo
135.667 1120.33 137.403 1121.26 138.635 1123.05 cv
139.839 1124.87 140.455 1127.5 140.455 1130.92 cv
140.455 1134.36 139.839 1136.99 138.635 1138.79 cv
137.403 1140.58 135.667 1141.47 133.399 1141.47 cv
131.103 1141.47 129.339 1140.58 128.135 1138.79 cv
126.931 1136.99 126.343 1134.36 126.343 1130.92 cv
126.343 1127.5 126.931 1124.87 128.135 1123.05 cv
129.339 1121.26 131.103 1120.33 133.399 1120.33 cv
f
152.887 1123.11 mo
145.915 1134 li
152.887 1134 li
152.887 1123.11 li
152.159 1120.7 mo
155.631 1120.7 li
155.631 1134 li
158.543 1134 li
158.543 1136.29 li
155.631 1136.29 li
155.631 1141.11 li
152.887 1141.11 li
152.887 1136.29 li
143.675 1136.29 li
143.675 1133.63 li
152.159 1120.7 li
f
59.4819 1131.17 mo
77.0099 1131.17 li
77.0099 1133.49 li
59.4819 1133.49 li
59.4819 1131.17 li
f
159.608 1047.27 mo
174.608 1047.27 li
f
159.608 1047.27 mo
174.608 1047.27 li
@
90.1133 1036.4 mo
88.6852 1036.4 87.6213 1037.1 86.8932 1038.5 cv
86.1653 1039.9 85.8293 1042 85.8293 1044.8 cv
85.8293 1047.6 86.1653 1049.7 86.8932 1051.1 cv
87.6213 1052.5 88.6852 1053.2 90.1133 1053.2 cv
91.5413 1053.2 92.6053 1052.5 93.3333 1051.1 cv
94.0332 1049.7 94.3973 1047.6 94.3973 1044.8 cv
94.3973 1042 94.0332 1039.9 93.3333 1038.5 cv
92.6053 1037.1 91.5413 1036.4 90.1133 1036.4 cv
90.1133 1034.22 mo
92.3812 1034.22 94.1172 1035.14 95.3493 1036.93 cv
96.5533 1038.75 97.1693 1041.39 97.1693 1044.8 cv
97.1693 1048.25 96.5533 1050.88 95.3493 1052.67 cv
94.1172 1054.46 92.3812 1055.36 90.1133 1055.36 cv
87.8173 1055.36 86.0533 1054.46 84.8493 1052.67 cv
83.6452 1050.88 83.0573 1048.25 83.0573 1044.8 cv
83.0573 1041.39 83.6452 1038.75 84.8493 1036.93 cv
86.0533 1035.14 87.8173 1034.22 90.1133 1034.22 cv
f
102.013 1051.52 mo
104.897 1051.52 li
104.897 1054.99 li
102.013 1054.99 li
102.013 1051.52 li
f
116.825 1036.4 mo
115.397 1036.4 114.333 1037.1 113.605 1038.5 cv
112.877 1039.9 112.541 1042 112.541 1044.8 cv
112.541 1047.6 112.877 1049.7 113.605 1051.1 cv
114.333 1052.5 115.397 1053.2 116.825 1053.2 cv
118.253 1053.2 119.317 1052.5 120.045 1051.1 cv
120.745 1049.7 121.109 1047.6 121.109 1044.8 cv
121.109 1042 120.745 1039.9 120.045 1038.5 cv
119.317 1037.1 118.253 1036.4 116.825 1036.4 cv
116.825 1034.22 mo
119.093 1034.22 120.829 1035.14 122.061 1036.93 cv
123.265 1038.75 123.881 1041.39 123.881 1044.8 cv
123.881 1048.25 123.265 1050.88 122.061 1052.67 cv
120.829 1054.46 119.093 1055.36 116.825 1055.36 cv
114.529 1055.36 112.765 1054.46 111.561 1052.67 cv
110.357 1050.88 109.769 1048.25 109.769 1044.8 cv
109.769 1041.39 110.357 1038.75 111.561 1036.93 cv
112.765 1035.14 114.529 1034.22 116.825 1034.22 cv
f
134.633 1036.4 mo
133.205 1036.4 132.141 1037.1 131.413 1038.5 cv
130.685 1039.9 130.349 1042 130.349 1044.8 cv
130.349 1047.6 130.685 1049.7 131.413 1051.1 cv
132.141 1052.5 133.205 1053.2 134.633 1053.2 cv
136.061 1053.2 137.125 1052.5 137.853 1051.1 cv
138.553 1049.7 138.917 1047.6 138.917 1044.8 cv
138.917 1042 138.553 1039.9 137.853 1038.5 cv
137.125 1037.1 136.061 1036.4 134.633 1036.4 cv
134.633 1034.22 mo
136.901 1034.22 138.637 1035.14 139.869 1036.93 cv
141.073 1038.75 141.689 1041.39 141.689 1044.8 cv
141.689 1048.25 141.073 1050.88 139.869 1052.67 cv
138.637 1054.46 136.901 1055.36 134.633 1055.36 cv
132.337 1055.36 130.573 1054.46 129.369 1052.67 cv
128.165 1050.88 127.577 1048.25 127.577 1044.8 cv
127.577 1041.39 128.165 1038.75 129.369 1036.93 cv
130.573 1035.14 132.337 1034.22 134.633 1034.22 cv
f
148.913 1052.67 mo
158.545 1052.67 li
158.545 1054.99 li
145.581 1054.99 li
145.581 1052.67 li
146.617 1051.61 148.045 1050.15 149.865 1048.3 cv
151.657 1046.48 152.805 1045.31 153.281 1044.77 cv
154.177 1043.79 154.793 1042.95 155.129 1042.25 cv
155.465 1041.58 155.661 1040.88 155.661 1040.21 cv
155.661 1039.15 155.269 1038.25 154.513 1037.58 cv
153.757 1036.91 152.777 1036.54 151.545 1036.54 cv
150.677 1036.54 149.753 1036.71 148.801 1036.99 cv
147.849 1037.3 146.813 1037.75 145.721 1038.36 cv
145.721 1035.56 li
146.841 1035.11 147.877 1034.78 148.829 1034.55 cv
149.781 1034.33 150.677 1034.22 151.489 1034.22 cv
153.589 1034.22 155.269 1034.75 156.529 1035.81 cv
157.789 1036.88 158.433 1038.28 158.433 1040.04 cv
158.433 1040.88 158.265 1041.69 157.957 1042.42 cv
157.649 1043.18 157.089 1044.07 156.249 1045.08 cv
156.025 1045.36 155.297 1046.12 154.065 1047.38 cv
152.833 1048.64 151.125 1050.4 148.913 1052.67 cv
f
60.7163 1045.05 mo
78.2443 1045.05 li
78.2443 1047.38 li
60.7163 1047.38 li
60.7163 1045.05 li
f
159.608 961.152 mo
174.608 961.152 li
f
159.608 961.152 mo
174.608 961.152 li
@
88.0586 950.286 mo
86.6306 950.286 85.5666 950.986 84.8386 952.386 cv
84.1106 953.786 83.7746 955.886 83.7746 958.686 cv
83.7746 961.486 84.1106 963.586 84.8386 964.986 cv
85.5666 966.386 86.6306 967.086 88.0586 967.086 cv
89.4866 967.086 90.5506 966.386 91.2786 964.986 cv
91.9786 963.586 92.3426 961.486 92.3426 958.686 cv
92.3426 955.886 91.9786 953.786 91.2786 952.386 cv
90.5506 950.986 89.4866 950.286 88.0586 950.286 cv
88.0586 948.102 mo
90.3266 948.102 92.0626 949.026 93.2946 950.818 cv
94.4986 952.638 95.1146 955.27 95.1146 958.686 cv
95.1146 962.13 94.4986 964.762 93.2946 966.554 cv
92.0626 968.346 90.3266 969.242 88.0586 969.242 cv
85.7626 969.242 83.9986 968.346 82.7946 966.554 cv
81.5906 964.762 81.0026 962.13 81.0026 958.686 cv
81.0026 955.27 81.5906 952.638 82.7946 950.818 cv
83.9986 949.026 85.7626 948.102 88.0586 948.102 cv
f
99.9586 965.406 mo
102.843 965.406 li
102.843 968.878 li
99.9586 968.878 li
99.9586 965.406 li
f
114.77 950.286 mo
113.342 950.286 112.278 950.986 111.55 952.386 cv
110.822 953.786 110.486 955.886 110.486 958.686 cv
110.486 961.486 110.822 963.586 111.55 964.986 cv
112.278 966.386 113.342 967.086 114.77 967.086 cv
116.198 967.086 117.262 966.386 117.99 964.986 cv
118.69 963.586 119.054 961.486 119.054 958.686 cv
119.054 955.886 118.69 953.786 117.99 952.386 cv
117.262 950.986 116.198 950.286 114.77 950.286 cv
114.77 948.102 mo
117.038 948.102 118.774 949.026 120.006 950.818 cv
121.21 952.638 121.826 955.27 121.826 958.686 cv
121.826 962.13 121.21 964.762 120.006 966.554 cv
118.774 968.346 117.038 969.242 114.77 969.242 cv
112.474 969.242 110.71 968.346 109.506 966.554 cv
108.302 964.762 107.714 962.13 107.714 958.686 cv
107.714 955.27 108.302 952.638 109.506 950.818 cv
110.71 949.026 112.474 948.102 114.77 948.102 cv
f
132.578 950.286 mo
131.15 950.286 130.086 950.986 129.358 952.386 cv
128.63 953.786 128.294 955.886 128.294 958.686 cv
128.294 961.486 128.63 963.586 129.358 964.986 cv
130.086 966.386 131.15 967.086 132.578 967.086 cv
134.006 967.086 135.07 966.386 135.798 964.986 cv
136.498 963.586 136.862 961.486 136.862 958.686 cv
136.862 955.886 136.498 953.786 135.798 952.386 cv
135.07 950.986 134.006 950.286 132.578 950.286 cv
132.578 948.102 mo
134.846 948.102 136.582 949.026 137.814 950.818 cv
139.018 952.638 139.634 955.27 139.634 958.686 cv
139.634 962.13 139.018 964.762 137.814 966.554 cv
136.582 968.346 134.846 969.242 132.578 969.242 cv
130.282 969.242 128.518 968.346 127.314 966.554 cv
126.11 964.762 125.522 962.13 125.522 958.686 cv
125.522 955.27 126.11 952.638 127.314 950.818 cv
128.518 949.026 130.282 948.102 132.578 948.102 cv
f
150.387 950.286 mo
148.959 950.286 147.895 950.986 147.167 952.386 cv
146.439 953.786 146.103 955.886 146.103 958.686 cv
146.103 961.486 146.439 963.586 147.167 964.986 cv
147.895 966.386 148.959 967.086 150.387 967.086 cv
151.815 967.086 152.879 966.386 153.607 964.986 cv
154.307 963.586 154.671 961.486 154.671 958.686 cv
154.671 955.886 154.307 953.786 153.607 952.386 cv
152.879 950.986 151.815 950.286 150.387 950.286 cv
150.387 948.102 mo
152.655 948.102 154.391 949.026 155.623 950.818 cv
156.827 952.638 157.443 955.27 157.443 958.686 cv
157.443 962.13 156.827 964.762 155.623 966.554 cv
154.391 968.346 152.655 969.242 150.387 969.242 cv
148.091 969.242 146.327 968.346 145.123 966.554 cv
143.919 964.762 143.331 962.13 143.331 958.686 cv
143.331 955.27 143.919 952.638 145.123 950.818 cv
146.327 949.026 148.091 948.102 150.387 948.102 cv
f
159.608 875.036 mo
174.608 875.036 li
f
159.608 875.036 mo
174.608 875.036 li
@
88.9961 864.17 mo
87.5681 864.17 86.5041 864.87 85.7761 866.27 cv
85.0481 867.67 84.7121 869.77 84.7121 872.57 cv
84.7121 875.37 85.0481 877.47 85.7761 878.87 cv
86.5041 880.27 87.5681 880.97 88.9961 880.97 cv
90.4241 880.97 91.4881 880.27 92.2161 878.87 cv
92.9161 877.47 93.2801 875.37 93.2801 872.57 cv
93.2801 869.77 92.9161 867.67 92.2161 866.27 cv
91.4881 864.87 90.4241 864.17 88.9961 864.17 cv
88.9961 861.986 mo
91.2641 861.986 93.0001 862.91 94.2321 864.702 cv
95.4361 866.522 96.0521 869.154 96.0521 872.57 cv
96.0521 876.014 95.4361 878.646 94.2321 880.438 cv
93.0001 882.23 91.2641 883.126 88.9961 883.126 cv
86.7001 883.126 84.9361 882.23 83.7321 880.438 cv
82.5281 878.646 81.9401 876.014 81.9401 872.57 cv
81.9401 869.154 82.5281 866.522 83.7321 864.702 cv
84.9361 862.91 86.7001 861.986 88.9961 861.986 cv
f
100.896 879.29 mo
103.78 879.29 li
103.78 882.762 li
100.896 882.762 li
100.896 879.29 li
f
115.708 864.17 mo
114.28 864.17 113.216 864.87 112.488 866.27 cv
111.76 867.67 111.424 869.77 111.424 872.57 cv
111.424 875.37 111.76 877.47 112.488 878.87 cv
113.216 880.27 114.28 880.97 115.708 880.97 cv
117.136 880.97 118.2 880.27 118.928 878.87 cv
119.628 877.47 119.992 875.37 119.992 872.57 cv
119.992 869.77 119.628 867.67 118.928 866.27 cv
118.2 864.87 117.136 864.17 115.708 864.17 cv
115.708 861.986 mo
117.976 861.986 119.712 862.91 120.944 864.702 cv
122.148 866.522 122.764 869.154 122.764 872.57 cv
122.764 876.014 122.148 878.646 120.944 880.438 cv
119.712 882.23 117.976 883.126 115.708 883.126 cv
113.412 883.126 111.648 882.23 110.444 880.438 cv
109.24 878.646 108.652 876.014 108.652 872.57 cv
108.652 869.154 109.24 866.522 110.444 864.702 cv
111.648 862.91 113.412 861.986 115.708 861.986 cv
f
133.516 864.17 mo
132.088 864.17 131.024 864.87 130.296 866.27 cv
129.568 867.67 129.232 869.77 129.232 872.57 cv
129.232 875.37 129.568 877.47 130.296 878.87 cv
131.024 880.27 132.088 880.97 133.516 880.97 cv
134.944 880.97 136.008 880.27 136.736 878.87 cv
137.436 877.47 137.8 875.37 137.8 872.57 cv
137.8 869.77 137.436 867.67 136.736 866.27 cv
136.008 864.87 134.944 864.17 133.516 864.17 cv
133.516 861.986 mo
135.784 861.986 137.52 862.91 138.752 864.702 cv
139.956 866.522 140.572 869.154 140.572 872.57 cv
140.572 876.014 139.956 878.646 138.752 880.438 cv
137.52 882.23 135.784 883.126 133.516 883.126 cv
131.22 883.126 129.456 882.23 128.252 880.438 cv
127.048 878.646 126.46 876.014 126.46 872.57 cv
126.46 869.154 127.048 866.522 128.252 864.702 cv
129.456 862.91 131.22 861.986 133.516 861.986 cv
f
147.796 880.438 mo
157.428 880.438 li
157.428 882.762 li
144.464 882.762 li
144.464 880.438 li
145.5 879.374 146.928 877.918 148.748 876.07 cv
150.54 874.25 151.688 873.074 152.164 872.542 cv
153.06 871.562 153.676 870.722 154.012 870.022 cv
154.348 869.35 154.544 868.65 154.544 867.978 cv
154.544 866.914 154.152 866.018 153.396 865.346 cv
152.64 864.674 151.66 864.31 150.428 864.31 cv
149.56 864.31 148.636 864.478 147.684 864.758 cv
146.732 865.066 145.696 865.514 144.604 866.13 cv
144.604 863.33 li
145.724 862.882 146.76 862.546 147.712 862.322 cv
148.664 862.098 149.56 861.986 150.372 861.986 cv
152.472 861.986 154.152 862.518 155.412 863.582 cv
156.672 864.646 157.316 866.046 157.316 867.81 cv
157.316 868.65 157.148 869.462 156.84 870.19 cv
156.532 870.946 155.972 871.842 155.132 872.85 cv
154.908 873.13 154.18 873.886 152.948 875.146 cv
151.716 876.406 150.008 878.17 147.796 880.438 cv
f
159.608 788.92 mo
174.608 788.92 li
f
159.608 788.92 mo
174.608 788.92 li
@
87.7617 778.054 mo
86.3337 778.054 85.2697 778.754 84.5417 780.154 cv
83.8137 781.554 83.4777 783.654 83.4777 786.454 cv
83.4777 789.254 83.8137 791.354 84.5417 792.754 cv
85.2697 794.154 86.3337 794.854 87.7617 794.854 cv
89.1897 794.854 90.2537 794.154 90.9817 792.754 cv
91.6817 791.354 92.0457 789.254 92.0457 786.454 cv
92.0457 783.654 91.6817 781.554 90.9817 780.154 cv
90.2537 778.754 89.1897 778.054 87.7617 778.054 cv
87.7617 775.87 mo
90.0297 775.87 91.7657 776.794 92.9977 778.586 cv
94.2017 780.406 94.8177 783.038 94.8177 786.454 cv
94.8177 789.898 94.2017 792.53 92.9977 794.322 cv
91.7657 796.114 90.0297 797.01 87.7617 797.01 cv
85.4657 797.01 83.7017 796.114 82.4977 794.322 cv
81.2937 792.53 80.7057 789.898 80.7057 786.454 cv
80.7057 783.038 81.2937 780.406 82.4977 778.586 cv
83.7017 776.794 85.4657 775.87 87.7617 775.87 cv
f
99.6617 793.174 mo
102.546 793.174 li
102.546 796.646 li
99.6617 796.646 li
99.6617 793.174 li
f
114.474 778.054 mo
113.046 778.054 111.982 778.754 111.254 780.154 cv
110.526 781.554 110.19 783.654 110.19 786.454 cv
110.19 789.254 110.526 791.354 111.254 792.754 cv
111.982 794.154 113.046 794.854 114.474 794.854 cv
115.902 794.854 116.966 794.154 117.694 792.754 cv
118.394 791.354 118.758 789.254 118.758 786.454 cv
118.758 783.654 118.394 781.554 117.694 780.154 cv
116.966 778.754 115.902 778.054 114.474 778.054 cv
114.474 775.87 mo
116.742 775.87 118.478 776.794 119.71 778.586 cv
120.914 780.406 121.53 783.038 121.53 786.454 cv
121.53 789.898 120.914 792.53 119.71 794.322 cv
118.478 796.114 116.742 797.01 114.474 797.01 cv
112.178 797.01 110.414 796.114 109.21 794.322 cv
108.006 792.53 107.418 789.898 107.418 786.454 cv
107.418 783.038 108.006 780.406 109.21 778.586 cv
110.414 776.794 112.178 775.87 114.474 775.87 cv
f
132.282 778.054 mo
130.854 778.054 129.79 778.754 129.062 780.154 cv
128.334 781.554 127.998 783.654 127.998 786.454 cv
127.998 789.254 128.334 791.354 129.062 792.754 cv
129.79 794.154 130.854 794.854 132.282 794.854 cv
133.71 794.854 134.774 794.154 135.502 792.754 cv
136.202 791.354 136.566 789.254 136.566 786.454 cv
136.566 783.654 136.202 781.554 135.502 780.154 cv
134.774 778.754 133.71 778.054 132.282 778.054 cv
132.282 775.87 mo
134.55 775.87 136.286 776.794 137.518 778.586 cv
138.722 780.406 139.338 783.038 139.338 786.454 cv
139.338 789.898 138.722 792.53 137.518 794.322 cv
136.286 796.114 134.55 797.01 132.282 797.01 cv
129.986 797.01 128.222 796.114 127.018 794.322 cv
125.814 792.53 125.226 789.898 125.226 786.454 cv
125.226 783.038 125.814 780.406 127.018 778.586 cv
128.222 776.794 129.986 775.87 132.282 775.87 cv
f
151.77 778.642 mo
144.798 789.534 li
151.77 789.534 li
151.77 778.642 li
151.042 776.234 mo
154.514 776.234 li
154.514 789.534 li
157.426 789.534 li
157.426 791.83 li
154.514 791.83 li
154.514 796.646 li
151.77 796.646 li
151.77 791.83 li
142.558 791.83 li
142.558 789.17 li
151.042 776.234 li
f
159.608 702.804 mo
174.608 702.804 li
f
159.608 702.804 mo
174.608 702.804 li
@
87.9648 691.938 mo
86.5368 691.938 85.4728 692.638 84.7448 694.038 cv
84.0168 695.438 83.6808 697.538 83.6808 700.338 cv
83.6808 703.138 84.0168 705.238 84.7448 706.638 cv
85.4728 708.038 86.5368 708.738 87.9648 708.738 cv
89.3928 708.738 90.4568 708.038 91.1848 706.638 cv
91.8848 705.238 92.2488 703.138 92.2488 700.338 cv
92.2488 697.538 91.8848 695.438 91.1848 694.038 cv
90.4568 692.638 89.3928 691.938 87.9648 691.938 cv
87.9648 689.754 mo
90.2328 689.754 91.9688 690.678 93.2008 692.47 cv
94.4048 694.29 95.0208 696.922 95.0208 700.338 cv
95.0208 703.782 94.4048 706.414 93.2008 708.206 cv
91.9688 709.998 90.2328 710.894 87.9648 710.894 cv
85.6688 710.894 83.9048 709.998 82.7008 708.206 cv
81.4968 706.414 80.9088 703.782 80.9088 700.338 cv
80.9088 696.922 81.4968 694.29 82.7008 692.47 cv
83.9048 690.678 85.6688 689.754 87.9648 689.754 cv
f
99.8649 707.058 mo
102.749 707.058 li
102.749 710.53 li
99.8649 710.53 li
99.8649 707.058 li
f
114.677 691.938 mo
113.249 691.938 112.185 692.638 111.457 694.038 cv
110.729 695.438 110.393 697.538 110.393 700.338 cv
110.393 703.138 110.729 705.238 111.457 706.638 cv
112.185 708.038 113.249 708.738 114.677 708.738 cv
116.105 708.738 117.169 708.038 117.897 706.638 cv
118.597 705.238 118.961 703.138 118.961 700.338 cv
118.961 697.538 118.597 695.438 117.897 694.038 cv
117.169 692.638 116.105 691.938 114.677 691.938 cv
114.677 689.754 mo
116.945 689.754 118.681 690.678 119.913 692.47 cv
121.117 694.29 121.733 696.922 121.733 700.338 cv
121.733 703.782 121.117 706.414 119.913 708.206 cv
118.681 709.998 116.945 710.894 114.677 710.894 cv
112.381 710.894 110.617 709.998 109.413 708.206 cv
108.209 706.414 107.621 703.782 107.621 700.338 cv
107.621 696.922 108.209 694.29 109.413 692.47 cv
110.617 690.678 112.381 689.754 114.677 689.754 cv
f
132.485 691.938 mo
131.057 691.938 129.993 692.638 129.265 694.038 cv
128.537 695.438 128.201 697.538 128.201 700.338 cv
128.201 703.138 128.537 705.238 129.265 706.638 cv
129.993 708.038 131.057 708.738 132.485 708.738 cv
133.913 708.738 134.977 708.038 135.705 706.638 cv
136.405 705.238 136.769 703.138 136.769 700.338 cv
136.769 697.538 136.405 695.438 135.705 694.038 cv
134.977 692.638 133.913 691.938 132.485 691.938 cv
132.485 689.754 mo
134.753 689.754 136.489 690.678 137.721 692.47 cv
138.925 694.29 139.541 696.922 139.541 700.338 cv
139.541 703.782 138.925 706.414 137.721 708.206 cv
136.489 709.998 134.753 710.894 132.485 710.894 cv
130.189 710.894 128.425 709.998 127.221 708.206 cv
126.017 706.414 125.429 703.782 125.429 700.338 cv
125.429 696.922 126.017 694.29 127.221 692.47 cv
128.425 690.678 130.189 689.754 132.485 689.754 cv
f
150.629 699.218 mo
149.397 699.218 148.417 699.666 147.689 700.506 cv
146.961 701.346 146.597 702.522 146.597 703.978 cv
146.597 705.462 146.961 706.638 147.689 707.478 cv
148.417 708.318 149.397 708.738 150.629 708.738 cv
151.861 708.738 152.841 708.318 153.569 707.478 cv
154.297 706.638 154.661 705.462 154.661 703.978 cv
154.661 702.522 154.297 701.346 153.569 700.506 cv
152.841 699.666 151.861 699.218 150.629 699.218 cv
156.117 690.566 mo
156.117 693.086 li
155.417 692.75 154.717 692.498 154.017 692.33 cv
153.289 692.162 152.589 692.078 151.917 692.078 cv
150.069 692.078 148.669 692.694 147.717 693.926 cv
146.765 695.158 146.205 697.034 146.093 699.498 cv
146.625 698.714 147.297 698.098 148.109 697.678 cv
148.921 697.258 149.817 697.034 150.797 697.034 cv
152.841 697.034 154.465 697.678 155.641 698.91 cv
156.817 700.142 157.433 701.85 157.433 703.978 cv
157.433 706.078 156.789 707.758 155.557 709.018 cv
154.325 710.278 152.673 710.894 150.629 710.894 cv
148.277 710.894 146.457 709.998 145.225 708.206 cv
143.965 706.414 143.349 703.782 143.349 700.338 cv
143.349 697.118 144.105 694.542 145.645 692.638 cv
147.157 690.734 149.229 689.754 151.805 689.754 cv
152.477 689.754 153.177 689.838 153.905 689.95 cv
154.605 690.09 155.333 690.286 156.117 690.566 cv
f
17.6024 1134.18 mo
29.2184 1138.47 li
29.2184 1129.89 li
17.6024 1134.18 li
14.4984 1135.97 mo
14.4984 1132.39 li
37.8264 1123.49 li
37.8264 1126.79 li
31.8424 1128.9 li
31.8424 1139.43 li
37.8264 1141.54 li
37.8264 1144.87 li
14.4984 1135.97 li
f
27.2664 1105.66 mo
37.8264 1105.66 li
37.8264 1108.54 li
27.3624 1108.54 li
25.6984 1108.54 24.4824 1108.9 23.6504 1109.54 cv
22.8184 1110.18 22.4024 1111.14 22.4024 1112.42 cv
22.4024 1113.98 22.9144 1115.2 23.9064 1116.1 cv
24.8984 1116.99 26.2424 1117.44 27.9384 1117.44 cv
37.8264 1117.44 li
37.8264 1120.32 li
20.3224 1120.32 li
20.3224 1117.44 li
23.0424 1117.44 li
22.0184 1116.77 21.2184 1115.97 20.7064 1115.01 cv
20.1944 1114.08 19.9064 1112.99 19.9064 1111.78 cv
19.9064 1109.79 20.5464 1108.26 21.7944 1107.23 cv
23.0424 1106.21 24.8664 1105.66 27.2664 1105.66 cv
f
15.3624 1097.09 mo
20.3224 1097.09 li
20.3224 1091.17 li
22.5624 1091.17 li
22.5624 1097.09 li
32.0664 1097.09 li
33.5064 1097.09 34.4344 1096.9 34.8184 1096.52 cv
35.2344 1096.13 35.4264 1095.33 35.4264 1094.12 cv
35.4264 1091.17 li
37.8264 1091.17 li
37.8264 1094.12 li
37.8264 1096.36 37.4104 1097.89 36.5784 1098.73 cv
35.7464 1099.56 34.2424 1099.97 32.0664 1099.97 cv
22.5624 1099.97 li
22.5624 1102.09 li
20.3224 1102.09 li
20.3224 1099.97 li
15.3624 1099.97 li
15.3624 1097.09 li
f
20.3224 1087.4 mo
20.3224 1084.52 li
37.8264 1084.52 li
37.8264 1087.4 li
20.3224 1087.4 li
13.5064 1087.4 mo
13.5064 1084.52 li
17.1544 1084.52 li
17.1544 1087.4 li
13.5064 1087.4 li
f
20.8344 1067.34 mo
23.5544 1067.34 li
23.1704 1068.17 22.8504 1069 22.6264 1069.87 cv
22.4344 1070.76 22.3064 1071.66 22.3064 1072.59 cv
22.3064 1074.03 22.5304 1075.11 22.9784 1075.82 cv
23.4264 1076.52 24.0664 1076.87 24.9304 1076.87 cv
25.6024 1076.87 26.1144 1076.62 26.4984 1076.11 cv
26.8824 1075.59 27.2664 1074.57 27.5864 1073.03 cv
27.8104 1072.04 li
28.2584 1069.99 28.8984 1068.55 29.6664 1067.69 cv
30.4664 1066.86 31.5864 1066.41 32.9944 1066.41 cv
34.6264 1066.41 35.9064 1067.05 36.8344 1068.33 cv
37.7944 1069.61 38.2424 1071.4 38.2424 1073.64 cv
38.2424 1074.6 38.1464 1075.56 37.9864 1076.59 cv
37.8264 1077.61 37.5704 1078.67 37.1864 1079.79 cv
34.2104 1079.79 li
34.7864 1078.73 35.2024 1077.67 35.4584 1076.65 cv
35.7464 1075.63 35.8744 1074.6 35.8744 1073.58 cv
35.8744 1072.23 35.6504 1071.18 35.2024 1070.44 cv
34.7544 1069.74 34.0824 1069.35 33.2184 1069.35 cv
32.4504 1069.35 31.8424 1069.64 31.4264 1070.15 cv
31.0104 1070.67 30.5944 1071.82 30.2104 1073.61 cv
29.9864 1074.6 li
29.6024 1076.39 29.0264 1077.71 28.2584 1078.47 cv
27.4904 1079.27 26.4344 1079.66 25.0584 1079.66 cv
23.4264 1079.66 22.1464 1079.08 21.2504 1077.93 cv
20.3544 1076.78 19.9064 1075.11 19.9064 1072.94 cv
19.9064 1071.88 20.0024 1070.89 20.1624 1069.93 cv
20.3224 1069 20.5464 1068.14 20.8344 1067.34 cv
f
39.4264 1054.54 mo
41.4744 1055.37 42.8504 1056.17 43.4904 1056.94 cv
44.1304 1057.71 44.4504 1058.73 44.4504 1060.01 cv
44.4504 1062.31 li
42.0504 1062.31 li
42.0504 1060.62 li
42.0504 1059.85 41.8584 1059.24 41.4744 1058.79 cv
41.0904 1058.35 40.2264 1057.87 38.8184 1057.32 cv
37.5384 1056.81 li
20.3224 1063.88 li
20.3224 1060.84 li
34.0184 1055.37 li
20.3224 1049.9 li
20.3224 1046.86 li
39.4264 1054.54 li
f
23.6824 1029.26 mo
22.4024 1028.56 21.4744 1027.7 20.8344 1026.7 cv
20.2264 1025.71 19.9064 1024.53 19.9064 1023.15 cv
19.9064 1021.36 20.5464 1019.95 21.8264 1018.96 cv
23.1064 1017.97 24.9304 1017.46 27.2664 1017.46 cv
37.8264 1017.46 li
37.8264 1020.34 li
27.3624 1020.34 li
25.6984 1020.34 24.4504 1020.66 23.6184 1021.23 cv
22.8184 1021.84 22.4024 1022.74 22.4024 1023.95 cv
22.4024 1025.46 22.9144 1026.64 23.9064 1027.5 cv
24.8984 1028.37 26.2424 1028.78 27.9384 1028.78 cv
37.8264 1028.78 li
37.8264 1031.66 li
27.3624 1031.66 li
25.6984 1031.66 24.4504 1031.98 23.6184 1032.56 cv
22.8184 1033.17 22.4024 1034.1 22.4024 1035.31 cv
22.4024 1036.78 22.9144 1037.97 23.9064 1038.83 cv
24.8984 1039.7 26.2424 1040.11 27.9384 1040.11 cv
37.8264 1040.11 li
37.8264 1042.99 li
20.3224 1042.99 li
20.3224 1040.11 li
23.0424 1040.11 li
21.9864 1039.47 21.1864 1038.67 20.6744 1037.74 cv
20.1624 1036.85 19.9064 1035.76 19.9064 1034.48 cv
19.9064 1033.2 20.2264 1032.14 20.8664 1031.25 cv
21.5064 1030.35 22.4664 1029.71 23.6824 1029.26 cv
f
23.6824 998.092 mo
22.4024 997.388 21.4744 996.524 20.8344 995.532 cv
20.2264 994.54 19.9064 993.356 19.9064 991.98 cv
19.9064 990.188 20.5464 988.78 21.8264 987.788 cv
23.1064 986.796 24.9304 986.284 27.2664 986.284 cv
37.8264 986.284 li
37.8264 989.164 li
27.3624 989.164 li
25.6984 989.164 24.4504 989.484 23.6184 990.06 cv
22.8184 990.668 22.4024 991.564 22.4024 992.78 cv
22.4024 994.284 22.9144 995.468 23.9064 996.332 cv
24.8984 997.196 26.2424 997.612 27.9384 997.612 cv
37.8264 997.612 li
37.8264 1000.49 li
27.3624 1000.49 li
25.6984 1000.49 24.4504 1000.81 23.6184 1001.39 cv
22.8184 1002 22.4024 1002.92 22.4024 1004.14 cv
22.4024 1005.61 22.9144 1006.8 23.9064 1007.66 cv
24.8984 1008.52 26.2424 1008.94 27.9384 1008.94 cv
37.8264 1008.94 li
37.8264 1011.82 li
20.3224 1011.82 li
20.3224 1008.94 li
23.0424 1008.94 li
21.9864 1008.3 21.1864 1007.5 20.6744 1006.57 cv
20.1624 1005.68 19.9064 1004.59 19.9064 1003.31 cv
19.9064 1002.03 20.2264 1000.97 20.8664 1000.08 cv
21.5064 999.18 22.4664 998.54 23.6824 998.092 cv
f
28.3544 965.576 mo
29.7624 965.576 li
29.7624 978.792 li
31.7464 978.664 33.2824 978.088 34.3064 977 cv
35.3304 975.944 35.8424 974.472 35.8424 972.552 cv
35.8424 971.464 35.7144 970.376 35.4584 969.352 cv
35.2024 968.328 34.7864 967.272 34.2104 966.248 cv
36.9304 966.248 li
37.3784 967.272 37.7304 968.328 37.9224 969.416 cv
38.1144 970.504 38.2424 971.624 38.2424 972.712 cv
38.2424 975.528 37.4424 977.736 35.8424 979.368 cv
34.2424 981 32.0344 981.8 29.2504 981.8 cv
26.4024 981.8 24.1304 981.032 22.4344 979.496 cv
20.7704 977.96 19.9064 975.848 19.9064 973.224 cv
19.9064 970.856 20.6744 969 22.1784 967.624 cv
23.7144 966.28 25.7624 965.576 28.3544 965.576 cv
27.5224 968.456 mo
25.9544 968.488 24.7064 968.936 23.7464 969.768 cv
22.8184 970.632 22.3384 971.784 22.3384 973.192 cv
22.3384 974.792 22.8184 976.072 23.7144 977.032 cv
24.6104 977.992 25.8904 978.568 27.5224 978.696 cv
27.5224 968.456 li
f
15.3624 958.017 mo
20.3224 958.017 li
20.3224 952.097 li
22.5624 952.097 li
22.5624 958.017 li
32.0664 958.017 li
33.5064 958.017 34.4344 957.825 34.8184 957.441 cv
35.2344 957.057 35.4264 956.257 35.4264 955.041 cv
35.4264 952.097 li
37.8264 952.097 li
37.8264 955.041 li
37.8264 957.281 37.4104 958.817 36.5784 959.649 cv
35.7464 960.481 34.2424 960.897 32.0664 960.897 cv
22.5624 960.897 li
22.5624 963.009 li
20.3224 963.009 li
20.3224 960.897 li
15.3624 960.897 li
15.3624 958.017 li
f
23.0104 938.174 mo
22.8184 938.494 22.6904 938.846 22.5944 939.23 cv
22.5304 939.614 22.4664 940.03 22.4664 940.478 cv
22.4664 942.11 23.0104 943.358 24.0664 944.222 cv
25.1224 945.118 26.6264 945.534 28.6104 945.534 cv
37.8264 945.534 li
37.8264 948.414 li
20.3224 948.414 li
20.3224 945.534 li
23.0424 945.534 li
21.9864 944.958 21.1864 944.158 20.6744 943.198 cv
20.1624 942.238 19.9064 941.054 19.9064 939.646 cv
19.9064 939.454 19.9384 939.23 19.9384 938.974 cv
19.9704 938.75 20.0024 938.494 20.0664 938.174 cv
23.0104 938.174 li
f
20.3224 935.162 mo
20.3224 932.282 li
37.8264 932.282 li
37.8264 935.162 li
20.3224 935.162 li
13.5064 935.162 mo
13.5064 932.282 li
17.1544 932.282 li
17.1544 935.162 li
13.5064 935.162 li
f
20.3224 927.519 mo
20.3224 913.855 li
22.9464 913.855 li
35.5224 924.671 li
35.5224 913.855 li
37.8264 913.855 li
37.8264 927.903 li
35.2024 927.903 li
22.6264 917.087 li
22.6264 927.519 li
20.3224 927.519 li
f
28.3544 894.498 mo
29.7624 894.498 li
29.7624 907.714 li
31.7464 907.586 33.2824 907.01 34.3064 905.922 cv
35.3304 904.866 35.8424 903.394 35.8424 901.474 cv
35.8424 900.386 35.7144 899.298 35.4584 898.274 cv
35.2024 897.25 34.7864 896.194 34.2104 895.17 cv
36.9304 895.17 li
37.3784 896.194 37.7304 897.25 37.9224 898.338 cv
38.1144 899.426 38.2424 900.546 38.2424 901.634 cv
38.2424 904.45 37.4424 906.658 35.8424 908.29 cv
34.2424 909.922 32.0344 910.722 29.2504 910.722 cv
26.4024 910.722 24.1304 909.954 22.4344 908.418 cv
20.7704 906.882 19.9064 904.77 19.9064 902.146 cv
19.9064 899.778 20.6744 897.922 22.1784 896.546 cv
23.7144 895.202 25.7624 894.498 28.3544 894.498 cv
27.5224 897.378 mo
25.9544 897.41 24.7064 897.858 23.7464 898.69 cv
22.8184 899.554 22.3384 900.706 22.3384 902.114 cv
22.3384 903.714 22.8184 904.994 23.7144 905.954 cv
24.6104 906.914 25.8904 907.49 27.5224 907.618 cv
27.5224 897.378 li
f
22.9784 878.267 mo
13.5064 878.267 li
13.5064 875.387 li
37.8264 875.387 li
37.8264 878.267 li
35.2024 878.267 li
36.2584 878.875 37.0264 879.643 37.5064 880.571 cv
37.9864 881.499 38.2424 882.587 38.2424 883.867 cv
38.2424 885.979 37.4104 887.707 35.7464 889.051 cv
34.0824 890.395 31.8424 891.035 29.0904 891.035 cv
26.3384 891.035 24.1304 890.395 22.4344 889.051 cv
20.7704 887.707 19.9064 885.979 19.9064 883.867 cv
19.9064 882.587 20.1624 881.499 20.6744 880.571 cv
21.1864 879.643 21.9544 878.875 22.9784 878.267 cv
29.0904 888.059 mo
31.2024 888.059 32.8664 887.643 34.0824 886.779 cv
35.2984 885.915 35.8744 884.699 35.8744 883.163 cv
35.8744 881.659 35.2984 880.475 34.0824 879.579 cv
32.8664 878.715 31.2024 878.267 29.0904 878.267 cv
26.9784 878.267 25.3464 878.715 24.1304 879.579 cv
22.9144 880.475 22.3064 881.659 22.3064 883.163 cv
22.3064 884.699 22.9144 885.915 24.1304 886.779 cv
25.3464 887.643 26.9784 888.059 29.0904 888.059 cv
f
37.8264 860.582 mo
37.8264 860.774 37.7624 860.838 37.5704 860.838 cv
37.5384 860.838 li
37.4744 860.806 li
15.2664 849.798 li
15.0424 849.702 14.9144 849.51 14.9144 849.222 cv
14.9144 848.774 li
14.9144 848.486 15.0424 848.294 15.2664 848.198 cv
37.4744 837.19 li
37.5384 837.158 li
37.5704 837.158 li
37.7624 837.158 37.8264 837.254 37.8264 837.414 cv
37.8264 860.582 li
35.2664 858.47 mo
35.2664 841.606 li
18.2744 850.022 li
35.2664 858.47 li
f
14.4984 835.718 mo
14.4984 816.006 li
17.1544 816.006 li
17.1544 824.294 li
37.8264 824.294 li
37.8264 827.462 li
17.1544 827.462 li
17.1544 835.718 li
14.4984 835.718 li
f
49.1702 814.226 mo
49.7078 813.912 49.9766 813.374 49.9766 812.59 cv
49.9766 811.874 49.7302 811.269 49.2374 810.754 cv
48.7446 810.238 48.1398 809.813 47.4454 809.499 cv
46.7286 809.186 46.0118 808.939 45.295 808.76 cv
45.9222 809.432 46.2134 810.149 46.2134 810.91 cv
46.2134 811.515 46.1014 812.03 45.9222 812.434 cv
45.743 812.837 45.4294 813.173 45.0262 813.397 cv
44.623 813.621 44.1302 813.733 43.5478 813.733 cv
43.055 813.733 42.5622 813.666 42.047 813.531 cv
41.5542 813.397 40.9718 813.218 40.3446 812.994 cv
39.7174 812.77 39.1574 812.546 38.687 812.366 cv
38.1494 812.187 37.7014 812.075 37.343 812.075 cv
36.895 812.075 36.671 812.254 36.671 812.568 cv
36.671 813.15 36.9846 813.643 37.5894 814.024 cv
38.2166 814.427 38.8886 814.696 39.6278 814.875 cv
39.7622 815.054 li
39.7622 815.323 li
39.7622 815.458 39.695 815.502 39.5606 815.502 cv
39.4934 815.502 li
38.5974 815.278 37.8134 814.898 37.119 814.405 cv
36.447 813.912 36.0886 813.285 36.0886 812.523 cv
36.0886 811.986 36.2678 811.538 36.6262 811.179 cv
36.9846 810.821 37.4102 810.619 37.9478 810.619 cv
38.239 810.619 38.5302 810.686 38.8214 810.798 cv
39.0006 810.888 39.4038 811.045 40.0086 811.269 cv
40.6358 811.493 41.1286 811.672 41.5318 811.784 cv
41.935 811.918 42.3382 812.008 42.719 812.098 cv
43.1222 812.187 43.503 812.21 43.8838 812.21 cv
44.3766 812.21 44.8022 812.12 45.1382 811.896 cv
45.4966 811.694 45.6534 811.358 45.6534 810.888 cv
45.6534 809.97 45.0934 809.141 43.951 808.402 cv
37.0518 806.699 li
36.8726 806.654 36.6934 806.542 36.559 806.363 cv
36.4246 806.184 36.335 805.982 36.335 805.758 cv
36.335 805.579 36.4022 805.422 36.5142 805.288 cv
36.6262 805.154 36.783 805.086 36.9622 805.086 cv
37.1414 805.109 li
46.0342 807.326 li
46.7958 807.528 47.5126 807.886 48.2294 808.402 cv
48.9238 808.939 49.4838 809.566 49.9094 810.306 cv
50.335 811.067 50.559 811.829 50.559 812.613 cv
50.559 813.016 50.4694 813.397 50.335 813.778 cv
50.1782 814.158 49.9542 814.472 49.663 814.696 cv
49.3494 814.92 49.0134 815.032 48.6102 815.032 cv
48.207 815.032 47.8486 814.92 47.5574 814.674 cv
47.2438 814.45 47.1094 814.114 47.1094 813.71 cv
47.1094 813.486 47.1766 813.285 47.3334 813.106 cv
47.4678 812.949 47.6694 812.859 47.9158 812.859 cv
48.2518 812.859 48.543 812.994 48.8118 813.24 cv
49.0582 813.509 49.1926 813.8 49.1926 814.136 cv
49.1702 814.181 li
49.1702 814.226 li
f
33.8584 796.676 mo
33.8584 793.38 li
36.5464 793.38 li
41.5064 795.94 li
41.5064 797.956 li
36.5464 796.676 li
33.8584 796.676 li
f
13.5384 770.156 mo
15.9704 771.564 18.3384 772.588 20.6744 773.26 cv
23.0104 773.964 25.3784 774.284 27.7784 774.284 cv
30.2104 774.284 32.5784 773.964 34.9144 773.26 cv
37.2824 772.588 39.6184 771.564 42.0184 770.156 cv
42.0184 772.652 li
39.5544 774.22 37.1864 775.404 34.8184 776.172 cv
32.4504 776.94 30.1144 777.324 27.7784 777.324 cv
25.4744 777.324 23.1384 776.94 20.7704 776.172 cv
18.4024 775.404 16.0024 774.252 13.5384 772.652 cv
13.5384 770.156 li
f
14.4984 764.456 mo
14.4984 761.288 li
24.3544 761.288 li
14.4984 750.824 li
14.4984 746.76 li
25.3784 758.344 li
37.8264 745.928 li
37.8264 750.088 li
26.5944 761.288 li
37.8264 761.288 li
37.8264 764.456 li
14.4984 764.456 li
f
13.5384 744.047 mo
13.5384 741.551 li
16.0024 740.015 18.4024 738.831 20.7704 738.063 cv
23.1384 737.295 25.4744 736.879 27.7784 736.879 cv
30.1144 736.879 32.4504 737.295 34.8184 738.063 cv
37.1864 738.831 39.5544 740.015 42.0184 741.551 cv
42.0184 744.047 li
39.6184 742.671 37.2824 741.647 34.9144 740.943 cv
32.5784 740.271 30.2104 739.919 27.7784 739.919 cv
25.3784 739.919 23.0104 740.271 20.6744 740.943 cv
18.3384 741.647 15.9704 742.671 13.5384 744.047 cv
f
219.379 989.042 mo
216.163 997.754 li
222.595 997.754 li
219.379 989.042 li
218.035 986.714 mo
220.723 986.714 li
227.395 1004.21 li
224.923 1004.21 li
223.339 999.722 li
215.443 999.722 li
213.859 1004.21 li
211.363 1004.21 li
218.035 986.714 li
.930816 .793027 0 0 cmyk
f
240.763 996.29 mo
240.763 1004.21 li
238.603 1004.21 li
238.603 996.362 li
238.603 995.114 238.339 994.202 237.859 993.578 cv
237.379 992.954 236.659 992.642 235.699 992.642 cv
234.523 992.642 233.611 993.026 232.939 993.77 cv
232.267 994.514 231.931 995.522 231.931 996.794 cv
231.931 1004.21 li
229.771 1004.21 li
229.771 991.082 li
231.931 991.082 li
231.931 993.122 li
232.435 992.354 233.035 991.754 233.755 991.37 cv
234.451 990.986 235.267 990.77 236.179 990.77 cv
237.667 990.77 238.819 991.25 239.587 992.186 cv
240.355 993.122 240.763 994.49 240.763 996.29 cv
f
247.195 987.362 mo
247.195 991.082 li
251.635 991.082 li
251.635 992.762 li
247.195 992.762 li
247.195 999.89 li
247.195 1000.97 247.339 1001.67 247.627 1001.95 cv
247.915 1002.27 248.515 1002.41 249.427 1002.41 cv
251.635 1002.41 li
251.635 1004.21 li
249.427 1004.21 li
247.747 1004.21 246.595 1003.9 245.971 1003.27 cv
245.347 1002.65 245.035 1001.52 245.035 999.89 cv
245.035 992.762 li
243.451 992.762 li
243.451 991.082 li
245.035 991.082 li
245.035 987.362 li
247.195 987.362 li
f
254.467 991.082 mo
256.627 991.082 li
256.627 1004.21 li
254.467 1004.21 li
254.467 991.082 li
254.467 985.97 mo
256.627 985.97 li
256.627 988.706 li
254.467 988.706 li
254.467 985.97 li
f
269.515 991.466 mo
269.515 993.506 li
268.891 993.218 268.267 992.978 267.619 992.81 cv
266.947 992.666 266.275 992.57 265.579 992.57 cv
264.499 992.57 263.683 992.738 263.155 993.074 cv
262.627 993.41 262.363 993.89 262.363 994.538 cv
262.363 995.042 262.555 995.426 262.939 995.714 cv
263.323 996.002 264.091 996.29 265.243 996.53 cv
265.987 996.698 li
267.523 997.034 268.603 997.514 269.251 998.09 cv
269.875 998.69 270.211 999.53 270.211 1000.59 cv
270.211 1001.81 269.731 1002.77 268.771 1003.47 cv
267.811 1004.19 266.467 1004.52 264.787 1004.52 cv
264.067 1004.52 263.347 1004.45 262.579 1004.33 cv
261.811 1004.21 261.019 1004.02 260.179 1003.73 cv
260.179 1001.5 li
260.971 1001.93 261.763 1002.24 262.531 1002.43 cv
263.299 1002.65 264.067 1002.75 264.835 1002.75 cv
265.843 1002.75 266.635 1002.58 267.187 1002.24 cv
267.715 1001.91 268.003 1001.4 268.003 1000.75 cv
268.003 1000.18 267.787 999.722 267.403 999.41 cv
267.019 999.098 266.155 998.786 264.811 998.498 cv
264.067 998.33 li
262.723 998.042 261.739 997.61 261.163 997.034 cv
260.563 996.458 260.275 995.666 260.275 994.634 cv
260.275 993.41 260.707 992.45 261.571 991.778 cv
262.435 991.106 263.683 990.77 265.315 990.77 cv
266.107 990.77 266.851 990.842 267.571 990.962 cv
268.267 991.082 268.915 991.25 269.515 991.466 cv
f
279.115 1005.41 mo
278.491 1006.95 277.891 1007.98 277.315 1008.46 cv
276.739 1008.94 275.971 1009.18 275.011 1009.18 cv
273.283 1009.18 li
273.283 1007.38 li
274.555 1007.38 li
275.131 1007.38 275.587 1007.23 275.923 1006.95 cv
276.259 1006.66 276.619 1006.01 277.027 1004.95 cv
277.411 1003.99 li
272.107 991.082 li
274.387 991.082 li
278.491 1001.35 li
282.595 991.082 li
284.875 991.082 li
279.115 1005.41 li
f
298.075 993.602 mo
298.603 992.642 299.251 991.946 299.995 991.466 cv
300.739 991.01 301.627 990.77 302.659 990.77 cv
304.003 990.77 305.059 991.25 305.803 992.21 cv
306.547 993.17 306.931 994.538 306.931 996.29 cv
306.931 1004.21 li
304.771 1004.21 li
304.771 996.362 li
304.771 995.114 304.531 994.178 304.099 993.554 cv
303.643 992.954 302.971 992.642 302.059 992.642 cv
300.931 992.642 300.043 993.026 299.395 993.77 cv
298.747 994.514 298.435 995.522 298.435 996.794 cv
298.435 1004.21 li
296.275 1004.21 li
296.275 996.362 li
296.275 995.114 296.035 994.178 295.603 993.554 cv
295.147 992.954 294.451 992.642 293.539 992.642 cv
292.435 992.642 291.547 993.026 290.899 993.77 cv
290.251 994.514 289.939 995.522 289.939 996.794 cv
289.939 1004.21 li
287.779 1004.21 li
287.779 991.082 li
289.939 991.082 li
289.939 993.122 li
290.419 992.33 291.019 991.73 291.715 991.346 cv
292.387 990.962 293.203 990.77 294.163 990.77 cv
295.123 990.77 295.915 991.01 296.587 991.49 cv
297.259 991.97 297.739 992.69 298.075 993.602 cv
f
321.451 993.602 mo
321.979 992.642 322.627 991.946 323.371 991.466 cv
324.115 991.01 325.003 990.77 326.035 990.77 cv
327.379 990.77 328.435 991.25 329.179 992.21 cv
329.923 993.17 330.307 994.538 330.307 996.29 cv
330.307 1004.21 li
328.147 1004.21 li
328.147 996.362 li
328.147 995.114 327.907 994.178 327.475 993.554 cv
327.019 992.954 326.347 992.642 325.435 992.642 cv
324.307 992.642 323.419 993.026 322.771 993.77 cv
322.123 994.514 321.811 995.522 321.811 996.794 cv
321.811 1004.21 li
319.651 1004.21 li
319.651 996.362 li
319.651 995.114 319.411 994.178 318.979 993.554 cv
318.523 992.954 317.827 992.642 316.915 992.642 cv
315.811 992.642 314.923 993.026 314.275 993.77 cv
313.627 994.514 313.315 995.522 313.315 996.794 cv
313.315 1004.21 li
311.155 1004.21 li
311.155 991.082 li
313.315 991.082 li
313.315 993.122 li
313.795 992.33 314.395 991.73 315.091 991.346 cv
315.763 990.962 316.579 990.77 317.539 990.77 cv
318.499 990.77 319.291 991.01 319.963 991.49 cv
320.635 991.97 321.115 992.69 321.451 993.602 cv
f
345.835 997.106 mo
345.835 998.162 li
335.923 998.162 li
336.019 999.65 336.451 1000.8 337.267 1001.57 cv
338.059 1002.34 339.163 1002.72 340.603 1002.72 cv
341.419 1002.72 342.235 1002.63 343.003 1002.43 cv
343.771 1002.24 344.563 1001.93 345.331 1001.5 cv
345.331 1003.54 li
344.563 1003.87 343.771 1004.14 342.955 1004.28 cv
342.139 1004.43 341.299 1004.52 340.483 1004.52 cv
338.371 1004.52 336.715 1003.92 335.491 1002.72 cv
334.267 1001.52 333.667 999.866 333.667 997.778 cv
333.667 995.642 334.243 993.938 335.395 992.666 cv
336.547 991.418 338.131 990.77 340.099 990.77 cv
341.875 990.77 343.267 991.346 344.299 992.474 cv
345.307 993.626 345.835 995.162 345.835 997.106 cv
343.675 996.482 mo
343.651 995.306 343.315 994.37 342.691 993.65 cv
342.043 992.954 341.179 992.594 340.123 992.594 cv
338.923 992.594 337.963 992.954 337.243 993.626 cv
336.523 994.298 336.091 995.258 335.995 996.482 cv
343.675 996.482 li
f
351.499 987.362 mo
351.499 991.082 li
355.939 991.082 li
355.939 992.762 li
351.499 992.762 li
351.499 999.89 li
351.499 1000.97 351.643 1001.67 351.931 1001.95 cv
352.219 1002.27 352.819 1002.41 353.731 1002.41 cv
355.939 1002.41 li
355.939 1004.21 li
353.731 1004.21 li
352.051 1004.21 350.899 1003.9 350.275 1003.27 cv
349.651 1002.65 349.339 1001.52 349.339 999.89 cv
349.339 992.762 li
347.755 992.762 li
347.755 991.082 li
349.339 991.082 li
349.339 987.362 li
351.499 987.362 li
f
366.379 993.098 mo
366.139 992.954 365.875 992.858 365.587 992.786 cv
365.299 992.738 364.987 992.69 364.651 992.69 cv
363.427 992.69 362.491 993.098 361.843 993.89 cv
361.171 994.682 360.859 995.81 360.859 997.298 cv
360.859 1004.21 li
358.699 1004.21 li
358.699 991.082 li
360.859 991.082 li
360.859 993.122 li
361.291 992.33 361.891 991.73 362.611 991.346 cv
363.331 990.962 364.219 990.77 365.275 990.77 cv
365.419 990.77 365.587 990.794 365.779 990.794 cv
365.947 990.818 366.139 990.842 366.379 990.89 cv
366.379 993.098 li
f
368.635 991.082 mo
370.795 991.082 li
370.795 1004.21 li
368.635 1004.21 li
368.635 991.082 li
368.635 985.97 mo
370.795 985.97 li
370.795 988.706 li
368.635 988.706 li
368.635 985.97 li
f
374.371 991.082 mo
384.619 991.082 li
384.619 993.05 li
376.507 1002.48 li
384.619 1002.48 li
384.619 1004.21 li
374.083 1004.21 li
374.083 1002.24 li
382.195 992.81 li
374.371 992.81 li
374.371 991.082 li
f
399.139 997.106 mo
399.139 998.162 li
389.227 998.162 li
389.323 999.65 389.755 1000.8 390.571 1001.57 cv
391.363 1002.34 392.467 1002.72 393.907 1002.72 cv
394.723 1002.72 395.539 1002.63 396.307 1002.43 cv
397.075 1002.24 397.867 1001.93 398.635 1001.5 cv
398.635 1003.54 li
397.867 1003.87 397.075 1004.14 396.259 1004.28 cv
395.443 1004.43 394.603 1004.52 393.787 1004.52 cv
391.675 1004.52 390.019 1003.92 388.795 1002.72 cv
387.571 1001.52 386.971 999.866 386.971 997.778 cv
386.971 995.642 387.547 993.938 388.699 992.666 cv
389.851 991.418 391.435 990.77 393.403 990.77 cv
395.179 990.77 396.571 991.346 397.603 992.474 cv
398.611 993.626 399.139 995.162 399.139 997.106 cv
396.979 996.482 mo
396.955 995.306 396.619 994.37 395.995 993.65 cv
395.347 992.954 394.483 992.594 393.427 992.594 cv
392.227 992.594 391.267 992.954 390.547 993.626 cv
389.827 994.298 389.395 995.258 389.299 996.482 cv
396.979 996.482 li
f
411.307 993.074 mo
411.307 985.97 li
413.467 985.97 li
413.467 1004.21 li
411.307 1004.21 li
411.307 1002.24 li
410.851 1003.03 410.275 1003.61 409.579 1003.97 cv
408.883 1004.33 408.067 1004.52 407.107 1004.52 cv
405.523 1004.52 404.227 1003.9 403.219 1002.65 cv
402.211 1001.4 401.731 999.722 401.731 997.658 cv
401.731 995.594 402.211 993.938 403.219 992.666 cv
404.227 991.418 405.523 990.77 407.107 990.77 cv
408.067 990.77 408.883 990.962 409.579 991.346 cv
410.275 991.73 410.851 992.306 411.307 993.074 cv
403.963 997.658 mo
403.963 999.242 404.275 1000.49 404.923 1001.4 cv
405.571 1002.31 406.483 1002.75 407.635 1002.75 cv
408.763 1002.75 409.651 1002.31 410.323 1001.4 cv
410.971 1000.49 411.307 999.242 411.307 997.658 cv
411.307 996.074 410.971 994.85 410.323 993.938 cv
409.651 993.026 408.763 992.57 407.635 992.57 cv
406.483 992.57 405.571 993.026 404.923 993.938 cv
404.275 994.85 403.963 996.074 403.963 997.658 cv
f
697.014 681.552 mo
695.782 683.68 694.886 685.752 694.298 687.796 cv
693.682 689.84 693.402 691.912 693.402 694.012 cv
693.402 696.14 693.682 698.212 694.298 700.256 cv
694.886 702.328 695.782 704.372 697.014 706.472 cv
694.83 706.472 li
693.458 704.316 692.422 702.244 691.75 700.172 cv
691.078 698.1 690.742 696.056 690.742 694.012 cv
690.742 691.996 691.078 689.952 691.75 687.88 cv
692.422 685.808 693.43 683.708 694.83 681.552 cv
697.014 681.552 li
1 /0 /CSD get_res sepcs
1 sep
f
712.89 695.16 mo
712.89 693.312 712.498 691.884 711.742 690.82 cv
710.958 689.756 709.922 689.224 708.606 689.224 cv
707.262 689.224 706.226 689.756 705.47 690.82 cv
704.686 691.884 704.322 693.312 704.322 695.16 cv
704.322 697.008 704.686 698.464 705.47 699.528 cv
706.226 700.592 707.262 701.096 708.606 701.096 cv
709.922 701.096 710.958 700.592 711.742 699.528 cv
712.498 698.464 712.89 697.008 712.89 695.16 cv
704.322 689.812 mo
704.826 688.916 705.498 688.244 706.31 687.796 cv
707.122 687.348 708.102 687.124 709.222 687.124 cv
711.07 687.124 712.582 687.88 713.758 689.336 cv
714.906 690.82 715.494 692.752 715.494 695.16 cv
715.494 697.568 714.906 699.528 713.758 700.984 cv
712.582 702.44 711.07 703.168 709.222 703.168 cv
708.102 703.168 707.122 702.944 706.31 702.524 cv
705.498 702.104 704.826 701.432 704.322 700.508 cv
704.322 702.804 li
701.802 702.804 li
701.802 681.524 li
704.322 681.524 li
704.322 689.812 li
f
719.273 681.552 mo
721.458 681.552 li
722.802 683.708 723.838 685.808 724.51 687.88 cv
725.182 689.952 725.546 691.996 725.546 694.012 cv
725.546 696.056 725.182 698.1 724.51 700.172 cv
723.838 702.244 722.802 704.316 721.458 706.472 cv
719.273 706.472 li
720.477 704.372 721.374 702.328 721.99 700.256 cv
722.578 698.212 722.885 696.14 722.885 694.012 cv
722.885 691.912 722.578 689.84 721.99 687.796 cv
721.374 685.752 720.477 683.68 719.273 681.552 cv
f
gsave
159.608 1219.5 mo
732.556 1219.5 li
732.556 659.746 li
159.608 659.746 li
cp
clp
[6 6 ] 0 dsh
159.608 677.827 mo
161.327 678.833 li
163.045 679.542 li
164.764 679.981 li
166.483 680.176 li
168.202 680.152 li
169.921 679.934 li
172.213 679.388 li
173.931 678.821 li
175.077 678.034 li
176.223 677.146 li
177.369 676.485 li
178.515 676.008 li
179.088 675.894 li
180.234 676.037 li
181.953 676.266 li
182.526 676.087 li
185.39 673.893 li
185.963 673.683 li
186.536 673.63 li
187.682 673.842 li
188.828 674.24 li
192.266 675.869 li
192.839 675.986 li
193.412 675.982 li
194.558 675.602 li
196.849 674.761 li
197.995 674.638 li
199.141 674.752 li
201.433 675.297 li
202.579 675.227 li
203.152 675.404 li
203.725 675.746 li
204.871 676.852 li
205.444 677.486 li
206.017 677.891 li
206.589 677.89 li
207.162 677.544 li
209.454 675.19 li
210.027 674.874 li
211.173 674.662 li
215.184 674.325 li
215.757 674.353 li
216.33 674.503 li
217.475 675.155 li
218.621 676.02 li
219.194 676.237 li
219.767 676.176 li
220.34 675.809 li
221.486 674.636 li
222.632 673.076 li
223.205 672.481 li
224.351 671.804 li
224.924 671.737 li
227.789 671.887 li
228.934 671.665 li
229.507 671.616 li
230.08 671.694 li
230.653 671.987 li
232.372 673.271 li
232.945 673.414 li
233.518 673.302 li
234.091 672.946 li
235.81 671.33 li
236.383 671.124 li
240.966 670.799 li
242.112 671.355 li
243.831 672.387 li
246.123 674.291 li
246.696 674.582 li
247.269 674.692 li
248.988 674.689 li
250.134 675.005 li
251.279 675.584 li
254.144 677.644 li
256.436 678.851 li
259.301 681.287 li
260.447 681.505 li
261.592 681.418 li
263.311 680.688 li
266.176 679.391 li
267.322 679.317 li
270.76 679.694 li
271.906 679.722 li
273.051 679.861 li
274.197 679.704 li
277.635 678.431 li
278.781 678.204 li
279.927 677.509 li
281.073 676.557 li
282.792 675.141 li
283.938 674.491 li
285.083 674.07 li
286.229 673.333 li
287.375 672.32 li
288.521 671.291 li
289.667 670.693 li
290.813 670.414 li
291.959 670.5 li
293.105 670.881 li
294.251 671.631 li
295.396 672.843 li
297.688 675.738 li
298.261 676.242 li
299.407 676.743 li
300.553 677.05 li
301.699 677.276 li
303.418 677.872 li
305.137 679.02 li
306.855 680.292 li
308.574 681.037 li
313.731 683.881 li
315.45 684.957 li
316.596 685.338 li
317.741 685.46 li
319.46 685.491 li
320.033 685.738 li
321.752 686.912 li
322.325 687.125 li
322.898 687.076 li
323.471 686.747 li
325.19 684.752 li
326.909 682.51 li
327.482 681.988 li
328.627 681.399 li
329.773 680.933 li
330.346 680.577 li
332.065 679.095 li
333.211 678.409 li
333.784 678.256 li
334.93 678.398 li
336.076 678.722 li
337.222 679.131 li
338.368 679.387 li
339.513 680.019 li
340.086 680.527 li
341.232 682.02 li
342.378 683.51 li
342.951 684.051 li
343.524 684.43 li
344.67 684.797 li
345.816 684.947 li
346.389 685.112 li
346.962 685.409 li
348.108 686.38 li
348.681 686.976 li
349.254 687.406 li
350.4 687.819 li
351.545 688.173 li
352.118 688.533 li
352.691 689.111 li
353.837 690.512 li
357.275 693.807 li
358.421 694.983 li
360.14 696.558 li
361.286 697.824 li
363.577 700.639 li
364.723 701.689 li
367.015 703.46 li
368.734 705.366 li
369.88 706.322 li
371.599 707.404 li
375.036 709.25 li
376.755 710.722 li
381.339 715.48 li
382.485 716.892 li
384.203 719.555 li
385.922 722.171 li
387.068 723.488 li
389.933 726.305 li
392.225 728.239 li
393.371 729.513 li
393.944 730.289 li
394.517 731.252 li
395.662 733.892 li
399.1 743.558 li
400.819 747.145 li
401.965 749.549 li
403.111 752.496 li
404.83 757.221 li
405.976 759.65 li
407.121 761.828 li
408.267 764.498 li
409.986 769.396 li
411.132 773.333 li
412.851 780.005 li
415.716 792.299 li
416.862 797.99 li
418.007 804.727 li
419.153 812.557 li
420.872 826.256 li
422.591 841.749 li
424.883 865.643 li
427.748 896.926 li
429.466 919.348 li
430.612 937.063 li
432.331 968.327 li
434.05 1002.63 li
435.769 1042.89 li
439.779 1139.65 li
440.925 1162.24 li
442.071 1180.67 li
443.217 1194.9 li
443.79 1200.44 li
444.363 1204.88 li
444.936 1208.12 li
445.509 1210.12 li
446.082 1210.8 li
446.655 1210.12 li
447.228 1208.12 li
447.801 1204.88 li
448.374 1200.44 li
449.52 1188.3 li
450.665 1171.99 li
451.811 1151.45 li
452.957 1126.93 li
455.249 1071.35 li
458.114 1002.63 li
459.833 968.327 li
461.552 937.063 li
462.697 919.348 li
464.416 896.926 li
466.135 877.739 li
470.146 836.31 li
471.865 821.503 li
473.583 808.488 li
474.729 801.231 li
475.875 795.032 li
477.594 787.215 li
480.459 775.482 li
482.178 769.396 li
483.897 764.498 li
485.042 761.828 li
487.334 757.221 li
490.772 748.301 li
493.064 743.558 li
494.21 740.651 li
497.074 732.468 li
498.22 730.289 li
499.366 728.855 li
500.512 727.695 li
503.377 725.202 li
505.669 722.88 li
506.814 721.359 li
510.252 716.158 li
511.971 714.238 li
513.69 712.614 li
515.409 710.722 li
517.128 709.25 li
518.846 708.314 li
521.711 706.706 li
522.857 705.883 li
524.003 704.766 li
525.722 702.914 li
528.586 700.639 li
529.732 699.292 li
531.451 697.164 li
533.17 695.49 li
534.316 694.433 li
536.608 692.07 li
538.9 689.874 li
540.045 688.533 li
540.618 688.173 li
542.91 687.406 li
543.483 686.976 li
544.629 685.837 li
545.775 685.112 li
546.921 684.859 li
548.067 684.662 li
548.64 684.43 li
549.213 684.051 li
549.786 683.51 li
550.931 682.02 li
552.077 680.527 li
553.223 679.657 li
553.796 679.387 li
555.515 678.97 li
556.661 678.537 li
557.807 678.306 li
558.38 678.256 li
558.953 678.409 li
560.099 679.095 li
562.39 680.933 li
564.682 681.988 li
565.255 682.51 li
566.974 684.752 li
568.693 686.747 li
569.266 687.076 li
569.839 687.125 li
570.412 686.912 li
571.558 686.143 li
572.131 685.738 li
572.703 685.491 li
576.141 685.182 li
577.287 684.657 li
580.152 682.848 li
581.298 682.3 li
583.59 681.037 li
584.735 680.507 li
585.308 680.292 li
586.454 679.488 li
588.173 678.219 li
589.319 677.627 li
591.038 677.141 li
592.184 676.922 li
593.33 676.534 li
593.903 676.242 li
594.476 675.738 li
597.913 671.631 li
599.059 670.881 li
600.205 670.5 li
601.351 670.414 li
602.497 670.693 li
603.643 671.291 li
604.789 672.32 li
605.935 673.333 li
607.08 674.07 li
609.372 675.141 li
611.091 676.557 li
612.237 677.509 li
613.383 678.204 li
616.821 679.193 li
617.966 679.704 li
619.112 679.861 li
623.696 679.483 li
625.415 679.303 li
625.988 679.391 li
627.134 679.859 li
629.998 681.206 li
630.571 681.418 li
631.717 681.505 li
632.29 681.453 li
632.863 681.287 li
634.009 680.446 li
636.301 678.422 li
638.593 677.299 li
641.457 675.242 li
642.603 674.831 li
643.749 674.637 li
645.468 674.582 li
646.614 673.886 li
648.906 671.999 li
651.197 670.799 li
652.343 670.759 li
654.062 671.034 li
655.781 671.124 li
656.354 671.33 li
656.927 671.749 li
658.073 672.946 li
658.646 673.302 li
659.219 673.414 li
659.792 673.271 li
660.365 672.928 li
661.51 671.987 li
662.083 671.694 li
662.656 671.616 li
663.802 671.758 li
664.948 671.966 li
666.094 671.871 li
667.24 671.737 li
667.813 671.804 li
668.386 672.075 li
668.959 672.481 li
669.532 673.076 li
671.251 675.293 li
672.397 676.176 li
672.969 676.237 li
673.542 676.02 li
675.261 674.78 li
675.834 674.503 li
676.407 674.353 li
677.553 674.358 li
680.991 674.662 li
682.137 674.874 li
682.71 675.19 li
683.856 676.331 li
685.001 677.544 li
685.574 677.89 li
686.147 677.891 li
686.72 677.486 li
688.439 675.746 li
689.012 675.404 li
689.585 675.227 li
691.877 675.114 li
693.023 674.752 li
694.169 674.638 li
695.314 674.761 li
696.46 675.135 li
698.179 675.83 li
698.752 675.982 li
699.325 675.986 li
700.471 675.667 li
703.909 674.015 li
705.055 673.711 li
705.628 673.63 li
706.201 673.683 li
706.773 673.893 li
707.919 674.665 li
709.638 676.087 li
710.211 676.266 li
711.357 676.144 li
713.076 675.894 li
714.222 676.217 li
715.368 676.789 li
716.514 677.563 li
717.659 678.486 li
718.232 678.821 li
720.524 679.549 li
722.816 680.026 li
724.535 680.182 li
726.254 680.137 li
727.973 679.864 li
729.691 679.337 li
731.41 678.532 li
732.556 677.827 li
.926818 .245335 1 .155612 cmyk
@
grestore
1 lw
2 lc
0 lj
159.608 659.746 mo
732.556 659.746 li
@
732.556 1219.5 mo
732.556 659.746 li
@
159.608 1219.5 mo
732.556 1219.5 li
@
159.608 1219.5 mo
159.608 659.746 li
@
732.556 1219.5 mo
717.556 1219.5 li
f
2 lw
0 lc
1 lj
732.556 1219.5 mo
717.556 1219.5 li
@
745.46 1208.63 mo
744.032 1208.63 742.968 1209.33 742.24 1210.73 cv
741.512 1212.13 741.176 1214.23 741.176 1217.03 cv
741.176 1219.83 741.512 1221.93 742.24 1223.33 cv
742.968 1224.73 744.032 1225.43 745.46 1225.43 cv
746.888 1225.43 747.952 1224.73 748.68 1223.33 cv
749.38 1221.93 749.744 1219.83 749.744 1217.03 cv
749.744 1214.23 749.38 1212.13 748.68 1210.73 cv
747.952 1209.33 746.888 1208.63 745.46 1208.63 cv
745.46 1206.45 mo
747.728 1206.45 749.464 1207.37 750.696 1209.17 cv
751.9 1210.99 752.516 1213.62 752.516 1217.03 cv
752.516 1220.48 751.9 1223.11 750.696 1224.9 cv
749.464 1226.69 747.728 1227.59 745.46 1227.59 cv
743.164 1227.59 741.4 1226.69 740.196 1224.9 cv
738.992 1223.11 738.404 1220.48 738.404 1217.03 cv
738.404 1213.62 738.992 1210.99 740.196 1209.17 cv
741.4 1207.37 743.164 1206.45 745.46 1206.45 cv
f
757.36 1223.75 mo
760.244 1223.75 li
760.244 1227.23 li
757.36 1227.23 li
757.36 1223.75 li
f
766.74 1224.9 mo
771.248 1224.9 li
771.248 1209.33 li
766.348 1210.31 li
766.348 1207.79 li
771.22 1206.81 li
773.992 1206.81 li
773.992 1224.9 li
778.5 1224.9 li
778.5 1227.23 li
766.74 1227.23 li
766.74 1224.9 li
f
789.98 1217.54 mo
788.664 1217.54 787.628 1217.9 786.872 1218.6 cv
786.116 1219.3 785.752 1220.25 785.752 1221.49 cv
785.752 1222.72 786.116 1223.7 786.872 1224.4 cv
787.628 1225.1 788.664 1225.43 789.98 1225.43 cv
791.268 1225.43 792.304 1225.1 793.06 1224.37 cv
793.816 1223.67 794.208 1222.72 794.208 1221.49 cv
794.208 1220.25 793.816 1219.3 793.088 1218.6 cv
792.332 1217.9 791.296 1217.54 789.98 1217.54 cv
787.208 1216.36 mo
786.032 1216.08 785.108 1215.52 784.436 1214.71 cv
783.764 1213.9 783.456 1212.92 783.456 1211.74 cv
783.456 1210.12 784.016 1208.83 785.192 1207.88 cv
786.34 1206.93 787.936 1206.45 789.98 1206.45 cv
791.996 1206.45 793.592 1206.93 794.768 1207.88 cv
795.916 1208.83 796.504 1210.12 796.504 1211.74 cv
796.504 1212.92 796.168 1213.9 795.496 1214.71 cv
794.824 1215.52 793.928 1216.08 792.752 1216.36 cv
794.068 1216.67 795.104 1217.29 795.86 1218.18 cv
796.588 1219.08 796.98 1220.2 796.98 1221.49 cv
796.98 1223.47 796.364 1224.99 795.16 1226.02 cv
793.928 1227.09 792.22 1227.59 789.98 1227.59 cv
787.712 1227.59 785.976 1227.09 784.772 1226.02 cv
783.568 1224.99 782.98 1223.47 782.98 1221.49 cv
782.98 1220.2 783.344 1219.08 784.1 1218.18 cv
784.828 1217.29 785.864 1216.67 787.208 1216.36 cv
786.2 1211.99 mo
786.2 1213.06 786.508 1213.9 787.18 1214.49 cv
787.852 1215.07 788.776 1215.35 789.98 1215.35 cv
791.156 1215.35 792.08 1215.07 792.752 1214.49 cv
793.424 1213.9 793.76 1213.06 793.76 1211.99 cv
793.76 1210.93 793.424 1210.12 792.752 1209.53 cv
792.08 1208.94 791.156 1208.63 789.98 1208.63 cv
788.776 1208.63 787.852 1208.94 787.18 1209.53 cv
786.508 1210.12 786.2 1210.93 786.2 1211.99 cv
f
804.26 1224.9 mo
813.892 1224.9 li
813.892 1227.23 li
800.928 1227.23 li
800.928 1224.9 li
801.964 1223.84 803.392 1222.38 805.212 1220.53 cv
807.004 1218.71 808.152 1217.54 808.628 1217.01 cv
809.524 1216.03 810.14 1215.19 810.476 1214.49 cv
810.812 1213.81 811.008 1213.11 811.008 1212.44 cv
811.008 1211.38 810.616 1210.48 809.86 1209.81 cv
809.104 1209.14 808.124 1208.77 806.892 1208.77 cv
806.024 1208.77 805.1 1208.94 804.148 1209.22 cv
803.196 1209.53 802.16 1209.98 801.068 1210.59 cv
801.068 1207.79 li
802.188 1207.35 803.224 1207.01 804.176 1206.79 cv
805.128 1206.56 806.024 1206.45 806.836 1206.45 cv
808.936 1206.45 810.616 1206.98 811.876 1208.05 cv
813.136 1209.11 813.78 1210.51 813.78 1212.27 cv
813.78 1213.11 813.612 1213.93 813.304 1214.65 cv
812.996 1215.41 812.436 1216.31 811.596 1217.31 cv
811.372 1217.59 810.644 1218.35 809.412 1219.61 cv
808.18 1220.87 806.472 1222.63 804.26 1224.9 cv
f
732.556 1149.53 mo
717.556 1149.53 li
f
732.556 1149.53 mo
717.556 1149.53 li
@
745.46 1138.67 mo
744.032 1138.67 742.968 1139.37 742.24 1140.77 cv
741.512 1142.17 741.176 1144.27 741.176 1147.07 cv
741.176 1149.87 741.512 1151.97 742.24 1153.37 cv
742.968 1154.77 744.032 1155.47 745.46 1155.47 cv
746.888 1155.47 747.952 1154.77 748.68 1153.37 cv
749.38 1151.97 749.744 1149.87 749.744 1147.07 cv
749.744 1144.27 749.38 1142.17 748.68 1140.77 cv
747.952 1139.37 746.888 1138.67 745.46 1138.67 cv
745.46 1136.48 mo
747.728 1136.48 749.464 1137.41 750.696 1139.2 cv
751.9 1141.02 752.516 1143.65 752.516 1147.07 cv
752.516 1150.51 751.9 1153.14 750.696 1154.93 cv
749.464 1156.73 747.728 1157.62 745.46 1157.62 cv
743.164 1157.62 741.4 1156.73 740.196 1154.93 cv
738.992 1153.14 738.404 1150.51 738.404 1147.07 cv
738.404 1143.65 738.992 1141.02 740.196 1139.2 cv
741.4 1137.41 743.164 1136.48 745.46 1136.48 cv
f
757.36 1153.79 mo
760.244 1153.79 li
760.244 1157.26 li
757.36 1157.26 li
757.36 1153.79 li
f
766.74 1154.93 mo
771.248 1154.93 li
771.248 1139.37 li
766.348 1140.35 li
766.348 1137.83 li
771.22 1136.85 li
773.992 1136.85 li
773.992 1154.93 li
778.5 1154.93 li
778.5 1157.26 li
766.74 1157.26 li
766.74 1154.93 li
f
789.98 1147.57 mo
788.664 1147.57 787.628 1147.93 786.872 1148.63 cv
786.116 1149.33 785.752 1150.29 785.752 1151.52 cv
785.752 1152.75 786.116 1153.73 786.872 1154.43 cv
787.628 1155.13 788.664 1155.47 789.98 1155.47 cv
791.268 1155.47 792.304 1155.13 793.06 1154.4 cv
793.816 1153.7 794.208 1152.75 794.208 1151.52 cv
794.208 1150.29 793.816 1149.33 793.088 1148.63 cv
792.332 1147.93 791.296 1147.57 789.98 1147.57 cv
787.208 1146.39 mo
786.032 1146.11 785.108 1145.55 784.436 1144.74 cv
783.764 1143.93 783.456 1142.95 783.456 1141.77 cv
783.456 1140.15 784.016 1138.86 785.192 1137.91 cv
786.34 1136.96 787.936 1136.48 789.98 1136.48 cv
791.996 1136.48 793.592 1136.96 794.768 1137.91 cv
795.916 1138.86 796.504 1140.15 796.504 1141.77 cv
796.504 1142.95 796.168 1143.93 795.496 1144.74 cv
794.824 1145.55 793.928 1146.11 792.752 1146.39 cv
794.068 1146.7 795.104 1147.32 795.86 1148.21 cv
796.588 1149.11 796.98 1150.23 796.98 1151.52 cv
796.98 1153.51 796.364 1155.02 795.16 1156.05 cv
793.928 1157.12 792.22 1157.62 789.98 1157.62 cv
787.712 1157.62 785.976 1157.12 784.772 1156.05 cv
783.568 1155.02 782.98 1153.51 782.98 1151.52 cv
782.98 1150.23 783.344 1149.11 784.1 1148.21 cv
784.828 1147.32 785.864 1146.7 787.208 1146.39 cv
786.2 1142.03 mo
786.2 1143.09 786.508 1143.93 787.18 1144.52 cv
787.852 1145.11 788.776 1145.39 789.98 1145.39 cv
791.156 1145.39 792.08 1145.11 792.752 1144.52 cv
793.424 1143.93 793.76 1143.09 793.76 1142.03 cv
793.76 1140.96 793.424 1140.15 792.752 1139.56 cv
792.08 1138.97 791.156 1138.67 789.98 1138.67 cv
788.776 1138.67 787.852 1138.97 787.18 1139.56 cv
786.508 1140.15 786.2 1140.96 786.2 1142.03 cv
f
809.468 1139.25 mo
802.496 1150.15 li
809.468 1150.15 li
809.468 1139.25 li
808.74 1136.85 mo
812.212 1136.85 li
812.212 1150.15 li
815.124 1150.15 li
815.124 1152.44 li
812.212 1152.44 li
812.212 1157.26 li
809.468 1157.26 li
809.468 1152.44 li
800.256 1152.44 li
800.256 1149.78 li
808.74 1136.85 li
f
732.556 1079.56 mo
717.556 1079.56 li
f
732.556 1079.56 mo
717.556 1079.56 li
@
745.46 1068.7 mo
744.032 1068.7 742.968 1069.4 742.24 1070.8 cv
741.512 1072.2 741.176 1074.3 741.176 1077.1 cv
741.176 1079.9 741.512 1082 742.24 1083.4 cv
742.968 1084.8 744.032 1085.5 745.46 1085.5 cv
746.888 1085.5 747.952 1084.8 748.68 1083.4 cv
749.38 1082 749.744 1079.9 749.744 1077.1 cv
749.744 1074.3 749.38 1072.2 748.68 1070.8 cv
747.952 1069.4 746.888 1068.7 745.46 1068.7 cv
745.46 1066.51 mo
747.728 1066.51 749.464 1067.44 750.696 1069.23 cv
751.9 1071.05 752.516 1073.68 752.516 1077.1 cv
752.516 1080.54 751.9 1083.17 750.696 1084.96 cv
749.464 1086.76 747.728 1087.65 745.46 1087.65 cv
743.164 1087.65 741.4 1086.76 740.196 1084.96 cv
738.992 1083.17 738.404 1080.54 738.404 1077.1 cv
738.404 1073.68 738.992 1071.05 740.196 1069.23 cv
741.4 1067.44 743.164 1066.51 745.46 1066.51 cv
f
757.36 1083.82 mo
760.244 1083.82 li
760.244 1087.29 li
757.36 1087.29 li
757.36 1083.82 li
f
766.74 1084.96 mo
771.248 1084.96 li
771.248 1069.4 li
766.348 1070.38 li
766.348 1067.86 li
771.22 1066.88 li
773.992 1066.88 li
773.992 1084.96 li
778.5 1084.96 li
778.5 1087.29 li
766.74 1087.29 li
766.74 1084.96 li
f
789.98 1077.6 mo
788.664 1077.6 787.628 1077.96 786.872 1078.66 cv
786.116 1079.36 785.752 1080.32 785.752 1081.55 cv
785.752 1082.78 786.116 1083.76 786.872 1084.46 cv
787.628 1085.16 788.664 1085.5 789.98 1085.5 cv
791.268 1085.5 792.304 1085.16 793.06 1084.43 cv
793.816 1083.73 794.208 1082.78 794.208 1081.55 cv
794.208 1080.32 793.816 1079.36 793.088 1078.66 cv
792.332 1077.96 791.296 1077.6 789.98 1077.6 cv
787.208 1076.42 mo
786.032 1076.14 785.108 1075.58 784.436 1074.77 cv
783.764 1073.96 783.456 1072.98 783.456 1071.8 cv
783.456 1070.18 784.016 1068.89 785.192 1067.94 cv
786.34 1066.99 787.936 1066.51 789.98 1066.51 cv
791.996 1066.51 793.592 1066.99 794.768 1067.94 cv
795.916 1068.89 796.504 1070.18 796.504 1071.8 cv
796.504 1072.98 796.168 1073.96 795.496 1074.77 cv
794.824 1075.58 793.928 1076.14 792.752 1076.42 cv
794.068 1076.73 795.104 1077.35 795.86 1078.24 cv
796.588 1079.14 796.98 1080.26 796.98 1081.55 cv
796.98 1083.54 796.364 1085.05 795.16 1086.08 cv
793.928 1087.15 792.22 1087.65 789.98 1087.65 cv
787.712 1087.65 785.976 1087.15 784.772 1086.08 cv
783.568 1085.05 782.98 1083.54 782.98 1081.55 cv
782.98 1080.26 783.344 1079.14 784.1 1078.24 cv
784.828 1077.35 785.864 1076.73 787.208 1076.42 cv
786.2 1072.06 mo
786.2 1073.12 786.508 1073.96 787.18 1074.55 cv
787.852 1075.14 788.776 1075.42 789.98 1075.42 cv
791.156 1075.42 792.08 1075.14 792.752 1074.55 cv
793.424 1073.96 793.76 1073.12 793.76 1072.06 cv
793.76 1070.99 793.424 1070.18 792.752 1069.59 cv
792.08 1069 791.156 1068.7 789.98 1068.7 cv
788.776 1068.7 787.852 1069 787.18 1069.59 cv
786.508 1070.18 786.2 1070.99 786.2 1072.06 cv
f
808.124 1075.98 mo
806.892 1075.98 805.912 1076.42 805.184 1077.26 cv
804.456 1078.1 804.092 1079.28 804.092 1080.74 cv
804.092 1082.22 804.456 1083.4 805.184 1084.24 cv
805.912 1085.08 806.892 1085.5 808.124 1085.5 cv
809.356 1085.5 810.336 1085.08 811.064 1084.24 cv
811.792 1083.4 812.156 1082.22 812.156 1080.74 cv
812.156 1079.28 811.792 1078.1 811.064 1077.26 cv
810.336 1076.42 809.356 1075.98 808.124 1075.98 cv
813.612 1067.32 mo
813.612 1069.84 li
812.912 1069.51 812.212 1069.26 811.512 1069.09 cv
810.784 1068.92 810.084 1068.84 809.412 1068.84 cv
807.564 1068.84 806.164 1069.45 805.212 1070.68 cv
804.26 1071.92 803.7 1073.79 803.588 1076.26 cv
804.12 1075.47 804.792 1074.86 805.604 1074.44 cv
806.416 1074.02 807.312 1073.79 808.292 1073.79 cv
810.336 1073.79 811.96 1074.44 813.136 1075.67 cv
814.312 1076.9 814.928 1078.61 814.928 1080.74 cv
814.928 1082.84 814.284 1084.52 813.052 1085.78 cv
811.82 1087.04 810.168 1087.65 808.124 1087.65 cv
805.772 1087.65 803.952 1086.76 802.72 1084.96 cv
801.46 1083.17 800.844 1080.54 800.844 1077.1 cv
800.844 1073.88 801.6 1071.3 803.14 1069.4 cv
804.652 1067.49 806.724 1066.51 809.3 1066.51 cv
809.972 1066.51 810.672 1066.6 811.4 1066.71 cv
812.1 1066.85 812.828 1067.04 813.612 1067.32 cv
f
732.556 1009.59 mo
717.556 1009.59 li
f
732.556 1009.59 mo
717.556 1009.59 li
@
745.46 998.727 mo
744.032 998.727 742.968 999.427 742.24 1000.83 cv
741.512 1002.23 741.176 1004.33 741.176 1007.13 cv
741.176 1009.93 741.512 1012.03 742.24 1013.43 cv
742.968 1014.83 744.032 1015.53 745.46 1015.53 cv
746.888 1015.53 747.952 1014.83 748.68 1013.43 cv
749.38 1012.03 749.744 1009.93 749.744 1007.13 cv
749.744 1004.33 749.38 1002.23 748.68 1000.83 cv
747.952 999.427 746.888 998.727 745.46 998.727 cv
745.46 996.543 mo
747.728 996.543 749.464 997.467 750.696 999.259 cv
751.9 1001.08 752.516 1003.71 752.516 1007.13 cv
752.516 1010.57 751.9 1013.2 750.696 1014.99 cv
749.464 1016.79 747.728 1017.68 745.46 1017.68 cv
743.164 1017.68 741.4 1016.79 740.196 1014.99 cv
738.992 1013.2 738.404 1010.57 738.404 1007.13 cv
738.404 1003.71 738.992 1001.08 740.196 999.259 cv
741.4 997.467 743.164 996.543 745.46 996.543 cv
f
757.36 1013.85 mo
760.244 1013.85 li
760.244 1017.32 li
757.36 1017.32 li
757.36 1013.85 li
f
766.74 1014.99 mo
771.248 1014.99 li
771.248 999.427 li
766.348 1000.41 li
766.348 997.887 li
771.22 996.907 li
773.992 996.907 li
773.992 1014.99 li
778.5 1014.99 li
778.5 1017.32 li
766.74 1017.32 li
766.74 1014.99 li
f
789.98 1007.63 mo
788.664 1007.63 787.628 1007.99 786.872 1008.69 cv
786.116 1009.39 785.752 1010.35 785.752 1011.58 cv
785.752 1012.81 786.116 1013.79 786.872 1014.49 cv
787.628 1015.19 788.664 1015.53 789.98 1015.53 cv
791.268 1015.53 792.304 1015.19 793.06 1014.46 cv
793.816 1013.76 794.208 1012.81 794.208 1011.58 cv
794.208 1010.35 793.816 1009.39 793.088 1008.69 cv
792.332 1007.99 791.296 1007.63 789.98 1007.63 cv
787.208 1006.45 mo
786.032 1006.17 785.108 1005.61 784.436 1004.8 cv
783.764 1003.99 783.456 1003.01 783.456 1001.83 cv
783.456 1000.21 784.016 998.923 785.192 997.971 cv
786.34 997.019 787.936 996.543 789.98 996.543 cv
791.996 996.543 793.592 997.019 794.768 997.971 cv
795.916 998.923 796.504 1000.21 796.504 1001.83 cv
796.504 1003.01 796.168 1003.99 795.496 1004.8 cv
794.824 1005.61 793.928 1006.17 792.752 1006.45 cv
794.068 1006.76 795.104 1007.38 795.86 1008.27 cv
796.588 1009.17 796.98 1010.29 796.98 1011.58 cv
796.98 1013.57 796.364 1015.08 795.16 1016.11 cv
793.928 1017.18 792.22 1017.68 789.98 1017.68 cv
787.712 1017.68 785.976 1017.18 784.772 1016.11 cv
783.568 1015.08 782.98 1013.57 782.98 1011.58 cv
782.98 1010.29 783.344 1009.17 784.1 1008.27 cv
784.828 1007.38 785.864 1006.76 787.208 1006.45 cv
786.2 1002.09 mo
786.2 1003.15 786.508 1003.99 787.18 1004.58 cv
787.852 1005.17 788.776 1005.45 789.98 1005.45 cv
791.156 1005.45 792.08 1005.17 792.752 1004.58 cv
793.424 1003.99 793.76 1003.15 793.76 1002.09 cv
793.76 1001.02 793.424 1000.21 792.752 999.623 cv
792.08 999.035 791.156 998.727 789.98 998.727 cv
788.776 998.727 787.852 999.035 787.18 999.623 cv
786.508 1000.21 786.2 1001.02 786.2 1002.09 cv
f
807.788 1007.63 mo
806.472 1007.63 805.436 1007.99 804.68 1008.69 cv
803.924 1009.39 803.56 1010.35 803.56 1011.58 cv
803.56 1012.81 803.924 1013.79 804.68 1014.49 cv
805.436 1015.19 806.472 1015.53 807.788 1015.53 cv
809.076 1015.53 810.112 1015.19 810.868 1014.46 cv
811.624 1013.76 812.016 1012.81 812.016 1011.58 cv
812.016 1010.35 811.624 1009.39 810.896 1008.69 cv
810.14 1007.99 809.104 1007.63 807.788 1007.63 cv
805.016 1006.45 mo
803.84 1006.17 802.916 1005.61 802.244 1004.8 cv
801.572 1003.99 801.264 1003.01 801.264 1001.83 cv
801.264 1000.21 801.824 998.923 803 997.971 cv
804.148 997.019 805.744 996.543 807.788 996.543 cv
809.804 996.543 811.4 997.019 812.576 997.971 cv
813.724 998.923 814.312 1000.21 814.312 1001.83 cv
814.312 1003.01 813.976 1003.99 813.304 1004.8 cv
812.632 1005.61 811.736 1006.17 810.56 1006.45 cv
811.876 1006.76 812.912 1007.38 813.668 1008.27 cv
814.396 1009.17 814.788 1010.29 814.788 1011.58 cv
814.788 1013.57 814.172 1015.08 812.968 1016.11 cv
811.736 1017.18 810.028 1017.68 807.788 1017.68 cv
805.52 1017.68 803.784 1017.18 802.58 1016.11 cv
801.376 1015.08 800.788 1013.57 800.788 1011.58 cv
800.788 1010.29 801.152 1009.17 801.908 1008.27 cv
802.636 1007.38 803.672 1006.76 805.016 1006.45 cv
804.008 1002.09 mo
804.008 1003.15 804.316 1003.99 804.988 1004.58 cv
805.66 1005.17 806.584 1005.45 807.788 1005.45 cv
808.964 1005.45 809.888 1005.17 810.56 1004.58 cv
811.232 1003.99 811.568 1003.15 811.568 1002.09 cv
811.568 1001.02 811.232 1000.21 810.56 999.623 cv
809.888 999.035 808.964 998.727 807.788 998.727 cv
806.584 998.727 805.66 999.035 804.988 999.623 cv
804.316 1000.21 804.008 1001.02 804.008 1002.09 cv
f
732.556 939.623 mo
717.556 939.623 li
f
732.556 939.623 mo
717.556 939.623 li
@
745.46 928.757 mo
744.032 928.757 742.968 929.457 742.24 930.857 cv
741.512 932.257 741.176 934.357 741.176 937.157 cv
741.176 939.957 741.512 942.057 742.24 943.457 cv
742.968 944.857 744.032 945.557 745.46 945.557 cv
746.888 945.557 747.952 944.857 748.68 943.457 cv
749.38 942.057 749.744 939.957 749.744 937.157 cv
749.744 934.357 749.38 932.257 748.68 930.857 cv
747.952 929.457 746.888 928.757 745.46 928.757 cv
745.46 926.573 mo
747.728 926.573 749.464 927.497 750.696 929.289 cv
751.9 931.109 752.516 933.741 752.516 937.157 cv
752.516 940.601 751.9 943.233 750.696 945.025 cv
749.464 946.817 747.728 947.713 745.46 947.713 cv
743.164 947.713 741.4 946.817 740.196 945.025 cv
738.992 943.233 738.404 940.601 738.404 937.157 cv
738.404 933.741 738.992 931.109 740.196 929.289 cv
741.4 927.497 743.164 926.573 745.46 926.573 cv
f
757.36 943.877 mo
760.244 943.877 li
760.244 947.349 li
757.36 947.349 li
757.36 943.877 li
f
766.74 945.025 mo
771.248 945.025 li
771.248 929.457 li
766.348 930.437 li
766.348 927.917 li
771.22 926.937 li
773.992 926.937 li
773.992 945.025 li
778.5 945.025 li
778.5 947.349 li
766.74 947.349 li
766.74 945.025 li
f
784.156 946.929 mo
784.156 944.409 li
784.828 944.745 785.528 944.997 786.256 945.165 cv
786.956 945.333 787.656 945.417 788.356 945.417 cv
790.148 945.417 791.548 944.829 792.5 943.597 cv
793.452 942.365 794.012 940.517 794.18 937.997 cv
793.62 938.781 792.948 939.397 792.164 939.817 cv
791.352 940.237 790.456 940.433 789.476 940.433 cv
787.404 940.433 785.78 939.817 784.604 938.585 cv
783.428 937.353 782.84 935.673 782.84 933.517 cv
782.84 931.445 783.456 929.765 784.688 928.477 cv
785.92 927.217 787.572 926.573 789.644 926.573 cv
791.996 926.573 793.816 927.497 795.048 929.289 cv
796.28 931.109 796.924 933.741 796.924 937.157 cv
796.924 940.405 796.14 942.953 794.628 944.857 cv
793.088 946.761 791.044 947.713 788.468 947.713 cv
787.768 947.713 787.068 947.629 786.368 947.517 cv
785.64 947.405 784.912 947.209 784.156 946.929 cv
789.644 938.277 mo
790.876 938.277 791.856 937.857 792.584 937.017 cv
793.312 936.177 793.676 935.001 793.676 933.517 cv
793.676 932.061 793.312 930.885 792.584 930.045 cv
791.856 929.205 790.876 928.757 789.644 928.757 cv
788.412 928.757 787.432 929.205 786.704 930.045 cv
785.976 930.885 785.612 932.061 785.612 933.517 cv
785.612 935.001 785.976 936.177 786.704 937.017 cv
787.432 937.857 788.412 938.277 789.644 938.277 cv
f
807.788 928.757 mo
806.36 928.757 805.296 929.457 804.568 930.857 cv
803.84 932.257 803.504 934.357 803.504 937.157 cv
803.504 939.957 803.84 942.057 804.568 943.457 cv
805.296 944.857 806.36 945.557 807.788 945.557 cv
809.216 945.557 810.28 944.857 811.008 943.457 cv
811.708 942.057 812.072 939.957 812.072 937.157 cv
812.072 934.357 811.708 932.257 811.008 930.857 cv
810.28 929.457 809.216 928.757 807.788 928.757 cv
807.788 926.573 mo
810.056 926.573 811.792 927.497 813.024 929.289 cv
814.228 931.109 814.844 933.741 814.844 937.157 cv
814.844 940.601 814.228 943.233 813.024 945.025 cv
811.792 946.817 810.056 947.713 807.788 947.713 cv
805.492 947.713 803.728 946.817 802.524 945.025 cv
801.32 943.233 800.732 940.601 800.732 937.157 cv
800.732 933.741 801.32 931.109 802.524 929.289 cv
803.728 927.497 805.492 926.573 807.788 926.573 cv
f
732.556 869.654 mo
717.556 869.654 li
f
732.556 869.654 mo
717.556 869.654 li
@
745.46 858.788 mo
744.032 858.788 742.968 859.488 742.24 860.888 cv
741.512 862.288 741.176 864.388 741.176 867.188 cv
741.176 869.988 741.512 872.088 742.24 873.488 cv
742.968 874.888 744.032 875.588 745.46 875.588 cv
746.888 875.588 747.952 874.888 748.68 873.488 cv
749.38 872.088 749.744 869.988 749.744 867.188 cv
749.744 864.388 749.38 862.288 748.68 860.888 cv
747.952 859.488 746.888 858.788 745.46 858.788 cv
745.46 856.604 mo
747.728 856.604 749.464 857.528 750.696 859.32 cv
751.9 861.14 752.516 863.772 752.516 867.188 cv
752.516 870.632 751.9 873.264 750.696 875.056 cv
749.464 876.848 747.728 877.744 745.46 877.744 cv
743.164 877.744 741.4 876.848 740.196 875.056 cv
738.992 873.264 738.404 870.632 738.404 867.188 cv
738.404 863.772 738.992 861.14 740.196 859.32 cv
741.4 857.528 743.164 856.604 745.46 856.604 cv
f
757.36 873.908 mo
760.244 873.908 li
760.244 877.38 li
757.36 877.38 li
757.36 873.908 li
f
766.74 875.056 mo
771.248 875.056 li
771.248 859.488 li
766.348 860.468 li
766.348 857.948 li
771.22 856.968 li
773.992 856.968 li
773.992 875.056 li
778.5 875.056 li
778.5 877.38 li
766.74 877.38 li
766.74 875.056 li
f
784.156 876.96 mo
784.156 874.44 li
784.828 874.776 785.528 875.028 786.256 875.196 cv
786.956 875.364 787.656 875.448 788.356 875.448 cv
790.148 875.448 791.548 874.86 792.5 873.628 cv
793.452 872.396 794.012 870.548 794.18 868.028 cv
793.62 868.812 792.948 869.428 792.164 869.848 cv
791.352 870.268 790.456 870.464 789.476 870.464 cv
787.404 870.464 785.78 869.848 784.604 868.616 cv
783.428 867.384 782.84 865.704 782.84 863.548 cv
782.84 861.476 783.456 859.796 784.688 858.508 cv
785.92 857.248 787.572 856.604 789.644 856.604 cv
791.996 856.604 793.816 857.528 795.048 859.32 cv
796.28 861.14 796.924 863.772 796.924 867.188 cv
796.924 870.436 796.14 872.984 794.628 874.888 cv
793.088 876.792 791.044 877.744 788.468 877.744 cv
787.768 877.744 787.068 877.66 786.368 877.548 cv
785.64 877.436 784.912 877.24 784.156 876.96 cv
789.644 868.308 mo
790.876 868.308 791.856 867.888 792.584 867.048 cv
793.312 866.208 793.676 865.032 793.676 863.548 cv
793.676 862.092 793.312 860.916 792.584 860.076 cv
791.856 859.236 790.876 858.788 789.644 858.788 cv
788.412 858.788 787.432 859.236 786.704 860.076 cv
785.976 860.916 785.612 862.092 785.612 863.548 cv
785.612 865.032 785.976 866.208 786.704 867.048 cv
787.432 867.888 788.412 868.308 789.644 868.308 cv
f
804.26 875.056 mo
813.892 875.056 li
813.892 877.38 li
800.928 877.38 li
800.928 875.056 li
801.964 873.992 803.392 872.536 805.212 870.688 cv
807.004 868.868 808.152 867.692 808.628 867.16 cv
809.524 866.18 810.14 865.34 810.476 864.64 cv
810.812 863.968 811.008 863.268 811.008 862.596 cv
811.008 861.532 810.616 860.636 809.86 859.964 cv
809.104 859.292 808.124 858.928 806.892 858.928 cv
806.024 858.928 805.1 859.096 804.148 859.376 cv
803.196 859.684 802.16 860.132 801.068 860.748 cv
801.068 857.948 li
802.188 857.5 803.224 857.164 804.176 856.94 cv
805.128 856.716 806.024 856.604 806.836 856.604 cv
808.936 856.604 810.616 857.136 811.876 858.2 cv
813.136 859.264 813.78 860.664 813.78 862.428 cv
813.78 863.268 813.612 864.08 813.304 864.808 cv
812.996 865.564 812.436 866.46 811.596 867.468 cv
811.372 867.748 810.644 868.504 809.412 869.764 cv
808.18 871.024 806.472 872.788 804.26 875.056 cv
f
732.556 799.684 mo
717.556 799.684 li
f
732.556 799.684 mo
717.556 799.684 li
@
745.46 788.819 mo
744.032 788.819 742.968 789.519 742.24 790.919 cv
741.512 792.319 741.176 794.419 741.176 797.219 cv
741.176 800.019 741.512 802.119 742.24 803.519 cv
742.968 804.919 744.032 805.619 745.46 805.619 cv
746.888 805.619 747.952 804.919 748.68 803.519 cv
749.38 802.119 749.744 800.019 749.744 797.219 cv
749.744 794.419 749.38 792.319 748.68 790.919 cv
747.952 789.519 746.888 788.819 745.46 788.819 cv
745.46 786.635 mo
747.728 786.635 749.464 787.559 750.696 789.351 cv
751.9 791.171 752.516 793.803 752.516 797.219 cv
752.516 800.663 751.9 803.295 750.696 805.087 cv
749.464 806.879 747.728 807.775 745.46 807.775 cv
743.164 807.775 741.4 806.879 740.196 805.087 cv
738.992 803.295 738.404 800.663 738.404 797.219 cv
738.404 793.803 738.992 791.171 740.196 789.351 cv
741.4 787.559 743.164 786.635 745.46 786.635 cv
f
757.36 803.939 mo
760.244 803.939 li
760.244 807.411 li
757.36 807.411 li
757.36 803.939 li
f
766.74 805.087 mo
771.248 805.087 li
771.248 789.519 li
766.348 790.499 li
766.348 787.979 li
771.22 786.999 li
773.992 786.999 li
773.992 805.087 li
778.5 805.087 li
778.5 807.411 li
766.74 807.411 li
766.74 805.087 li
f
784.156 806.991 mo
784.156 804.471 li
784.828 804.807 785.528 805.059 786.256 805.227 cv
786.956 805.395 787.656 805.479 788.356 805.479 cv
790.148 805.479 791.548 804.891 792.5 803.659 cv
793.452 802.427 794.012 800.579 794.18 798.059 cv
793.62 798.843 792.948 799.459 792.164 799.879 cv
791.352 800.299 790.456 800.495 789.476 800.495 cv
787.404 800.495 785.78 799.879 784.604 798.647 cv
783.428 797.415 782.84 795.735 782.84 793.579 cv
782.84 791.507 783.456 789.827 784.688 788.539 cv
785.92 787.279 787.572 786.635 789.644 786.635 cv
791.996 786.635 793.816 787.559 795.048 789.351 cv
796.28 791.171 796.924 793.803 796.924 797.219 cv
796.924 800.467 796.14 803.015 794.628 804.919 cv
793.088 806.823 791.044 807.775 788.468 807.775 cv
787.768 807.775 787.068 807.691 786.368 807.579 cv
785.64 807.467 784.912 807.271 784.156 806.991 cv
789.644 798.339 mo
790.876 798.339 791.856 797.919 792.584 797.079 cv
793.312 796.239 793.676 795.063 793.676 793.579 cv
793.676 792.123 793.312 790.947 792.584 790.107 cv
791.856 789.267 790.876 788.819 789.644 788.819 cv
788.412 788.819 787.432 789.267 786.704 790.107 cv
785.976 790.947 785.612 792.123 785.612 793.579 cv
785.612 795.063 785.976 796.239 786.704 797.079 cv
787.432 797.919 788.412 798.339 789.644 798.339 cv
f
809.468 789.407 mo
802.496 800.299 li
809.468 800.299 li
809.468 789.407 li
808.74 786.999 mo
812.212 786.999 li
812.212 800.299 li
815.124 800.299 li
815.124 802.595 li
812.212 802.595 li
812.212 807.411 li
809.468 807.411 li
809.468 802.595 li
800.256 802.595 li
800.256 799.935 li
808.74 786.999 li
f
732.556 729.715 mo
717.556 729.715 li
f
732.556 729.715 mo
717.556 729.715 li
@
745.46 718.85 mo
744.032 718.85 742.968 719.55 742.24 720.95 cv
741.512 722.35 741.176 724.45 741.176 727.25 cv
741.176 730.05 741.512 732.15 742.24 733.55 cv
742.968 734.95 744.032 735.65 745.46 735.65 cv
746.888 735.65 747.952 734.95 748.68 733.55 cv
749.38 732.15 749.744 730.05 749.744 727.25 cv
749.744 724.45 749.38 722.35 748.68 720.95 cv
747.952 719.55 746.888 718.85 745.46 718.85 cv
745.46 716.666 mo
747.728 716.666 749.464 717.59 750.696 719.382 cv
751.9 721.202 752.516 723.834 752.516 727.25 cv
752.516 730.694 751.9 733.326 750.696 735.118 cv
749.464 736.91 747.728 737.806 745.46 737.806 cv
743.164 737.806 741.4 736.91 740.196 735.118 cv
738.992 733.326 738.404 730.694 738.404 727.25 cv
738.404 723.834 738.992 721.202 740.196 719.382 cv
741.4 717.59 743.164 716.666 745.46 716.666 cv
f
757.36 733.97 mo
760.244 733.97 li
760.244 737.442 li
757.36 737.442 li
757.36 733.97 li
f
766.74 735.118 mo
771.248 735.118 li
771.248 719.55 li
766.348 720.53 li
766.348 718.01 li
771.22 717.03 li
773.992 717.03 li
773.992 735.118 li
778.5 735.118 li
778.5 737.442 li
766.74 737.442 li
766.74 735.118 li
f
784.156 737.022 mo
784.156 734.502 li
784.828 734.838 785.528 735.09 786.256 735.258 cv
786.956 735.426 787.656 735.51 788.356 735.51 cv
790.148 735.51 791.548 734.922 792.5 733.69 cv
793.452 732.458 794.012 730.61 794.18 728.09 cv
793.62 728.874 792.948 729.49 792.164 729.91 cv
791.352 730.33 790.456 730.526 789.476 730.526 cv
787.404 730.526 785.78 729.91 784.604 728.678 cv
783.428 727.446 782.84 725.766 782.84 723.61 cv
782.84 721.538 783.456 719.858 784.688 718.57 cv
785.92 717.31 787.572 716.666 789.644 716.666 cv
791.996 716.666 793.816 717.59 795.048 719.382 cv
796.28 721.202 796.924 723.834 796.924 727.25 cv
796.924 730.498 796.14 733.046 794.628 734.95 cv
793.088 736.854 791.044 737.806 788.468 737.806 cv
787.768 737.806 787.068 737.722 786.368 737.61 cv
785.64 737.498 784.912 737.302 784.156 737.022 cv
789.644 728.37 mo
790.876 728.37 791.856 727.95 792.584 727.11 cv
793.312 726.27 793.676 725.094 793.676 723.61 cv
793.676 722.154 793.312 720.978 792.584 720.138 cv
791.856 719.298 790.876 718.85 789.644 718.85 cv
788.412 718.85 787.432 719.298 786.704 720.138 cv
785.976 720.978 785.612 722.154 785.612 723.61 cv
785.612 725.094 785.976 726.27 786.704 727.11 cv
787.432 727.95 788.412 728.37 789.644 728.37 cv
f
808.124 726.13 mo
806.892 726.13 805.912 726.578 805.184 727.418 cv
804.456 728.258 804.092 729.434 804.092 730.89 cv
804.092 732.374 804.456 733.55 805.184 734.39 cv
805.912 735.23 806.892 735.65 808.124 735.65 cv
809.356 735.65 810.336 735.23 811.064 734.39 cv
811.792 733.55 812.156 732.374 812.156 730.89 cv
812.156 729.434 811.792 728.258 811.064 727.418 cv
810.336 726.578 809.356 726.13 808.124 726.13 cv
813.612 717.478 mo
813.612 719.998 li
812.912 719.662 812.212 719.41 811.512 719.242 cv
810.784 719.074 810.084 718.99 809.412 718.99 cv
807.564 718.99 806.164 719.606 805.212 720.838 cv
804.26 722.07 803.7 723.946 803.588 726.41 cv
804.12 725.626 804.792 725.01 805.604 724.59 cv
806.416 724.17 807.312 723.946 808.292 723.946 cv
810.336 723.946 811.96 724.59 813.136 725.822 cv
814.312 727.054 814.928 728.762 814.928 730.89 cv
814.928 732.99 814.284 734.67 813.052 735.93 cv
811.82 737.19 810.168 737.806 808.124 737.806 cv
805.772 737.806 803.952 736.91 802.72 735.118 cv
801.46 733.326 800.844 730.694 800.844 727.25 cv
800.844 724.03 801.6 721.454 803.14 719.55 cv
804.652 717.646 806.724 716.666 809.3 716.666 cv
809.972 716.666 810.672 716.75 811.4 716.862 cv
812.1 717.002 812.828 717.198 813.612 717.478 cv
f
732.556 659.746 mo
717.556 659.746 li
f
732.556 659.746 mo
717.556 659.746 li
@
745.46 648.88 mo
744.032 648.88 742.968 649.58 742.24 650.98 cv
741.512 652.38 741.176 654.48 741.176 657.28 cv
741.176 660.08 741.512 662.18 742.24 663.58 cv
742.968 664.98 744.032 665.68 745.46 665.68 cv
746.888 665.68 747.952 664.98 748.68 663.58 cv
749.38 662.18 749.744 660.08 749.744 657.28 cv
749.744 654.48 749.38 652.38 748.68 650.98 cv
747.952 649.58 746.888 648.88 745.46 648.88 cv
745.46 646.696 mo
747.728 646.696 749.464 647.62 750.696 649.412 cv
751.9 651.232 752.516 653.864 752.516 657.28 cv
752.516 660.724 751.9 663.356 750.696 665.148 cv
749.464 666.94 747.728 667.836 745.46 667.836 cv
743.164 667.836 741.4 666.94 740.196 665.148 cv
738.992 663.356 738.404 660.724 738.404 657.28 cv
738.404 653.864 738.992 651.232 740.196 649.412 cv
741.4 647.62 743.164 646.696 745.46 646.696 cv
f
757.36 664 mo
760.244 664 li
760.244 667.472 li
757.36 667.472 li
757.36 664 li
f
766.74 665.148 mo
771.248 665.148 li
771.248 649.58 li
766.348 650.56 li
766.348 648.04 li
771.22 647.06 li
773.992 647.06 li
773.992 665.148 li
778.5 665.148 li
778.5 667.472 li
766.74 667.472 li
766.74 665.148 li
f
784.156 667.052 mo
784.156 664.532 li
784.828 664.868 785.528 665.12 786.256 665.288 cv
786.956 665.456 787.656 665.54 788.356 665.54 cv
790.148 665.54 791.548 664.952 792.5 663.72 cv
793.452 662.488 794.012 660.64 794.18 658.12 cv
793.62 658.904 792.948 659.52 792.164 659.94 cv
791.352 660.36 790.456 660.556 789.476 660.556 cv
787.404 660.556 785.78 659.94 784.604 658.708 cv
783.428 657.476 782.84 655.796 782.84 653.64 cv
782.84 651.568 783.456 649.888 784.688 648.6 cv
785.92 647.34 787.572 646.696 789.644 646.696 cv
791.996 646.696 793.816 647.62 795.048 649.412 cv
796.28 651.232 796.924 653.864 796.924 657.28 cv
796.924 660.528 796.14 663.076 794.628 664.98 cv
793.088 666.884 791.044 667.836 788.468 667.836 cv
787.768 667.836 787.068 667.752 786.368 667.64 cv
785.64 667.528 784.912 667.332 784.156 667.052 cv
789.644 658.4 mo
790.876 658.4 791.856 657.98 792.584 657.14 cv
793.312 656.3 793.676 655.124 793.676 653.64 cv
793.676 652.184 793.312 651.008 792.584 650.168 cv
791.856 649.328 790.876 648.88 789.644 648.88 cv
788.412 648.88 787.432 649.328 786.704 650.168 cv
785.976 651.008 785.612 652.184 785.612 653.64 cv
785.612 655.124 785.976 656.3 786.704 657.14 cv
787.432 657.98 788.412 658.4 789.644 658.4 cv
f
807.788 657.784 mo
806.472 657.784 805.436 658.148 804.68 658.848 cv
803.924 659.548 803.56 660.5 803.56 661.732 cv
803.56 662.964 803.924 663.944 804.68 664.644 cv
805.436 665.344 806.472 665.68 807.788 665.68 cv
809.076 665.68 810.112 665.344 810.868 664.616 cv
811.624 663.916 812.016 662.964 812.016 661.732 cv
812.016 660.5 811.624 659.548 810.896 658.848 cv
810.14 658.148 809.104 657.784 807.788 657.784 cv
805.016 656.608 mo
803.84 656.328 802.916 655.768 802.244 654.956 cv
801.572 654.144 801.264 653.164 801.264 651.988 cv
801.264 650.364 801.824 649.076 803 648.124 cv
804.148 647.172 805.744 646.696 807.788 646.696 cv
809.804 646.696 811.4 647.172 812.576 648.124 cv
813.724 649.076 814.312 650.364 814.312 651.988 cv
814.312 653.164 813.976 654.144 813.304 654.956 cv
812.632 655.768 811.736 656.328 810.56 656.608 cv
811.876 656.916 812.912 657.532 813.668 658.428 cv
814.396 659.324 814.788 660.444 814.788 661.732 cv
814.788 663.72 814.172 665.232 812.968 666.268 cv
811.736 667.332 810.028 667.836 807.788 667.836 cv
805.52 667.836 803.784 667.332 802.58 666.268 cv
801.376 665.232 800.788 663.72 800.788 661.732 cv
800.788 660.444 801.152 659.324 801.908 658.428 cv
802.636 657.532 803.672 656.916 805.016 656.608 cv
804.008 652.24 mo
804.008 653.304 804.316 654.144 804.988 654.732 cv
805.66 655.32 806.584 655.6 807.788 655.6 cv
808.964 655.6 809.888 655.32 810.56 654.732 cv
811.232 654.144 811.568 653.304 811.568 652.24 cv
811.568 651.176 811.232 650.364 810.56 649.776 cv
809.888 649.188 808.964 648.88 807.788 648.88 cv
806.584 648.88 805.66 649.188 804.988 649.776 cv
804.316 650.364 804.008 651.176 804.008 652.24 cv
f
819.847 1078.64 mo
822.535 1078.64 li
822.031 1079.71 821.667 1080.69 821.415 1081.61 cv
821.191 1082.56 821.051 1083.46 821.051 1084.3 cv
821.051 1085.81 821.359 1086.99 821.919 1087.8 cv
822.507 1088.61 823.347 1089 824.411 1089 cv
825.307 1089 826.007 1088.75 826.455 1088.19 cv
826.931 1087.66 827.295 1086.62 827.575 1085.11 cv
827.911 1083.43 li
828.303 1081.39 829.003 1079.87 829.983 1078.89 cv
830.991 1077.91 832.307 1077.41 833.959 1077.41 cv
835.947 1077.41 837.431 1078.08 838.439 1079.4 cv
839.447 1080.74 839.951 1082.67 839.951 1085.22 cv
839.951 1086.2 839.839 1087.24 839.643 1088.33 cv
839.447 1089.42 839.139 1090.54 838.691 1091.69 cv
835.835 1091.69 li
836.479 1090.57 836.955 1089.48 837.263 1088.41 cv
837.599 1087.35 837.739 1086.29 837.739 1085.22 cv
837.739 1083.65 837.431 1082.45 836.815 1081.58 cv
836.199 1080.74 835.331 1080.29 834.155 1080.29 cv
833.147 1080.29 832.363 1080.6 831.803 1081.22 cv
831.243 1081.83 830.823 1082.84 830.543 1084.24 cv
830.207 1085.92 li
829.815 1087.99 829.171 1089.48 828.275 1090.4 cv
827.407 1091.33 826.203 1091.77 824.635 1091.77 cv
822.843 1091.77 821.415 1091.16 820.379 1089.87 cv
819.343 1088.61 818.811 1086.85 818.811 1084.61 cv
818.811 1083.65 818.895 1082.7 819.063 1081.69 cv
819.231 1080.71 819.511 1079.71 819.847 1078.64 cv
f
840.987 1066.83 mo
842.779 1067.56 843.983 1068.26 844.543 1068.93 cv
845.103 1069.61 845.383 1070.5 845.383 1071.62 cv
845.383 1073.64 li
843.283 1073.64 li
843.283 1072.15 li
843.283 1071.48 843.115 1070.95 842.779 1070.56 cv
842.443 1070.17 841.687 1069.75 840.455 1069.27 cv
839.335 1068.82 li
824.271 1075.01 li
824.271 1072.35 li
836.255 1067.56 li
824.271 1062.77 li
824.271 1060.11 li
840.987 1066.83 li
f
827.211 1044.72 mo
826.091 1044.1 825.279 1043.35 824.719 1042.48 cv
824.187 1041.61 823.907 1040.58 823.907 1039.37 cv
823.907 1037.8 824.467 1036.57 825.587 1035.7 cv
826.707 1034.84 828.303 1034.39 830.347 1034.39 cv
839.587 1034.39 li
839.587 1036.91 li
830.431 1036.91 li
828.975 1036.91 827.883 1037.19 827.155 1037.69 cv
826.455 1038.22 826.091 1039.01 826.091 1040.07 cv
826.091 1041.39 826.539 1042.42 827.407 1043.18 cv
828.275 1043.94 829.451 1044.3 830.935 1044.3 cv
839.587 1044.3 li
839.587 1046.82 li
830.431 1046.82 li
828.975 1046.82 827.883 1047.1 827.155 1047.6 cv
826.455 1048.14 826.091 1048.95 826.091 1050.01 cv
826.091 1051.3 826.539 1052.34 827.407 1053.09 cv
828.275 1053.85 829.451 1054.21 830.935 1054.21 cv
839.587 1054.21 li
839.587 1056.73 li
824.271 1056.73 li
824.271 1054.21 li
826.651 1054.21 li
825.727 1053.65 825.027 1052.95 824.579 1052.14 cv
824.131 1051.36 823.907 1050.4 823.907 1049.28 cv
823.907 1048.16 824.187 1047.24 824.747 1046.46 cv
825.307 1045.67 826.147 1045.11 827.211 1044.72 cv
f
827.211 1017.44 mo
826.091 1016.83 825.279 1016.07 824.719 1015.2 cv
824.187 1014.34 823.907 1013.3 823.907 1012.1 cv
823.907 1010.53 824.467 1009.3 825.587 1008.43 cv
826.707 1007.56 828.303 1007.11 830.347 1007.11 cv
839.587 1007.11 li
839.587 1009.63 li
830.431 1009.63 li
828.975 1009.63 827.883 1009.91 827.155 1010.42 cv
826.455 1010.95 826.091 1011.73 826.091 1012.8 cv
826.091 1014.11 826.539 1015.15 827.407 1015.9 cv
828.275 1016.66 829.451 1017.02 830.935 1017.02 cv
839.587 1017.02 li
839.587 1019.54 li
830.431 1019.54 li
828.975 1019.54 827.883 1019.82 827.155 1020.33 cv
826.455 1020.86 826.091 1021.67 826.091 1022.74 cv
826.091 1024.02 826.539 1025.06 827.407 1025.82 cv
828.275 1026.57 829.451 1026.94 830.935 1026.94 cv
839.587 1026.94 li
839.587 1029.46 li
824.271 1029.46 li
824.271 1026.94 li
826.651 1026.94 li
825.727 1026.38 825.027 1025.68 824.579 1024.86 cv
824.131 1024.08 823.907 1023.13 823.907 1022.01 cv
823.907 1020.89 824.187 1019.96 824.747 1019.18 cv
825.307 1018.4 826.147 1017.84 827.211 1017.44 cv
f
831.299 988.992 mo
832.531 988.992 li
832.531 1000.56 li
834.267 1000.44 835.611 999.94 836.507 998.988 cv
837.403 998.064 837.851 996.776 837.851 995.096 cv
837.851 994.144 837.739 993.192 837.515 992.296 cv
837.291 991.4 836.927 990.476 836.423 989.58 cv
838.803 989.58 li
839.195 990.476 839.503 991.4 839.671 992.352 cv
839.839 993.304 839.951 994.284 839.951 995.236 cv
839.951 997.7 839.251 999.632 837.851 1001.06 cv
836.451 1002.49 834.519 1003.19 832.083 1003.19 cv
829.591 1003.19 827.603 1002.52 826.119 1001.17 cv
824.663 999.828 823.907 997.98 823.907 995.684 cv
823.907 993.612 824.579 991.988 825.895 990.784 cv
827.239 989.608 829.031 988.992 831.299 988.992 cv
830.571 991.512 mo
829.199 991.54 828.107 991.932 827.267 992.66 cv
826.455 993.416 826.035 994.424 826.035 995.656 cv
826.035 997.056 826.455 998.176 827.239 999.016 cv
828.023 999.856 829.143 1000.36 830.571 1000.47 cv
830.571 991.512 li
f
819.931 982.378 mo
824.271 982.378 li
824.271 977.198 li
826.231 977.198 li
826.231 982.378 li
834.547 982.378 li
835.807 982.378 836.619 982.21 836.955 981.874 cv
837.319 981.538 837.487 980.838 837.487 979.774 cv
837.487 977.198 li
839.587 977.198 li
839.587 979.774 li
839.587 981.734 839.223 983.078 838.495 983.806 cv
837.767 984.534 836.451 984.898 834.547 984.898 cv
826.231 984.898 li
826.231 986.746 li
824.271 986.746 li
824.271 984.898 li
819.931 984.898 li
819.931 982.378 li
f
826.623 965.015 mo
826.455 965.295 826.343 965.603 826.259 965.939 cv
826.203 966.275 826.147 966.639 826.147 967.031 cv
826.147 968.459 826.623 969.551 827.547 970.307 cv
828.471 971.091 829.787 971.455 831.523 971.455 cv
839.587 971.455 li
839.587 973.975 li
824.271 973.975 li
824.271 971.455 li
826.651 971.455 li
825.727 970.951 825.027 970.251 824.579 969.411 cv
824.131 968.571 823.907 967.535 823.907 966.303 cv
823.907 966.135 823.935 965.939 823.935 965.715 cv
823.963 965.519 823.991 965.295 824.047 965.015 cv
826.623 965.015 li
f
824.271 962.379 mo
824.271 959.859 li
839.587 959.859 li
839.587 962.379 li
824.271 962.379 li
818.307 962.379 mo
818.307 959.859 li
821.499 959.859 li
821.499 962.379 li
818.307 962.379 li
f
824.271 955.692 mo
824.271 943.736 li
826.567 943.736 li
837.571 953.2 li
837.571 943.736 li
839.587 943.736 li
839.587 956.028 li
837.291 956.028 li
826.287 946.564 li
826.287 955.692 li
824.271 955.692 li
f
831.299 926.799 mo
832.531 926.799 li
832.531 938.363 li
834.267 938.251 835.611 937.747 836.507 936.795 cv
837.403 935.871 837.851 934.583 837.851 932.903 cv
837.851 931.951 837.739 930.999 837.515 930.103 cv
837.291 929.207 836.927 928.283 836.423 927.387 cv
838.803 927.387 li
839.195 928.283 839.503 929.207 839.671 930.159 cv
839.839 931.111 839.951 932.091 839.951 933.043 cv
839.951 935.507 839.251 937.439 837.851 938.867 cv
836.451 940.295 834.519 940.995 832.083 940.995 cv
829.591 940.995 827.603 940.323 826.119 938.979 cv
824.663 937.635 823.907 935.787 823.907 933.491 cv
823.907 931.419 824.579 929.795 825.895 928.591 cv
827.239 927.415 829.031 926.799 831.299 926.799 cv
830.571 929.319 mo
829.199 929.347 828.107 929.739 827.267 930.467 cv
826.455 931.223 826.035 932.231 826.035 933.463 cv
826.035 934.863 826.455 935.983 827.239 936.823 cv
828.023 937.663 829.143 938.167 830.571 938.279 cv
830.571 929.319 li
f
826.595 912.596 mo
818.307 912.596 li
818.307 910.076 li
839.587 910.076 li
839.587 912.596 li
837.291 912.596 li
838.215 913.128 838.887 913.8 839.307 914.612 cv
839.727 915.424 839.951 916.376 839.951 917.496 cv
839.951 919.344 839.223 920.856 837.767 922.032 cv
836.311 923.208 834.351 923.768 831.943 923.768 cv
829.535 923.768 827.603 923.208 826.119 922.032 cv
824.663 920.856 823.907 919.344 823.907 917.496 cv
823.907 916.376 824.131 915.424 824.579 914.612 cv
825.027 913.8 825.699 913.128 826.595 912.596 cv
831.943 921.164 mo
833.791 921.164 835.247 920.8 836.311 920.044 cv
837.375 919.288 837.879 918.224 837.879 916.88 cv
837.879 915.564 837.375 914.528 836.311 913.744 cv
835.247 912.988 833.791 912.596 831.943 912.596 cv
830.095 912.596 828.667 912.988 827.603 913.744 cv
826.539 914.528 826.007 915.564 826.007 916.88 cv
826.007 918.224 826.539 919.288 827.603 920.044 cv
828.667 920.8 830.095 921.164 831.943 921.164 cv
f
839.587 897.122 mo
839.587 897.291 839.531 897.346 839.363 897.346 cv
839.335 897.346 li
839.279 897.319 li
819.847 887.687 li
819.651 887.603 819.539 887.435 819.539 887.182 cv
819.539 886.791 li
819.539 886.539 819.651 886.371 819.847 886.286 cv
839.279 876.655 li
839.335 876.627 li
839.363 876.627 li
839.531 876.627 839.587 876.711 839.587 876.851 cv
839.587 897.122 li
837.347 895.275 mo
837.347 880.518 li
822.479 887.883 li
837.347 895.275 li
f
819.175 875.366 mo
819.175 858.118 li
821.499 858.118 li
821.499 865.37 li
839.587 865.37 li
839.587 868.142 li
821.499 868.142 li
821.499 875.366 li
819.175 875.366 li
f
849.513 856.56 mo
849.984 856.286 850.219 855.816 850.219 855.13 cv
850.219 854.502 850.003 853.973 849.572 853.522 cv
849.141 853.072 848.612 852.699 848.004 852.425 cv
847.377 852.15 846.75 851.935 846.122 851.778 cv
846.671 852.366 846.926 852.993 846.926 853.66 cv
846.926 854.189 846.828 854.64 846.671 854.992 cv
846.514 855.345 846.24 855.639 845.887 855.835 cv
845.534 856.031 845.103 856.129 844.594 856.129 cv
844.162 856.129 843.731 856.07 843.28 855.953 cv
842.849 855.835 842.34 855.678 841.791 855.482 cv
841.242 855.286 840.752 855.09 840.34 854.934 cv
839.87 854.777 839.478 854.679 839.164 854.679 cv
838.772 854.679 838.576 854.836 838.576 855.11 cv
838.576 855.62 838.851 856.051 839.38 856.384 cv
839.929 856.737 840.517 856.972 841.164 857.129 cv
841.281 857.286 li
841.281 857.521 li
841.281 857.638 841.222 857.678 841.105 857.678 cv
841.046 857.678 li
840.262 857.482 839.576 857.148 838.968 856.717 cv
838.38 856.286 838.067 855.737 838.067 855.071 cv
838.067 854.6 838.224 854.208 838.537 853.895 cv
838.851 853.581 839.223 853.405 839.694 853.405 cv
839.948 853.405 840.203 853.464 840.458 853.562 cv
840.615 853.64 840.968 853.777 841.497 853.973 cv
842.046 854.169 842.477 854.326 842.83 854.424 cv
843.182 854.542 843.535 854.62 843.868 854.698 cv
844.221 854.777 844.554 854.796 844.888 854.796 cv
845.319 854.796 845.691 854.718 845.985 854.522 cv
846.299 854.346 846.436 854.052 846.436 853.64 cv
846.436 852.836 845.946 852.111 844.946 851.464 cv
838.91 849.975 li
838.753 849.936 838.596 849.838 838.478 849.681 cv
838.361 849.524 838.282 849.348 838.282 849.152 cv
838.282 848.995 838.341 848.858 838.439 848.74 cv
838.537 848.622 838.674 848.564 838.831 848.564 cv
838.988 848.583 li
846.769 850.524 li
847.436 850.7 848.063 851.014 848.69 851.464 cv
849.298 851.935 849.788 852.484 850.16 853.13 cv
850.532 853.797 850.728 854.463 850.728 855.149 cv
850.728 855.502 850.65 855.835 850.532 856.168 cv
850.395 856.502 850.199 856.776 849.944 856.972 cv
849.67 857.168 849.376 857.266 849.023 857.266 cv
848.67 857.266 848.357 857.168 848.102 856.952 cv
847.828 856.756 847.71 856.462 847.71 856.11 cv
847.71 855.914 847.769 855.737 847.906 855.58 cv
848.024 855.443 848.2 855.365 848.416 855.365 cv
848.71 855.365 848.964 855.482 849.2 855.698 cv
849.415 855.933 849.533 856.188 849.533 856.482 cv
849.513 856.521 li
849.513 856.56 li
f
836.115 841.204 mo
836.115 838.32 li
838.467 838.32 li
842.807 840.56 li
842.807 842.324 li
838.467 841.204 li
836.115 841.204 li
f
818.335 817.999 mo
820.463 819.231 822.535 820.127 824.579 820.715 cv
826.623 821.331 828.695 821.611 830.795 821.611 cv
832.923 821.611 834.995 821.331 837.039 820.715 cv
839.111 820.127 841.155 819.231 843.255 817.999 cv
843.255 820.183 li
841.099 821.555 839.027 822.591 836.955 823.263 cv
834.883 823.935 832.839 824.271 830.795 824.271 cv
828.779 824.271 826.735 823.935 824.663 823.263 cv
822.591 822.591 820.491 821.583 818.335 820.183 cv
818.335 817.999 li
f
819.175 813.012 mo
819.175 810.24 li
827.799 810.24 li
819.175 801.084 li
819.175 797.528 li
828.695 807.664 li
839.587 796.8 li
839.587 800.44 li
829.759 810.24 li
839.587 810.24 li
839.587 813.012 li
819.175 813.012 li
f
818.335 795.154 mo
818.335 792.97 li
820.491 791.626 822.591 790.59 824.663 789.918 cv
826.735 789.246 828.779 788.882 830.795 788.882 cv
832.839 788.882 834.883 789.246 836.955 789.918 cv
839.027 790.59 841.099 791.626 843.255 792.97 cv
843.255 795.154 li
841.155 793.95 839.111 793.054 837.039 792.438 cv
834.995 791.85 832.923 791.542 830.795 791.542 cv
828.695 791.542 826.623 791.85 824.579 792.438 cv
822.535 793.054 820.463 793.95 818.335 795.154 cv
f
224.011 712.795 mo
224.011 715.099 li
223.099 714.667 222.259 714.355 221.467 714.139 cv
220.651 713.947 219.883 713.827 219.163 713.827 cv
217.867 713.827 216.859 714.091 216.163 714.571 cv
215.467 715.075 215.131 715.795 215.131 716.707 cv
215.131 717.475 215.347 718.075 215.827 718.459 cv
216.283 718.867 217.171 719.179 218.467 719.419 cv
219.907 719.707 li
221.659 720.043 222.955 720.643 223.795 721.483 cv
224.635 722.347 225.067 723.475 225.067 724.891 cv
225.067 726.595 224.491 727.867 223.363 728.731 cv
222.211 729.595 220.555 730.027 218.371 730.027 cv
217.531 730.027 216.643 729.931 215.707 729.763 cv
214.771 729.595 213.811 729.331 212.827 728.947 cv
212.827 726.499 li
213.787 727.051 214.723 727.459 215.635 727.723 cv
216.547 728.011 217.459 728.131 218.371 728.131 cv
219.715 728.131 220.747 727.867 221.491 727.339 cv
222.211 726.811 222.595 726.067 222.595 725.059 cv
222.595 724.195 222.331 723.523 221.803 723.043 cv
221.275 722.563 220.411 722.203 219.211 721.963 cv
217.771 721.675 li
215.995 721.339 214.723 720.787 213.931 720.019 cv
213.139 719.275 212.755 718.243 212.755 716.899 cv
212.755 715.363 213.283 714.139 214.387 713.251 cv
215.467 712.363 216.979 711.907 218.899 711.907 cv
219.715 711.907 220.531 711.979 221.395 712.123 cv
222.235 712.267 223.099 712.507 224.011 712.795 cv
.926818 .245335 1 .155612 cmyk
f
234.139 730.915 mo
233.515 732.451 232.915 733.483 232.339 733.963 cv
231.763 734.443 230.995 734.683 230.035 734.683 cv
228.307 734.683 li
228.307 732.883 li
229.579 732.883 li
230.155 732.883 230.611 732.739 230.947 732.451 cv
231.283 732.163 231.643 731.515 232.051 730.459 cv
232.435 729.499 li
227.131 716.587 li
229.411 716.587 li
233.515 726.859 li
237.619 716.587 li
239.899 716.587 li
234.139 730.915 li
f
253.099 719.107 mo
253.627 718.147 254.275 717.451 255.019 716.971 cv
255.763 716.515 256.651 716.275 257.683 716.275 cv
259.027 716.275 260.083 716.755 260.827 717.715 cv
261.571 718.675 261.955 720.043 261.955 721.795 cv
261.955 729.715 li
259.795 729.715 li
259.795 721.867 li
259.795 720.619 259.555 719.683 259.123 719.059 cv
258.667 718.459 257.995 718.147 257.083 718.147 cv
255.955 718.147 255.067 718.531 254.419 719.275 cv
253.771 720.019 253.459 721.027 253.459 722.299 cv
253.459 729.715 li
251.299 729.715 li
251.299 721.867 li
251.299 720.619 251.059 719.683 250.627 719.059 cv
250.171 718.459 249.475 718.147 248.563 718.147 cv
247.459 718.147 246.571 718.531 245.923 719.275 cv
245.275 720.019 244.963 721.027 244.963 722.299 cv
244.963 729.715 li
242.803 729.715 li
242.803 716.587 li
244.963 716.587 li
244.963 718.627 li
245.443 717.835 246.043 717.235 246.739 716.851 cv
247.411 716.467 248.227 716.275 249.187 716.275 cv
250.147 716.275 250.939 716.515 251.611 716.995 cv
252.283 717.475 252.763 718.195 253.099 719.107 cv
f
276.475 719.107 mo
277.003 718.147 277.651 717.451 278.395 716.971 cv
279.139 716.515 280.027 716.275 281.059 716.275 cv
282.403 716.275 283.459 716.755 284.203 717.715 cv
284.947 718.675 285.331 720.043 285.331 721.795 cv
285.331 729.715 li
283.171 729.715 li
283.171 721.867 li
283.171 720.619 282.931 719.683 282.499 719.059 cv
282.043 718.459 281.371 718.147 280.459 718.147 cv
279.331 718.147 278.443 718.531 277.795 719.275 cv
277.147 720.019 276.835 721.027 276.835 722.299 cv
276.835 729.715 li
274.675 729.715 li
274.675 721.867 li
274.675 720.619 274.435 719.683 274.003 719.059 cv
273.547 718.459 272.851 718.147 271.939 718.147 cv
270.835 718.147 269.947 718.531 269.299 719.275 cv
268.651 720.019 268.339 721.027 268.339 722.299 cv
268.339 729.715 li
266.179 729.715 li
266.179 716.587 li
268.339 716.587 li
268.339 718.627 li
268.819 717.835 269.419 717.235 270.115 716.851 cv
270.787 716.467 271.603 716.275 272.563 716.275 cv
273.523 716.275 274.315 716.515 274.987 716.995 cv
275.659 717.475 276.139 718.195 276.475 719.107 cv
f
300.859 722.611 mo
300.859 723.667 li
290.947 723.667 li
291.043 725.155 291.475 726.307 292.291 727.075 cv
293.083 727.843 294.187 728.227 295.627 728.227 cv
296.443 728.227 297.259 728.131 298.027 727.939 cv
298.795 727.747 299.587 727.435 300.355 727.003 cv
300.355 729.043 li
299.587 729.379 298.795 729.643 297.979 729.787 cv
297.163 729.931 296.323 730.027 295.507 730.027 cv
293.395 730.027 291.739 729.427 290.515 728.227 cv
289.291 727.027 288.691 725.371 288.691 723.283 cv
288.691 721.147 289.267 719.443 290.419 718.171 cv
291.571 716.923 293.155 716.275 295.123 716.275 cv
296.899 716.275 298.291 716.851 299.323 717.979 cv
300.331 719.131 300.859 720.667 300.859 722.611 cv
298.699 721.987 mo
298.675 720.811 298.339 719.875 297.715 719.155 cv
297.067 718.459 296.203 718.099 295.147 718.099 cv
293.947 718.099 292.987 718.459 292.267 719.131 cv
291.547 719.803 291.115 720.763 291.019 721.987 cv
298.699 721.987 li
f
306.523 712.867 mo
306.523 716.587 li
310.963 716.587 li
310.963 718.267 li
306.523 718.267 li
306.523 725.395 li
306.523 726.475 306.667 727.171 306.955 727.459 cv
307.243 727.771 307.843 727.915 308.755 727.915 cv
310.963 727.915 li
310.963 729.715 li
308.755 729.715 li
307.075 729.715 305.923 729.403 305.299 728.779 cv
304.675 728.155 304.363 727.027 304.363 725.395 cv
304.363 718.267 li
302.779 718.267 li
302.779 716.587 li
304.363 716.587 li
304.363 712.867 li
306.523 712.867 li
f
321.403 718.603 mo
321.163 718.459 320.899 718.363 320.611 718.291 cv
320.323 718.243 320.011 718.195 319.675 718.195 cv
318.451 718.195 317.515 718.603 316.867 719.395 cv
316.195 720.187 315.883 721.315 315.883 722.803 cv
315.883 729.715 li
313.723 729.715 li
313.723 716.587 li
315.883 716.587 li
315.883 718.627 li
316.315 717.835 316.915 717.235 317.635 716.851 cv
318.355 716.467 319.243 716.275 320.299 716.275 cv
320.443 716.275 320.611 716.299 320.803 716.299 cv
320.971 716.323 321.163 716.347 321.403 716.395 cv
321.403 718.603 li
f
323.659 716.587 mo
325.819 716.587 li
325.819 729.715 li
323.659 729.715 li
323.659 716.587 li
323.659 711.475 mo
325.819 711.475 li
325.819 714.211 li
323.659 714.211 li
323.659 711.475 li
f
329.395 716.587 mo
339.643 716.587 li
339.643 718.555 li
331.531 727.987 li
339.643 727.987 li
339.643 729.715 li
329.107 729.715 li
329.107 727.747 li
337.219 718.315 li
329.395 718.315 li
329.395 716.587 li
f
354.163 722.611 mo
354.163 723.667 li
344.251 723.667 li
344.347 725.155 344.779 726.307 345.595 727.075 cv
346.387 727.843 347.491 728.227 348.931 728.227 cv
349.747 728.227 350.563 728.131 351.331 727.939 cv
352.099 727.747 352.891 727.435 353.659 727.003 cv
353.659 729.043 li
352.891 729.379 352.099 729.643 351.283 729.787 cv
350.467 729.931 349.627 730.027 348.811 730.027 cv
346.699 730.027 345.043 729.427 343.819 728.227 cv
342.595 727.027 341.995 725.371 341.995 723.283 cv
341.995 721.147 342.571 719.443 343.723 718.171 cv
344.875 716.923 346.459 716.275 348.427 716.275 cv
350.203 716.275 351.595 716.851 352.627 717.979 cv
353.635 719.131 354.163 720.667 354.163 722.611 cv
352.003 721.987 mo
351.979 720.811 351.643 719.875 351.019 719.155 cv
350.371 718.459 349.507 718.099 348.451 718.099 cv
347.251 718.099 346.291 718.459 345.571 719.131 cv
344.851 719.803 344.419 720.763 344.323 721.987 cv
352.003 721.987 li
f
366.331 718.579 mo
366.331 711.475 li
368.491 711.475 li
368.491 729.715 li
366.331 729.715 li
366.331 727.747 li
365.875 728.539 365.299 729.115 364.603 729.475 cv
363.907 729.835 363.091 730.027 362.131 730.027 cv
360.547 730.027 359.251 729.403 358.243 728.155 cv
357.235 726.907 356.755 725.227 356.755 723.163 cv
356.755 721.099 357.235 719.443 358.243 718.171 cv
359.251 716.923 360.547 716.275 362.131 716.275 cv
363.091 716.275 363.907 716.467 364.603 716.851 cv
365.299 717.235 365.875 717.811 366.331 718.579 cv
358.987 723.163 mo
358.987 724.747 359.299 725.995 359.947 726.907 cv
360.595 727.819 361.507 728.251 362.659 728.251 cv
363.787 728.251 364.675 727.819 365.347 726.907 cv
365.995 725.995 366.331 724.747 366.331 723.163 cv
366.331 721.579 365.995 720.355 365.347 719.443 cv
364.675 718.531 363.787 718.075 362.659 718.075 cv
361.507 718.075 360.595 718.531 359.947 719.443 cv
359.299 720.355 358.987 721.579 358.987 723.163 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
